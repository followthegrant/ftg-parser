<article article-type="article" specific-use="production" xml:lang="en" xmlns:hw="org.highwire.hpp" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ali="http://www.niso.org/schemas/ali/1.0/" xmlns:ref="http://schema.highwire.org/Reference" xmlns:hwp="http://schema.highwire.org/Journal" xmlns:l="http://schema.highwire.org/Linking" xmlns:r="http://schema.highwire.org/Revision" xmlns:x="http://www.w3.org/1999/xhtml" xmlns:app="http://www.w3.org/2007/app" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:nlm="http://schema.highwire.org/NLM/Journal" xmlns:a="http://www.w3.org/2005/Atom" xmlns:c="http://schema.highwire.org/Compound" xmlns:hpp="http://schema.highwire.org/Publishing"><front><journal-meta><journal-id journal-id-type="hwp">biorxiv</journal-id><journal-id journal-id-type="publisher-id">BIORXIV</journal-id><journal-title>bioRxiv</journal-title><abbrev-journal-title abbrev-type="publisher">bioRxiv</abbrev-journal-title><publisher><publisher-name>Cold Spring Harbor Laboratory</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.1101/029710</article-id><article-id pub-id-type="other" hwp:sub-type="pisa">biorxiv;029710v1</article-id><article-id pub-id-type="other" hwp:sub-type="pisa-master">biorxiv;029710</article-id><article-id pub-id-type="other" hwp:sub-type="slug">029710</article-id><article-id pub-id-type="other" hwp:sub-type="tag">029710</article-id><article-version>1.1</article-version><article-categories><subj-group subj-group-type="author-type"><subject>Regular Article</subject></subj-group><subj-group subj-group-type="heading"><subject>New Results</subject></subj-group><subj-group subj-group-type="hwp-journal-coll" hwp:journal-coll-id="Bioinformatics" hwp:journal="biorxiv"><subject>Bioinformatics</subject></subj-group></article-categories><title-group><article-title hwp:id="article-title-1">Flowr: Robust and efficient pipelines using a simple language-agnostic approach</article-title></title-group><author-notes hwp:id="author-notes-1"><corresp id="cor1" hwp:id="corresp-1" hwp:rev-id="xref-corresp-1-1 xref-corresp-1-2"><label>*</label>To whom correspondence should be addressed</corresp><fn id="n1" fn-type="equal" hwp:id="fn-1"><p hwp:id="p-1">E-mail: <email hwp:id="email-1">sseth@mdanderson.org</email>; <email hwp:id="email-2">jzhang22@mdanderson.org</email></p></fn></author-notes><contrib-group hwp:id="contrib-group-1"><contrib contrib-type="author" corresp="yes" hwp:id="contrib-1"><contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0003-4579-3959</contrib-id><name name-style="western" hwp:sortable="Seth Sahil"><surname>Seth</surname><given-names>Sahil</given-names></name><xref ref-type="corresp" rid="cor1" hwp:id="xref-corresp-1-1" hwp:rel-id="corresp-1">*</xref><xref ref-type="aff" rid="a1" hwp:id="xref-aff-1-1" hwp:rel-id="aff-1">†</xref><object-id pub-id-type="other" hwp:sub-type="orcid" xlink:href="http://orcid.org/0000-0003-4579-3959"/></contrib><contrib contrib-type="author" hwp:id="contrib-2"><contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0002-3207-9505</contrib-id><name name-style="western" hwp:sortable="Amin Samir"><surname>Amin</surname><given-names>Samir</given-names></name><xref ref-type="aff" rid="a2" hwp:id="xref-aff-2-1" hwp:rel-id="aff-2">‡</xref><object-id pub-id-type="other" hwp:sub-type="orcid" xlink:href="http://orcid.org/0000-0002-3207-9505"/></contrib><contrib contrib-type="author" hwp:id="contrib-3"><contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0002-3207-9505</contrib-id><name name-style="western" hwp:sortable="Song Xingzhi"><surname>Song</surname><given-names>Xingzhi</given-names></name><object-id pub-id-type="other" hwp:sub-type="orcid" xlink:href="http://orcid.org/0000-0002-3207-9505"/></contrib><contrib contrib-type="author" hwp:id="contrib-4"><contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0002-3207-9505</contrib-id><name name-style="western" hwp:sortable="Mao Xizeng"><surname>Mao</surname><given-names>Xizeng</given-names></name><object-id pub-id-type="other" hwp:sub-type="orcid" xlink:href="http://orcid.org/0000-0002-3207-9505"/></contrib><contrib contrib-type="author" hwp:id="contrib-5"><contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0002-3207-9505</contrib-id><name name-style="western" hwp:sortable="Sun Huandong"><surname>Sun</surname><given-names>Huandong</given-names></name><xref ref-type="aff" rid="a1" hwp:id="xref-aff-1-2" hwp:rel-id="aff-1">†</xref><object-id pub-id-type="other" hwp:sub-type="orcid" xlink:href="http://orcid.org/0000-0002-3207-9505"/></contrib><contrib contrib-type="author" hwp:id="contrib-6"><contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0002-3207-9505</contrib-id><name name-style="western" hwp:sortable="Futreal Andrew"><surname>Futreal</surname><given-names>Andrew</given-names></name><xref ref-type="aff" rid="a2" hwp:id="xref-aff-2-2" hwp:rel-id="aff-2">‡</xref><object-id pub-id-type="other" hwp:sub-type="orcid" xlink:href="http://orcid.org/0000-0002-3207-9505"/></contrib><contrib contrib-type="author" corresp="yes" hwp:id="contrib-7"><contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0002-3207-9505</contrib-id><name name-style="western" hwp:sortable="Zhang Jianhua"><surname>Zhang</surname><given-names>Jianhua</given-names></name><xref ref-type="corresp" rid="cor1" hwp:id="xref-corresp-1-2" hwp:rel-id="corresp-1">*</xref><xref ref-type="aff" rid="a1" hwp:id="xref-aff-1-3" hwp:rel-id="aff-1">†</xref><object-id pub-id-type="other" hwp:sub-type="orcid" xlink:href="http://orcid.org/0000-0002-3207-9505"/></contrib><aff id="a1" hwp:id="aff-1" hwp:rev-id="xref-aff-1-1 xref-aff-1-2 xref-aff-1-3"><label>†</label><institution hwp:id="institution-1">Institute of Applied Cancer Science, MD Anderson Cancer Center</institution></aff><aff id="a2" hwp:id="aff-2" hwp:rev-id="xref-aff-2-1 xref-aff-2-2"><label>‡</label><institution hwp:id="institution-2">Genomic Medicine, MD Anderson Cancer Center</institution></aff></contrib-group><pub-date pub-type="epub-original" hwp:start="2015"><year>2015</year></pub-date><pub-date pub-type="hwp-created" hwp:start="2015-10-22T16:03:14-07:00">
    <day>22</day><month>10</month><year>2015</year>
  </pub-date><pub-date pub-type="hwp-received" hwp:start="2015-10-22T16:03:14-07:00">
    <day>22</day><month>10</month><year>2015</year>
  </pub-date><pub-date pub-type="epub" hwp:start="2015-10-22T16:11:00-07:00">
    <day>22</day><month>10</month><year>2015</year>
  </pub-date><pub-date pub-type="epub-version" hwp:start="2015-10-22T16:11:00-07:00">
    <day>22</day><month>10</month><year>2015</year>
  </pub-date><elocation-id>029710</elocation-id><history hwp:id="history-1">
<date date-type="received" hwp:start="2015-10-22"><day>22</day><month>10</month><year>2015</year></date>
<date date-type="accepted" hwp:start="2015-10-22"><day>22</day><month>10</month><year>2015</year></date>
</history><permissions><copyright-statement hwp:id="copyright-statement-1">© 2015, Posted by Cold Spring Harbor Laboratory</copyright-statement><copyright-year>2015</copyright-year><license license-type="creative-commons" xlink:href="http://creativecommons.org/licenses/by-nc-nd/4.0/" hwp:id="license-1"><p hwp:id="p-2">This pre-print is available under a Creative Commons License (Attribution-NonCommercial-NoDerivs 4.0 International), CC BY-NC-ND 4.0, as described at <ext-link l:rel="related" l:ref-type="uri" l:ref="http://creativecommons.org/licenses/by-nc-nd/4.0/" ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by-nc-nd/4.0/" hwp:id="ext-link-1">http://creativecommons.org/licenses/by-nc-nd/4.0/</ext-link></p></license></permissions><self-uri xlink:href="029710.pdf" content-type="pdf" xlink:role="full-text"/><self-uri l:ref="forthcoming:yes" c:role="http://schema.highwire.org/variant/abstract" xlink:role="abstract" content-type="xhtml+xml" hwp:variant="yes"/><self-uri l:ref="forthcoming:yes" c:role="http://schema.highwire.org/variant/full-text" xlink:href="file:/content/biorxiv/vol0/issue2019/pdf/029710v1.pdf" hwp:variant="yes" content-type="pdf" xlink:role="full-text"/><self-uri l:ref="forthcoming:yes" c:role="http://schema.highwire.org/variant/full-text" xlink:role="full-text" content-type="xhtml+xml" hwp:variant="yes"/><self-uri l:ref="forthcoming:yes" c:role="http://schema.highwire.org/variant/source" xlink:role="source" content-type="xml" xlink:show="none" hwp:variant="yes"/><self-uri l:ref="forthcoming:yes" c:role="http://schema.highwire.org/variant/original" xlink:role="original" content-type="xml" xlink:show="none" hwp:variant="yes" xlink:href="029710.xml"/><self-uri content-type="abstract" xlink:href="file:/content/biorxiv/vol0/issue2019/abstracts/029710v1/029710v1.htslp"/><self-uri content-type="fulltext" xlink:href="file:/content/biorxiv/vol0/issue2019/fulltext/029710v1/029710v1.htslp"/><abstract hwp:id="abstract-1"><title hwp:id="title-1">Abstract</title><sec hwp:id="sec-1"><title hwp:id="title-2">Motivation</title><p hwp:id="p-3">Bioinformatics analyses have become increasingly intensive computing processes, with lowering costs and increasing numbers of samples. Each laboratory spends time creating and maintaining a set of pipelines, which may not be robust, scalable, or efficient. Further, the existence of different computing environments across institutions hinders both collabo-ration and the portability of analysis pipelines.</p></sec><sec hwp:id="sec-2"><title hwp:id="title-3">Results</title><p hwp:id="p-4">Flowr is a robust and scalable framework for designing and deploying computing pipelines in an easy-to-use fashion. It implements a scatter-gather approach using computing clusters, simplifying the concept to the use of five simple terms (in submission and dependency types). Most importantly, it is flexible, such that customizing existing pipelines is easy, and since it works across several computing environments (LSF, SGE, Torque, and SLURM), it is portable.</p></sec><sec hwp:id="sec-3"><title hwp:id="title-4">Availability</title><p hwp:id="p-5"><ext-link l:rel="related" l:ref-type="uri" l:ref="http://docs.flowr.space" ext-link-type="uri" xlink:href="http://docs.flowr.space" hwp:id="ext-link-2">http://docs.flowr.space</ext-link></p></sec></abstract><counts><page-count count="8"/></counts></article-meta></front><body><sec id="s1" hwp:id="sec-4"><title hwp:id="title-5">Introduction</title><p hwp:id="p-6">Massive advances in genomic and proteomic technologies are put-ting a high demand on bioinformatics applications for faster and more automated data processing. Since some of the steps are common and standard, there is value in creating pipelines that can be used under dif-ferent environments in various projects. In addition, several of these steps can be further broken down and parallelized to enable much faster analyses. In the past, significant efforts were made to develop tools such as Galaxy<sup><xref ref-type="bibr" rid="c1" hwp:id="xref-ref-1-1" hwp:rel-id="ref-1">1</xref></sup> and Bpipe,<sup><xref ref-type="bibr" rid="c2" hwp:id="xref-ref-2-1" hwp:rel-id="ref-2">2</xref></sup> ena-bling users to easily run modules and pipelines. Several other tools, such as COSMOS<sup><xref ref-type="bibr" rid="c3" hwp:id="xref-ref-3-1" hwp:rel-id="ref-3">3</xref></sup> and BigDataScript,<sup><xref ref-type="bibr" rid="c4" hwp:id="xref-ref-4-1" hwp:rel-id="ref-4">4</xref></sup> provide a comparatively easier syntax for building pipelines. However, all these tools require users to learn a new scripting language/syntax; thus, they present a steep learning curve. Further, such pipelines may not be portable across clusters or frameworks. Here, we present flowr, an open-source R package (<ext-link l:rel="related" l:ref-type="uri" l:ref="http://github.com/sahilseth/flowr" ext-link-type="uri" xlink:href="http://github.com/sahilseth/flowr" hwp:id="ext-link-3">http://github.com/sahilseth/flowr</ext-link>) that is language agnostic (in terms of inputs), robust, scalable, and portable.</p></sec><sec id="s2" hwp:id="sec-5"><title hwp:id="title-6">Features and Methods</title><p hwp:id="p-7">One of the major challenges in creating a workflow management framework is providing essential flexibility to users without compromis-ing robustness. Flowr is language agnostic in terms of its inputs, allow-ing users to build pipelines in any language of their choice. In essence, flowr requires users to specify a set of shell commands for each step (1B), along with a simple configuration file (1C) that defines how to stitch the steps into a pipeline. Flowr provides a set of R functions for creating, reading, and checking these two input files before processing, but any other language, such as JAVA, Python, or Perl, may be used to create these simple tab-delimited text files. In addition, the configuration file (or flow definition) enables complete flexibility in specifying the computing resources, such as CPU, RAM, walltime, and queue, used in each step of the pipeline. This isolates resource specification from the actual commands, thus making the pipeline very portable across computing clusters such as LSF, Torque, SGE, SLURM, and MOAB; this is a feature unique to flowr. Further, flowr implements a scatter-gather approach, allowing a many-to-one, one-to-many, or many-to-many relationship between steps (1A and 4). Several bioinformatics pipelines can be efficiently specified using such relationships; a typical case involves processing several fastq files into a final merged binary alignment map (BAM) file. For example, several pairs of fastq files, each aligned indi-vidually using BWA<sup><xref ref-type="bibr" rid="c5" hwp:id="xref-ref-5-1" hwp:rel-id="ref-5">5</xref></sup> (bwa aln), would be further processed as pairs using BWA (bwa sampe) to produce sam files (one for each pair). These would then be sorted, merged, and indexed using samtools.<sup><xref ref-type="bibr" rid="c6" hwp:id="xref-ref-6-1" hwp:rel-id="ref-6">6</xref></sup> Using flowr, each step in this workflow may have different CPU, memory, and walltime usage. This simple pipeline may take up to a day on a desktop or several hours on a multicore server. Flowr efficiently scatters the steps and submits them to the cluster, man-aging dependencies, in about half an hour. The framework is robust and scalable; it creates a web of jobs (using dependencies) for the entire pipeline, submits them to the cluster, and exits. The jobs automatically start in the correct order, according to the dependency map created by flowr (example, 1E). This enables the user to submit several flows at once, in a highly scalable fashion, that will be executed depending on the resources available. Further, splitting the flow into small independent jobs enables faster processing since they fit very well in a heavily used shared computing cluster, reserving and using minimal resources. We have extensively tested flowr on several computing platforms, such as Torque, MOAB, and LSF. Using a very transparent approach, each flow is submitted as an independent container, with all commands, outputs, and logs available in a clean and structured fashion. This enables reproducibility, with the final shell scripts having all the information required to re-create the analysis. In addition, flowr creates a graph (1E) for each submission, providing a quick overview of the pipeline without reading the code. An interactive website is available for designing a new pipeline.<sup><xref ref-type="bibr" rid="c7" hwp:id="xref-ref-7-1" hwp:rel-id="ref-7">7</xref></sup> Flowr also provides simple functions for monitoring the progress of a currently running flow, killing the whole flow, and in case of a failure, rerunning the flow from an intermediate step (2). Using a language-agnostic approach, flowr ingests the actual commands to be executed in the form of a tab-delimited file (a flowmat, 1B). Further, all the resource requirements and information regarding dependencies are isolated in a separate file (a flow definition [flowdef], 1C). The flowdef also contains information regarding the flow of steps (using the previous job column), type of submission (using the submission type column), and type of dependency on the previous jobs (using the dependency type column). Multiple commands in a module (A1-10) can be submitted in a scatter (/parallel) or serial (/sequential) fashion (1A). If a later step (B1-10) has multiple commands, such that the ith command of B depends on the ith command of A, we can describe this many-to-many relationship using a serial type dependency (1A). Further, in case of a merging step (say, C), all jobs B1-10 need to be completed, suggesting a many-to-one relationship using the dependency gather. Lastly, many steps may be initiated when this merging completes, creating a one-to-many relationship using a burst dependency (1A).</p></sec><sec id="s3" hwp:id="sec-6"><title hwp:id="title-7">Discussion</title><p hwp:id="p-8">To our knowledge, flowr, which is explicitly based on the scatter-gather concept of data analysis pipelines, is the first open-source pipeline framework that makes use of the dependency feature of computing clusters. This feature enables flowr to intelligently submit a web of inter-dependent jobs to the computing cluster and exit, in contrast to having a daemon-type process continuously running (as in other frameworks). This minimizes overhead on the login nodes, is robust to interruptions due to accidental killing of the process, and is scalable, allowing users to submit analyses of multiple samples. Flowr follows the design once principle, enabling the user to develop robust, portable pipelines that can be run on a host of computing platforms. Further, the same pipeline can be run on a local machine, computing cluster, or cloud-based environment. With automatic logging of each step and the preservation of the exact commands run to produce the output, the system allows users to generate an easy-to-use, efficient, and reproducible analysis pipeline.</p><fig id="fig1" position="float" orientation="portrait" fig-type="figure" hwp:id="F1" hwp:rev-id="xref-fig-1-1"><object-id pub-id-type="other" hwp:sub-type="pisa">biorxiv;029710v1/FIG1</object-id><object-id pub-id-type="other" hwp:sub-type="slug">F1</object-id><object-id pub-id-type="publisher-id">fig1</object-id><label>Figure 1:</label><caption hwp:id="caption-1"><p hwp:id="p-9">A: Among submission types, scatter submission executes jobs in parallel, while serial executes them sequentially. Gather refers to the idea that a subsequent job needs to wait for all (n) sub-processes of a previous step to complete, and serially dependent means that the ith sub-process of the current step needs to wait for the ith sub-process of a previous step. Further, burst suggests that several steps begin after a specific single step completes. We can define several complex relationships (Suppl. Table 1) using submission and dependency types. B: Flowr takes a language-agnostic approach to developing pipelines. A flow matrix (f mat) is used to describe the precise commands to run. C: A flow definition (f def) table provides an easy-to-use interface to describe various details regarding a flow, including the relationships between steps and resource requirements. Each row of the table describes one step and its relationship to previous steps, if any. Note how initial steps have none in the previous jobs and dependency type columns. D: Using a flow definition (f def) and a flow matrix (f mat), we can deploy a flow to a high-performance computing cluster. In addition, flowr provides several functions to plot the flow, monitor it, or kill and re-run it in case of issues (Suppl. 1). E: A flowchart describing procegsing the NGS workflow from fastq files to an aligned BAM file. F: Flowr supports several computing platforms out of the box, and adding support for others is quite straightforward (<ext-link l:rel="related" l:ref-type="uri" l:ref="http://docs.flowr.space/install.html" ext-link-type="uri" xlink:href="http://docs.flowr.space/install.html" hwp:id="ext-link-4">http://docs.flowr.space/install.html</ext-link>).</p></caption><graphic xlink:href="029710_fig1" position="float" orientation="portrait" hwp:id="graphic-1"/></fig><fig id="fig2" position="float" orientation="portrait" fig-type="figure" hwp:id="F2"><object-id pub-id-type="other" hwp:sub-type="pisa">biorxiv;029710v1/FIG2</object-id><object-id pub-id-type="other" hwp:sub-type="slug">F2</object-id><object-id pub-id-type="publisher-id">fig2</object-id><label>Figure 2:</label><caption hwp:id="caption-2"><p hwp:id="p-10">A cheat sheet describing various functions in flowr package</p></caption><graphic xlink:href="029710_fig2" position="float" orientation="portrait" hwp:id="graphic-2"/></fig><fig id="fig3" position="float" orientation="portrait" fig-type="figure" hwp:id="F3"><object-id pub-id-type="other" hwp:sub-type="pisa">biorxiv;029710v1/FIG3</object-id><object-id pub-id-type="other" hwp:sub-type="slug">F3</object-id><object-id pub-id-type="publisher-id">fig3</object-id><label>Figure 3:</label><caption hwp:id="caption-3"><p hwp:id="p-11">Briefly, there are several advantages of using flowr, comparing with existing workflow frameworks. Several of these stem from flowrs ability to use computing platforms dependency option.</p></caption><graphic xlink:href="029710_fig3" position="float" orientation="portrait" hwp:id="graphic-3"/></fig><fig id="fig4" position="float" orientation="portrait" fig-type="figure" hwp:id="F4"><object-id pub-id-type="other" hwp:sub-type="pisa">biorxiv;029710v1/FIG4</object-id><object-id pub-id-type="other" hwp:sub-type="slug">F4</object-id><object-id pub-id-type="publisher-id">fig4</object-id><label>Figure 4:</label><caption hwp:id="caption-4"><p hwp:id="p-12">Flowr supports a functional scatter-gather approach for defining pipelines, supporting various (job) submission approaches. If a step has multiple sub-processes, a scatter approach would execute them in parallel, while serial would execute them sequentially (<xref ref-type="fig" rid="fig1" hwp:id="xref-fig-1-1" hwp:rel-id="F1">Figure 1B</xref>). Additionally we can define complex relationships using submission and dependency types. For example gather refers to the idea that a subsequent job needs to wait for all (n) sub-processes of a previous step to complete. Several relationships can be defined between previous (A) and subsequent jobs (B), mapping dependencies at the sub-process level. For example in many-to-many but steps (A B) have multiple sub-processing running independently in scatter mode and subprocesses in B are serially dependent means that ith subprocess of the B needs wait for the ith sub-process of a A to start.</p></caption><graphic xlink:href="029710_fig4" position="float" orientation="portrait" hwp:id="graphic-4"/></fig></sec></body><back><ack hwp:id="ack-1"><title hwp:id="title-8">Acknowledgement</title><p hwp:id="p-13">We thank Tapsi Seth, and members of the Verhaak, Futreal and Draetta laborato-ries for their valuable inputs We are grateful to members of the MD Anderson Research Computing team (Roger Moye, Sally Boyd, and Daniel Jackson) for their continued support. In addition, we thank Ann Sutton of the MD Anderson editorial staff, for help in editing this document.</p></ack><ref-list hwp:id="ref-list-1"><title hwp:id="title-9">References</title><ref id="c1" hwp:id="ref-1" hwp:rev-id="xref-ref-1-1"><label>(1)</label><citation publication-type="journal" citation-type="journal" ref:id="029710v1.1" ref:linkable="yes" ref:use-reference-as-is="yes" hwp:id="citation-1"><string-name name-style="western" hwp:sortable="Goecks J."><surname>Goecks</surname>, <given-names>J.</given-names></string-name>; <string-name name-style="western" hwp:sortable="Nekrutenko A."><surname>Nekrutenko</surname>, <given-names>A.</given-names></string-name>; <string-name name-style="western" hwp:sortable="Taylor J."><surname>Taylor</surname>, <given-names>J.</given-names></string-name>; <article-title hwp:id="article-title-2">$author.lastName, a. f</article-title>. <source hwp:id="source-1">Genome Biology</source> <year>2010</year>, <volume>11</volume>, <fpage>R86</fpage>.</citation></ref><ref id="c2" hwp:id="ref-2" hwp:rev-id="xref-ref-2-1"><label>(2)</label><citation publication-type="journal" citation-type="journal" ref:id="029710v1.2" ref:linkable="yes" ref:use-reference-as-is="yes" hwp:id="citation-2"><string-name name-style="western" hwp:sortable="Sadedin S. P."><surname>Sadedin</surname>, <given-names>S. P.</given-names></string-name>; <string-name name-style="western" hwp:sortable="Pope B."><surname>Pope</surname>, <given-names>B.</given-names></string-name>; <string-name name-style="western" hwp:sortable="Oshlack A."><surname>Oshlack</surname>, <given-names>A.</given-names></string-name> <source hwp:id="source-2">Bioinformatics</source> <year>2012</year>, <volume>28</volume>, <fpage>1525</fpage>–<lpage>1526</lpage>.</citation></ref><ref id="c3" hwp:id="ref-3" hwp:rev-id="xref-ref-3-1"><label>(3)</label><citation publication-type="other" citation-type="journal" ref:id="029710v1.3" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-3"><string-name name-style="western" hwp:sortable="Gafni E."><surname>Gafni</surname>, <given-names>E.</given-names></string-name>; <string-name name-style="western" hwp:sortable="Luquette L. J."><surname>Luquette</surname>, <given-names>L. J.</given-names></string-name>; <string-name name-style="western" hwp:sortable="Lancaster A. K."><surname>Lancaster</surname>, <given-names>A. K.</given-names></string-name>; <string-name name-style="western" hwp:sortable="Hawkins J. B."><surname>Hawkins</surname>, <given-names>J. B.</given-names></string-name>; <string-name name-style="western" hwp:sortable="Jung J.-Y."><surname>Jung</surname>, <given-names>J.-Y.</given-names></string-name>; <string-name name-style="western" hwp:sortable="Souilmi Y."><surname>Souilmi</surname>, <given-names>Y.</given-names></string-name>; <string-name name-style="western" hwp:sortable="Wall D. P."><surname>Wall</surname>, <given-names>D. P.</given-names></string-name>; <string-name name-style="western" hwp:sortable="Tonellato P. J."><surname>Tonellato</surname>, <given-names>P. J.</given-names></string-name> <source hwp:id="source-3">Bioinformatics</source> <year>2014</year>, <fpage>btu385</fpage>.</citation></ref><ref id="c4" hwp:id="ref-4" hwp:rev-id="xref-ref-4-1"><label>(4)</label><citation publication-type="other" citation-type="journal" ref:id="029710v1.4" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-4"><string-name name-style="western" hwp:sortable="Cingolani P."><surname>Cingolani</surname>, <given-names>P.</given-names></string-name>; <string-name name-style="western" hwp:sortable="Sladek R."><surname>Sladek</surname>, <given-names>R.</given-names></string-name>; <string-name name-style="western" hwp:sortable="Blanchette M."><surname>Blanchette</surname>, <given-names>M.</given-names></string-name> <source hwp:id="source-4">Bioinformatics</source> <year>2014</year>, <fpage>btu595</fpage>.</citation></ref><ref id="c5" hwp:id="ref-5" hwp:rev-id="xref-ref-5-1"><label>(5)</label><citation publication-type="journal" citation-type="journal" ref:id="029710v1.5" ref:linkable="yes" ref:use-reference-as-is="yes" hwp:id="citation-5"><string-name name-style="western" hwp:sortable="Li H."><surname>Li</surname>, <given-names>H.</given-names></string-name>; <string-name name-style="western" hwp:sortable="Durbin R."><surname>Durbin</surname>, <given-names>R.</given-names></string-name> <source hwp:id="source-5">Bioinformatics</source> <year>2009</year>, <volume>25</volume>, <fpage>1754</fpage>–<lpage>1760</lpage>.</citation></ref><ref id="c6" hwp:id="ref-6" hwp:rev-id="xref-ref-6-1"><label>(6)</label><citation publication-type="journal" citation-type="journal" ref:id="029710v1.6" ref:linkable="yes" ref:use-reference-as-is="yes" hwp:id="citation-6"><string-name name-style="western" hwp:sortable="Li H."><surname>Li</surname>, <given-names>H.</given-names></string-name>; <string-name name-style="western" hwp:sortable="Handsaker B."><surname>Handsaker</surname>, <given-names>B.</given-names></string-name>; <string-name name-style="western" hwp:sortable="Wysoker A."><surname>Wysoker</surname>, <given-names>A.</given-names></string-name>; <string-name name-style="western" hwp:sortable="Fennell T."><surname>Fennell</surname>, <given-names>T.</given-names></string-name>; <string-name name-style="western" hwp:sortable="Ruan J."><surname>Ruan</surname>, <given-names>J.</given-names></string-name>; <string-name name-style="western" hwp:sortable="Homer N."><surname>Homer</surname>, <given-names>N.</given-names></string-name>; <string-name name-style="western" hwp:sortable="Marth G."><surname>Marth</surname>, <given-names>G.</given-names></string-name>; <string-name name-style="western" hwp:sortable="Abecasis G."><surname>Abecasis</surname>, <given-names>G.</given-names></string-name>; <string-name name-style="western" hwp:sortable="Durbin R."><surname>Durbin</surname>, <given-names>R.</given-names></string-name>; <string-name name-style="western" hwp:sortable="Subgroup G. P. D. P."><surname>Subgroup</surname>,. <given-names>G. P. D. P.</given-names></string-name> <source hwp:id="source-6">Bioinformatics</source> <year>2009</year>, <volume>25</volume>, <fpage>2078</fpage>–<lpage>2079</lpage>.</citation></ref><ref id="c7" hwp:id="ref-7" hwp:rev-id="xref-ref-7-1"><label>(7)</label><citation publication-type="other" citation-type="journal" ref:id="029710v1.7" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-7"><string-name name-style="western" hwp:sortable="Seth S."><surname>Seth</surname>, <given-names>S.</given-names></string-name> <article-title hwp:id="article-title-3">A shiny based application to aid in creation of flowr pipelines</article-title>. <ext-link l:rel="related" l:ref-type="uri" l:ref="http://sseth.shinyapps.io/flow_creator" ext-link-type="uri" xlink:href="http://sseth.shinyapps.io/flow_creator" hwp:id="ext-link-5">http://sseth.shinyapps.io/flow_creator</ext-link>.</citation></ref></ref-list></back></article>
