<article article-type="article" specific-use="production" xml:lang="en" xmlns:hw="org.highwire.hpp" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ali="http://www.niso.org/schemas/ali/1.0/" xmlns:ref="http://schema.highwire.org/Reference" xmlns:hwp="http://schema.highwire.org/Journal" xmlns:l="http://schema.highwire.org/Linking" xmlns:r="http://schema.highwire.org/Revision" xmlns:x="http://www.w3.org/1999/xhtml" xmlns:app="http://www.w3.org/2007/app" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:nlm="http://schema.highwire.org/NLM/Journal" xmlns:a="http://www.w3.org/2005/Atom" xmlns:c="http://schema.highwire.org/Compound" xmlns:hpp="http://schema.highwire.org/Publishing"><front><journal-meta><journal-id journal-id-type="hwp">biorxiv</journal-id><journal-id journal-id-type="publisher-id">BIORXIV</journal-id><journal-title>bioRxiv</journal-title><abbrev-journal-title abbrev-type="publisher">bioRxiv</abbrev-journal-title><publisher><publisher-name>Cold Spring Harbor Laboratory</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.1101/031021</article-id><article-id pub-id-type="other" hwp:sub-type="pisa">biorxiv;031021v3</article-id><article-id pub-id-type="other" hwp:sub-type="pisa-master">biorxiv;031021</article-id><article-id pub-id-type="other" hwp:sub-type="slug">031021</article-id><article-id pub-id-type="other" hwp:sub-type="tag">031021</article-id><article-version>1.3</article-version><article-categories><subj-group subj-group-type="author-type"><subject>Regular Article</subject></subj-group><subj-group subj-group-type="heading"><subject>Confirmatory Results</subject></subj-group><subj-group subj-group-type="hwp-journal-coll" hwp:journal-coll-id="Bioinformatics" hwp:journal="biorxiv"><subject>Bioinformatics</subject></subj-group></article-categories><title-group><article-title hwp:id="article-title-1">Validation of Illumina’s Isaac variant calling workflow</article-title></title-group><author-notes hwp:id="author-notes-1"><corresp id="cor1" hwp:id="corresp-1" hwp:rev-id="xref-corresp-1-1">
<label>*</label>corresponding author
</corresp></author-notes><contrib-group hwp:id="contrib-group-1"><contrib contrib-type="author" corresp="yes" hwp:id="contrib-1"><name name-style="western" hwp:sortable="Mainzer Liudmila S."><surname>Mainzer</surname><given-names>Liudmila S.</given-names></name><xref ref-type="corresp" rid="cor1" hwp:id="xref-corresp-1-1" hwp:rel-id="corresp-1">*</xref><xref ref-type="aff" rid="a1" hwp:id="xref-aff-1-1" hwp:rel-id="aff-1">1</xref></contrib><contrib contrib-type="author" hwp:id="contrib-2"><name name-style="western" hwp:sortable="Chapman Brad A."><surname>Chapman</surname><given-names>Brad A.</given-names></name><xref ref-type="aff" rid="a2" hwp:id="xref-aff-2-1" hwp:rel-id="aff-2">2</xref></contrib><contrib contrib-type="author" hwp:id="contrib-3"><name name-style="western" hwp:sortable="Hofmann Oliver"><surname>Hofmann</surname><given-names>Oliver</given-names></name><xref ref-type="aff" rid="a3" hwp:id="xref-aff-3-1" hwp:rel-id="aff-3">3</xref></contrib><contrib contrib-type="author" hwp:id="contrib-4"><name name-style="western" hwp:sortable="Rendon Gloria"><surname>Rendon</surname><given-names>Gloria</given-names></name><xref ref-type="aff" rid="a1" hwp:id="xref-aff-1-2" hwp:rel-id="aff-1">1</xref></contrib><contrib contrib-type="author" hwp:id="contrib-5"><name name-style="western" hwp:sortable="Stephens Zachary D."><surname>Stephens</surname><given-names>Zachary D.</given-names></name><xref ref-type="aff" rid="a4" hwp:id="xref-aff-4-1" hwp:rel-id="aff-4">4</xref></contrib><contrib contrib-type="author" hwp:id="contrib-6"><name name-style="western" hwp:sortable="Jongeneel C. Victor"><surname>Jongeneel</surname><given-names>C. Victor</given-names></name><xref ref-type="aff" rid="a1" hwp:id="xref-aff-1-3" hwp:rel-id="aff-1">1</xref><xref ref-type="aff" rid="a5" hwp:id="xref-aff-5-1" hwp:rel-id="aff-5">5</xref></contrib><aff id="a1" hwp:id="aff-1" hwp:rev-id="xref-aff-1-1 xref-aff-1-2 xref-aff-1-3">
<label>1</label><institution hwp:id="institution-1">High-Performance Biological Computing, Institute for Genomic Biology and National Center for Supercomputing Applications, University of Illinois at Urbana-Champaign</institution></aff><aff id="a2" hwp:id="aff-2" hwp:rev-id="xref-aff-2-1">
<label>2</label><institution hwp:id="institution-2">Department of Biostatistics, Harvard School of Public Health</institution></aff><aff id="a3" hwp:id="aff-3" hwp:rev-id="xref-aff-3-1">
<label>3</label><institution hwp:id="institution-3">Wolfson Wohl Center for Cancer Research, University of Glasgow</institution></aff><aff id="a4" hwp:id="aff-4" hwp:rev-id="xref-aff-4-1">
<label>4</label><institution hwp:id="institution-4">Department of Electrical and Computer Engineering, University of Illinois at Urbana-Champaign</institution></aff><aff id="a5" hwp:id="aff-5" hwp:rev-id="xref-aff-5-1">
<label>5</label><institution hwp:id="institution-5">Department of Bioengineering, University of Illinois at Urbana-Champaign</institution>
</aff></contrib-group><pub-date pub-type="epub-original" hwp:start="2015"><year>2015</year></pub-date><pub-date pub-type="hwp-created" hwp:start="2015-11-11T11:48:13-08:00">
    <day>11</day><month>11</month><year>2015</year>
  </pub-date><pub-date pub-type="hwp-received" hwp:start="2015-11-26T03:51:18-08:00">
    <day>26</day><month>11</month><year>2015</year>
  </pub-date><pub-date pub-type="epub" hwp:start="2015-11-11T12:31:11-08:00">
    <day>11</day><month>11</month><year>2015</year>
  </pub-date><pub-date pub-type="epub-version" hwp:start="2015-11-26T04:40:29-08:00">
    <day>26</day><month>11</month><year>2015</year>
  </pub-date><elocation-id>031021</elocation-id><history hwp:id="history-1">
<date date-type="received" hwp:start="2015-11-10"><day>10</day><month>11</month><year>2015</year></date>
<date date-type="accepted" hwp:start="2015-11-26"><day>26</day><month>11</month><year>2015</year></date>
</history><permissions><copyright-statement hwp:id="copyright-statement-1">© 2015, Posted by Cold Spring Harbor Laboratory</copyright-statement><copyright-year>2015</copyright-year><license license-type="creative-commons" xlink:href="http://creativecommons.org/licenses/by-nc-nd/4.0/" hwp:id="license-1"><p hwp:id="p-1">This pre-print is available under a Creative Commons License (Attribution-NonCommercial-NoDerivs 4.0 International), CC BY-NC-ND 4.0, as described at <ext-link l:rel="related" l:ref-type="uri" l:ref="http://creativecommons.org/licenses/by-nc-nd/4.0/" ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by-nc-nd/4.0/" hwp:id="ext-link-1">http://creativecommons.org/licenses/by-nc-nd/4.0/</ext-link></p></license></permissions><self-uri xlink:href="031021.pdf" content-type="pdf" xlink:role="full-text"/><self-uri l:ref="forthcoming:yes" c:role="http://schema.highwire.org/variant/abstract" xlink:role="abstract" content-type="xhtml+xml" hwp:variant="yes"/><self-uri l:ref="forthcoming:yes" c:role="http://schema.highwire.org/variant/full-text" xlink:href="file:/content/biorxiv/vol0/issue2019/pdf/031021v3.pdf" hwp:variant="yes" content-type="pdf" xlink:role="full-text"/><self-uri l:ref="forthcoming:yes" c:role="http://schema.highwire.org/variant/full-text" xlink:role="full-text" content-type="xhtml+xml" hwp:variant="yes"/><self-uri l:ref="forthcoming:yes" c:role="http://schema.highwire.org/variant/source" xlink:role="source" content-type="xml" xlink:show="none" hwp:variant="yes"/><self-uri l:ref="forthcoming:yes" c:role="http://schema.highwire.org/variant/original" xlink:role="original" content-type="xml" xlink:show="none" hwp:variant="yes" xlink:href="031021.xml"/><self-uri content-type="abstract" xlink:href="file:/content/biorxiv/vol0/issue2019/abstracts/031021v3/031021v3.htslp"/><self-uri content-type="fulltext" xlink:href="file:/content/biorxiv/vol0/issue2019/fulltext/031021v3/031021v3.htslp"/><abstract hwp:id="abstract-1"><title hwp:id="title-1">Abstract</title><p hwp:id="p-2">As the pace of implementing personalized medicine concepts increases, high-throughput variant calling on hundreds of individual genomes per day is a reality that will likely be faced by sequencing facilities across the country in the near future. While the scientific best practices for human variant calling workflows have been well defined, they also pose serious computational challenges at this high scale. Therefore, efforts in both academia and the private sector have focused on developing alternative workflows that may substantially reduce the computational cost per individual genome. Isaac is an “ultra-fast” variant calling workflow, designed by Illumina, Inc, and is claimed to be six times faster than BWA-GATK, with comparable sensitivity and specificity. This report is an independent review of Isaac, mainly focused on the accuracy of variant calls. We note that Isaac is indeed quite fast, and provide some benchmarks on a few hardware architectures. The overall conclusion from our analysis is that the Isaac workflow has undergone substantial improvement from version 01.14.11.27 to Isaac_2.0. The call accuracy is especially high on NA12878, however exomes tend to have a high fraction of false positive calls. We did not manage to reproduce the 99% sensitivity and specificity reported in the Illumina whitepaper, however that might be improved with further tweaking of the options. This report includes the information about some of the command-line parameters and documentation.</p></abstract><counts><page-count count="23"/></counts><custom-meta-wrap>
    <custom-meta hwp:id="custom-meta-1">
      <meta-name>has-earlier-version</meta-name>
      <meta-value>yes</meta-value>
    </custom-meta>
  </custom-meta-wrap></article-meta></front><body><sec id="s1" hwp:id="sec-1"><title hwp:id="title-2">Introduction</title><p hwp:id="p-3">Genomic variant calling from raw high-throughput sequence data is a widely used procedure in both research and clinical settings. The current community standard (“BWA-GATK”) is a complex workflow that involves multiple steps, each requiring its own software tools and specific parameters. It can use a large amount of disk space for temporary files, and take a long time to compute. Therefore, there have been several efforts to develop better-performing sets of tools for variant calling, in terms of speed, accuracy, and ease of use. Isaac is an “ultra-fast” variant calling workflow, designed by Illumina, Inc. It is claimed to be six times faster than BWA-GATK, with comparable sensitivity and specificity (<xref ref-type="bibr" rid="c4" hwp:id="xref-ref-4-1" hwp:rel-id="ref-4">Isaac whitepaper, 2015</xref>). This report is an independent review of Isaac. Our main focus in this review is the accuracy of variant calls, which is the most important feature of any variant calling workflow. We note that Isaac is indeed quite fast, and provide some benchmarks on a few hardware architectures. However, measuring wall-time performance was not our priority, and we do not report any rigorous comparative analysis here.</p><p hwp:id="p-4">Several groups have attempted to measure the discordance in variant calls among the many variant calling tools available to-date (<xref ref-type="bibr" rid="c11" hwp:id="xref-ref-11-1" hwp:rel-id="ref-11">Yi et al. 2014</xref>, <xref ref-type="bibr" rid="c10" hwp:id="xref-ref-10-1" hwp:rel-id="ref-10">Pabinger et al. 2014</xref>, <xref ref-type="bibr" rid="c12" hwp:id="xref-ref-12-1" hwp:rel-id="ref-12">Yu and Sun 2013</xref>, <xref ref-type="bibr" rid="c9" hwp:id="xref-ref-9-1" hwp:rel-id="ref-9">O’Rawe et al. 2013</xref>, <xref ref-type="bibr" rid="c1" hwp:id="xref-ref-1-1" hwp:rel-id="ref-1">Cornish and Guda 2014</xref>). Our focus here is not to provide a comparison between Isaac and other software packages. Instead, we focused on testing the accuracy of Isaac with datasets for which the “ground truth” for variant call is known, or at least agreed upon. These include synthetic data, data from the Genome in a Bottle (GIAB) consortium, and Illumina Platinum Genomes.</p><p hwp:id="p-5">Illumina released several versions of Isaac in quick succession through 2015. Here we report our results, using the same data to test several different versions of the workflow.</p><p hwp:id="p-6">The overall conclusion from our analysis is that the Isaac workflow has undergone substantial improvement from version 01.14.11.27 to Isaac_2.0. The call accuracy is especially high on NA12878, however exomes tend to have a high fraction of false positive calls. We did not manage to reproduce the 99% sensitivity and specificity reported in the Illumina whitepaper. That might be improved with further tweaking of the options. This report includes the information about some of the command-line parameters, and links to documentation.</p></sec><sec id="s2" hwp:id="sec-2"><title hwp:id="title-3">Caveats in the software design that affected our assessment</title><p hwp:id="p-7">Isaac has several design caveats that impact the ability to evaluate and use it. We describe them briefly in the paragraphs below.</p><sec id="s2a" hwp:id="sec-3"><title hwp:id="title-4">Versions we evaluated</title><p hwp:id="p-8">Isaac comes in two forms: (1) as commercially supported software that works directly off the output from an Illumina machine, and (2) a “developer” version. The former requires, apart from the usual FASTQ, the various Illumina files produced by the machine, and cannot be evaluated without them. Since our group does not have access to those, we focused on evaluating the “developer” version of Isaac. The latter is a two-step workflow that first performs alignment (versions 01.14.11.27, 01.15.04.01, Isaac_v2), followed by the variant calling step (version 1.0.7). <xref ref-type="table" rid="tbl1" hwp:id="xref-table-wrap-1-1" hwp:rel-id="T1">Table 1</xref> summarizes all experiments we have run. The software can be found in the following locations, as of November 25, 2015:</p><p hwp:id="p-9"><list list-type="order" hwp:id="list-1"><list-item hwp:id="list-item-1"><p hwp:id="p-10">Isaac aligner 01.14.11.27 <ext-link l:rel="related" l:ref-type="uri" l:ref="https://github.com/sequencing/isaac_aligner/tree/6b41f6d4985d069566a5c38d3d80c0d6ebb5841c" ext-link-type="uri" xlink:href="https://github.com/sequencing/isaac_aligner/tree/6b41f6d4985d069566a5c38d3d80c0d6ebb5841c" hwp:id="ext-link-2">https://github.com/sequencing/isaac_aligner/tree/6b41f6d4985d069566a5c38d3d80c0d6ebb5841c</ext-link></p></list-item><list-item hwp:id="list-item-2"><p hwp:id="p-11">Isaac aligner 01.15.04.01 <ext-link l:rel="related" l:ref-type="uri" l:ref="https://github.com/sequencing/isaac_aligner/commit/fd092ec20d82548a90c53eafdaed7d617328a6a4" ext-link-type="uri" xlink:href="https://github.com/sequencing/isaac_aligner/commit/fd092ec20d82548a90c53eafdaed7d617328a6a4" hwp:id="ext-link-3">https://github.com/sequencing/isaac_aligner/commit/fd092ec20d82548a90c53eafdaed7d617328a6a4</ext-link></p></list-item><list-item hwp:id="list-item-3"><p hwp:id="p-12">Isaac_v2 <ext-link l:rel="related" l:ref-type="uri" l:ref="https://github.com/Illumina/isaac2/" ext-link-type="uri" xlink:href="https://github.com/Illumina/isaac2/" hwp:id="ext-link-4">https://github.com/Illumina/isaac2/</ext-link></p></list-item><list-item hwp:id="list-item-4"><p hwp:id="p-13">Isaac v2 workflow in Basespace: we used the app called "Isaac Whole Genome Sequencing v2 v2.0.0”</p></list-item><list-item hwp:id="list-item-5"><p hwp:id="p-14">Variant caller <ext-link l:rel="related" l:ref-type="uri" l:ref="https://github.com/sequencing/isaac_variant_caller" ext-link-type="uri" xlink:href="https://github.com/sequencing/isaac_variant_caller" hwp:id="ext-link-5">https://github.com/sequencing/isaac_variant_caller</ext-link></p></list-item></list></p><table-wrap id="tbl1" orientation="portrait" position="float" hwp:id="T1" hwp:rev-id="xref-table-wrap-1-1"><object-id pub-id-type="other" hwp:sub-type="pisa">biorxiv;031021v3/TBL1</object-id><object-id pub-id-type="other" hwp:sub-type="slug">T1</object-id><object-id pub-id-type="publisher-id">tbl1</object-id><label>Table 1.</label><caption hwp:id="caption-1"><p hwp:id="p-15">Summary of all experiments discussed in this report</p></caption><graphic xlink:href="031021_tbl1" position="float" orientation="portrait" hwp:id="graphic-1"/></table-wrap></sec><sec id="s2b" hwp:id="sec-4"><title hwp:id="title-5">Input FASTQ names</title><p hwp:id="p-16">Isaac expects the input FASTQ names to be in a certain format: <monospace>lane?_read?. fastq.</monospace> This probably allows it to grab the lane and read information directly from the name, for whatever purpose during the analysis. This could be accomplished by providing some user-set options on command line, but instead this requirement is hard-coded, and the tool simply will not run on FASTQ with any different kind of name. As a result, it cannot be used to perform high-throughput analysis on legacy data directly. An investigator must rename all files and perform his own book-keeping to keep track of which file was where.</p></sec><sec id="s2c" hwp:id="sec-5"><title hwp:id="title-6">Input dbSNP</title><p hwp:id="p-17">Isaac does not make use of a dbSNP, and there is no user option to specify one on command line.</p></sec><sec id="s2d" hwp:id="sec-6"><title hwp:id="title-7">Read names</title><p hwp:id="p-18">Isaac renames input reads; this is described in a manual on Github: <ext-link l:rel="related" l:ref-type="uri" l:ref="https://github.com/sequencing/test/blob/master/markdown/manual.md" ext-link-type="uri" xlink:href="https://github.com/sequencing/test/blob/master/markdown/manual.md" hwp:id="ext-link-6">https://github.com/sequencing/test/blob/master/markdown/manual.md</ext-link>. This means, a user cannot verify the Isaac alignment against a different tool, such as Novoalign (<ext-link l:rel="related" l:ref-type="uri" l:ref="http://www.novocraft.com" ext-link-type="uri" xlink:href="http://www.novocraft.com" hwp:id="ext-link-7">www.novocraft.com</ext-link>) or BWA (<xref ref-type="bibr" rid="c6" hwp:id="xref-ref-6-1" hwp:rel-id="ref-6">Li and Durbin 2009</xref>). Presumably, the reads are renamed with a sequential counter appended at the end of the new name. Thus, if a user resorts the output BAM by name, the reads should be in the same order as the original FASTQ, and correspondence can be established. However, if some reads were filtered out or collapsed as duplicates during an alignment, then the order is forever lost, and the original cannot be restored. One possible workaround could be to use Isaac output BAM files as input to BWA, and compare alignments that way. We did not perform that kind of analysis.</p></sec><sec id="s2e" hwp:id="sec-7"><title hwp:id="title-8">Output folders</title><p hwp:id="p-19">Isaac uses hardcoded folder structure. It will always create <monospace>Aligned/</monospace> and <monospace>Temp/</monospace> in the local folder wherefrom it was invoked, and will put all output into those two folders. In this situation, the user must either rename those folders by hand after the run, or <monospace>cd</monospace> into a pre-created output folder to invoke Isaac from there. Not a huge chore, but must be aware of it, as otherwise the output from different sequential runs will overwrite each other.</p><p hwp:id="p-20">The output contents will be quite large: up to ~1TB for WGS human data (depth of coverage 50X) in <monospace>Temp/.</monospace> Final output, such as the alignment BAM and the associated statistics, is placed into <monospace>Aligned/.</monospace> Temporary run-time data are saved, obviously, into <monospace>Temp/,</monospace> which is not deleted after the run, so the user has a chance to inspect it.</p><p hwp:id="p-21">The folder structure inside <monospace>Aligned/</monospace> seems to derive from some sequencing information (described in the GitHub manual): in our case the path to final BAMs was always <monospace>Projects/default/default.</monospace> Perhaps one can specify this information somehow as an input to Isaac, but that is not transparent.</p></sec><sec id="s2f" hwp:id="sec-8"><title hwp:id="title-9">Documentation</title><p hwp:id="p-22">There is no single comprehensive documentation for Isaac. Here are the sources we used.</p><p hwp:id="p-23"><list list-type="order" hwp:id="list-2"><list-item hwp:id="list-item-6"><p hwp:id="p-24">For explanation for output VCF format and the variant filters, see the Isaac Whole Genome Sequencing v2 User Guide: <ext-link l:rel="related" l:ref-type="uri" l:ref="http://support.illumina.com/content/dam/illumina-support/documents/documentation/software_documentation/basespace/Isaac-wgs-user-guide-15050954b.pdf" ext-link-type="uri" xlink:href="http://support.illumina.com/content/dam/illumina-support/documents/documentation/software_documentation/basespace/Isaac-wgs-user-guide-15050954b.pdf" hwp:id="ext-link-8">http://support.illumina.com/content/dam/illumina-support/documents/documentation/software_documentation/basespace/Isaac-wgs-user-guide-15050954b.pdf</ext-link></p></list-item><list-item hwp:id="list-item-7"><p hwp:id="p-25">For example commands, output folder structure, aligner command line parameters see the GitHub manual: <ext-link l:rel="related" l:ref-type="uri" l:ref="https://github.com/sequencing/test/blob/master/markdown/manual.md" ext-link-type="uri" xlink:href="https://github.com/sequencing/test/blob/master/markdown/manual.md" hwp:id="ext-link-9">https://github.com/sequencing/test/blob/master/markdown/manual.md</ext-link> Please note that some of the options are not accurately described. For example, the <monospace>--variable-read-length</monospace> parameter takes values o<monospace>n|off</monospace>, not <monospace>=1|0,</monospace> as is implied in the manual. Experimenting with parameters is required.</p></list-item><list-item hwp:id="list-item-8"><p hwp:id="p-26">For command line parameters in the variant caller, use the starling manual: invoke as<monospace>/Path/To/IsaacVariantCaller/libexec/starling2 -h</monospace> on command line. Please note that some options, such as <monospace>bsnp-ssd-no-mismatch, bsnp-ssd-one-mismatch</monospace> and <monospace>min-vexp</monospace> appear to be absent from starling command line documentation, as distributed by the Isaac variant caller package.</p></list-item><list-item hwp:id="list-item-9"><p hwp:id="p-27">Many option settings are not known until the software is run, but can be gleaned from the vcf header.</p></list-item><list-item hwp:id="list-item-10"><p hwp:id="p-28">Some options can be set in run.config.ini, but their names do not correspond exactly to those listed on GitHub manual or starling manual. Experimentation is required.</p></list-item><list-item hwp:id="list-item-11"><p hwp:id="p-29">Some information in the HiSeq software Manual and user Guide could be helpful when trying to understand the parameter settings: <ext-link l:rel="related" l:ref-type="uri" l:ref="https://support.illumina.com/content/dam/illumina-support/documents/documentation/software_documentation/has/hasuserguide/15041353b.pdf" ext-link-type="uri" xlink:href="https://support.illumina.com/content/dam/illumina-support/documents/documentation/software_documentation/has/hasuserguide/15041353b.pdf" hwp:id="ext-link-10">https://support.illumina.com/content/dam/illumina-support/documents/documentation/software_documentation/has/hasuserguide/15041353b.pdf</ext-link></p></list-item></list></p></sec></sec><sec id="s3" hwp:id="sec-9"><title hwp:id="title-10">Methods</title><sec id="s3a" hwp:id="sec-10"><title hwp:id="title-11">The questions we asked</title><p hwp:id="p-30"><list list-type="bullet" hwp:id="list-3"><list-item hwp:id="list-item-12"><p hwp:id="p-31">Does Isaac find any variants?</p></list-item><list-item hwp:id="list-item-13"><p hwp:id="p-32">Does it find variants that should be there? If not, what is the rate of false negatives?</p></list-item><list-item hwp:id="list-item-14"><p hwp:id="p-33">If it does not find variants, can that be fixed with some parameter tuning?</p></list-item><list-item hwp:id="list-item-15"><p hwp:id="p-34">Does it find variants that should not be there? If so, what is the rate of false positives?</p></list-item></list></p></sec><sec id="s3b" hwp:id="sec-11"><title hwp:id="title-12">Testbeds</title><p hwp:id="p-35">The bulk of the work presented in this report was performed on the high-memory node of the Innovative Systems Lab (ISL2.0) at NCSA <ext-link l:rel="related" l:ref-type="uri" l:ref="http://www.ncsa.illinois.edu/about/org/isl/" ext-link-type="uri" xlink:href="http://www.ncsa.illinois.edu/about/org/isl/" hwp:id="ext-link-11">http://www.ncsa.illinois.edu/about/org/isl/</ext-link> (<xref ref-type="table" rid="tbl2" hwp:id="xref-table-wrap-2-1" hwp:rel-id="T2">Table 2</xref>). We chose this highly advanced machine, because we were running into difficulties running Isaac on any other, more conventional system (see the performance section).</p><table-wrap id="tbl2" orientation="portrait" position="float" hwp:id="T2" hwp:rev-id="xref-table-wrap-2-1"><object-id pub-id-type="other" hwp:sub-type="pisa">biorxiv;031021v3/TBL2</object-id><object-id pub-id-type="other" hwp:sub-type="slug">T2</object-id><object-id pub-id-type="publisher-id">tbl2</object-id><label>Table 2.</label><caption hwp:id="caption-2"><title hwp:id="title-13">Computer systems we used to test Isaac for this report.</title><p hwp:id="p-36">Our tests were successful on the high memory machine administered by ISL2.0 at NCSA. However, tests resulted in errors and segmentation faults on two clusters: iForge (NCSA), and Biocluster (Institute for Genomic Biology <ext-link l:rel="related" l:ref-type="uri" l:ref="http://help.igb.illinois.edu/Biocluster" ext-link-type="uri" xlink:href="http://help.igb.illinois.edu/Biocluster" hwp:id="ext-link-12">http://help.igb.illinois.edu/Biocluster</ext-link>).</p></caption><graphic xlink:href="031021_tbl2" position="float" orientation="portrait" hwp:id="graphic-2"/></table-wrap><p hwp:id="p-37">We also made a run on one node in BaseSpace (<ext-link l:rel="related" l:ref-type="uri" l:ref="https://basespace.illumina.com/dashboard" ext-link-type="uri" xlink:href="https://basespace.illumina.com/dashboard" hwp:id="ext-link-13">https://basespace.illumina.com/dashboard</ext-link>), but the hardware specifications are unknown. The BWA-GATK workflows were run on Blue Waters supercomputer (bluewaters.ncsa.illinois.edu). We also used AWS (<ext-link l:rel="related" l:ref-type="uri" l:ref="https://bcbio-nextgen.readthedocs.org/en/latest/contents/cloud.html" ext-link-type="uri" xlink:href="https://bcbio-nextgen.readthedocs.org/en/latest/contents/cloud.html" hwp:id="ext-link-14">https://bcbio-nextgen.readthedocs.org/en/latest/contents/cloud.html</ext-link>) to run BWA-GATK and Isaac: a single Amazon EC2 r3.8xlarge instance with 32 cores and 244Gb of memory, using an EBS provisioned SSD volume with 3000 IOPS.</p></sec><sec id="s3c" hwp:id="sec-12"><title hwp:id="title-14">Runtime parameters and commands</title><p hwp:id="p-38">All alignments were done against hg19, which was indexed by Isaac with seed length 32. All parameters for the alignment were default except specifying seed depth of the reference index, and the maximum RAM to use, which was specified as 2.999 out of the available 3 TB. All parameters for variant calling were default unless specified otherwise. All the 96 threads available on the machine were used. The box below lists the commands used during a typical test run.</p><boxed-text position="float" orientation="portrait" hwp:id="boxed-text-1"><preformat preformat-type="dialog" position="float" orientation="portrait" xml:space="preserve" hwp:id="preformat-1">
<underline>Alignment</underline>
/PathTo_Isaac_install/bin/isaac-align
-r /Full/Path/sorted-reference.xml
-b /full/Path/FolderWithFASTQFiles
--base-calls-format fastq (or fastq-gz) -m 2999 --seed-length 32
-j 96
It was sometimes necessary to use:
-variable-read-length on
<underline>Variant Calling</underline>
mkdir VarCallFolder
cd VarCallFolder
cp /PathTo_Isaac_VariantCallerFolder/etc/ivc_config_default.ini ./config.ini
/PathTo_Isaac_VariantCallerFolder/bin/configureWorkflow.pl
--BAM=/PathToAlignedBAM/input.BAM --ref=/PathToReferenceFile/hg19.fa
--config=./config.ini --output-dir=./myAnalysis
cd ./myAnalysis
make -j 96</preformat></boxed-text><p hwp:id="p-39">When needed, we ran the GATK best-practices workflow using the following commands and parameters:</p><boxed-text position="float" orientation="portrait" hwp:id="boxed-text-2"><preformat preformat-type="dialog" position="float" orientation="portrait" xml:space="preserve" hwp:id="preformat-2">
<underline>Alignment</underline>:
bwa mem -k 32 -t 30 -I 300,30 -R ‘read-group-string’ /Path/To/Reference/Index /Path/To/leftreads /Path/rightreads | samblaster -o /Path/To/Output/SAM
or
Novoalign -g 40 -x 5 -I PE 175,50 -r Random -hdrhd off -v 120</preformat></boxed-text><boxed-text position="float" orientation="portrait" hwp:id="boxed-text-3"><preformat preformat-type="dialog" position="float" orientation="portrait" xml:space="preserve" hwp:id="preformat-3">
<underline>Convert to BAM:</underline>
samBAMba view -t 32 -f BAM -S /Path/To/Output/SAM -o /Path/To/Output/BAM
<underline>Sort BAM:</underline>
novosort --threads 32 --index /Path/To/Output/BAM -o /Path/To/Output/BAM.sorted
<underline>Gatk Create realignment targets</underline>
-T RealignerTargetCreator
-R genome.fa -known dbsnp_135.hg19.vcf.gz
-I BAM.sorted -o BAM.sorted.realign-list</preformat></boxed-text><boxed-text position="float" orientation="portrait" hwp:id="boxed-text-4"><preformat preformat-type="dialog" position="float" orientation="portrait" xml:space="preserve" hwp:id="preformat-4">
<underline>Realignment:</underline>
-T IndelRealigner
-R genome.fa -known dbsnp_135.hg19.vcf.gz
-targetIntervals BAM.sorted.realign-list
-I BAM.sorted -o BAM.sorted.realigned
<underline>Base score recalibration:</underline>
-T BaseRecalibrator
-R genome.fa --knownSites dbsnp_135.hg19.vcf.gz
-I BAM.sorted.realigned.BAM --out BAM.sorted.realigned.recal-report.grp
-nct 32
<underline>Print reads:</underline>
-T PrintReads
-R genome.fa
-BQSR BAM.sorted.realigned.recal-report.grp
-I BAM.sorted.realigned.BAM --out BAM.sorted.realigned.recalibrated
-nct 32
<underline>Variant calling:</underline>
-T UnifiedGenotyper
-R genome.fa
-I BAM.sorted.realigned.recalibrated -o raw.vcf
-glm BOTH
--output_mode EMIT_VARIANTS_ONLY
-A Coverage
-A AlleleBalance
-dcov 250
-rf BadCigar
-nt 8 -nct 4</preformat></boxed-text></sec></sec><sec id="s4" hwp:id="sec-13"><title hwp:id="title-15">Concordance measurement</title><p hwp:id="p-40">To measure the concordance of variant calls, we would have liked to perform comparisons of vcf files as well as the alignment BAMs, as the latter can sometimes help explain discordance. Since Isaac changes the read names, the BAM comparison is therefore impossible. Instead, we spot-checked the Isaac aligned BAMs in a genome browser.</p><p hwp:id="p-41">Additionally, Isaac outputs variants in a GVCF, which conforms to the VCF4.1 specifications but also includes non-variant sites. This can cause conventional VCF comparison tools to report incorrect results. Thus, we extracted the variants from the Isaac’s output gvcf. The Isaac documentation recommends using <monospace>extract_variants</monospace> from <monospace>gvcf-tools.</monospace> After using it, we found that it performs the same function as a linux <monospace>awk</monospace> command, but slower. Indeed, one has to use awk afterwards anyway to inspect the variants that did not pass the various filters. Thus, we used the following commands to go from Isaac’s GVCF to a VCF that can be used in comparison exercises:</p><boxed-text position="float" orientation="portrait" hwp:id="boxed-text-5"><preformat preformat-type="dialog" position="float" orientation="portrait" xml:space="preserve" hwp:id="preformat-5">
awk ‘$1!~/<sup>^</sup>#/ &amp;&amp; $5!~/\./ {print $0}’ sorted.genome.vcf &gt; sorted.genome.vcf.ALT
awk ‘$7~/PASS/ {print $0}’ sorted.genome.vcf.ALT &gt; sorted.genome.vcf.ALT.PASS</preformat></boxed-text><p hwp:id="p-42">The first command produces the list of all variants, whether or not they passed the filters (discussed in the Results section). The second command produces the list of only those variants that have passed the filters. Afterwards, we manually inspected the vcfs and used existing tools, such as <monospace>vcf-compare</monospace>, as well as our own <monospace>perl</monospace> and <monospace>python</monospace> scripts. The “confident regions” from the Illumina Platinum Genomes v8 were also used in the analysis. The minimum length of a targeted region (in WES) or a confident region (from the Platinum set) that was considered in the concordance analysis was 20 nt.</p></sec><sec id="s5" hwp:id="sec-14"><title hwp:id="title-16">Generating synthetic WGS with NEAT</title><p hwp:id="p-43">To test Isaac on synthetic whole human genome with known variants (WGS), we produced one synthetic dataset using NEAT (<ext-link l:rel="related" l:ref-type="uri" l:ref="https://github.com/zstephens/genReads1" ext-link-type="uri" xlink:href="https://github.com/zstephens/genReads1" hwp:id="ext-link-15">https://github.com/zstephens/genReads1</ext-link>) at 50X depth. The variants were inserted at random, at the average rate of 0.00034. The simulated fragment length was 300 nt, standard deviation of 30 nt, read length of 100 nt. The sequencing error rates were modeled after the data generated at the local sequencing facility (<ext-link l:rel="related" l:ref-type="uri" l:ref="http://www.biotech.uiuc.edu/htdna" ext-link-type="uri" xlink:href="http://www.biotech.uiuc.edu/htdna" hwp:id="ext-link-16">http://www.biotech.uiuc.edu/htdna</ext-link>), and were inserted at the rate of 0.1%. The software produces the synthetic reads, a “golden” vcf containing the variants synthetically inserted into the reference, and the “golden” sam containing the “true” read alignment based on the reference loci where the reads were generated from.</p></sec><sec id="s6" hwp:id="sec-15"><title hwp:id="title-17">Generating synthetic WES with Wessim</title><p hwp:id="p-44">To test Isaac on synthetic whole human exome with known variants (WES), we produced one synthetic dataset using Wessim (<xref ref-type="bibr" rid="c5" hwp:id="xref-ref-5-1" hwp:rel-id="ref-5">Kim et al. 2013</xref>):</p><p hwp:id="p-45"><list list-type="order" hwp:id="list-4"><list-item hwp:id="list-item-16"><p hwp:id="p-46">We ran a standard GATK workflow on ERR250949 human exome from the 1000 genomes project, detected variants and segregated out those belonging to chromosome 1.</p></list-item><list-item hwp:id="list-item-17"><p hwp:id="p-47">We generated some random variants as well, using Genome Smasher (10% insertions, 5% deletions and the rest are SNPs; regions with repetitive Ns were avoided).</p></list-item><list-item hwp:id="list-item-18"><p hwp:id="p-48">Then we combined those two sets of variants together and inserted them into hg19 reference using GATK FastaAlternateReferenceMaker. Only variants located within exonic regions identified according to hg19 annotation, were considered in concordance measurement.</p></list-item><list-item hwp:id="list-item-19"><p hwp:id="p-49">Finally, we used that mutated reference to simulate whole exome sequencing on chromosome 1 using Wessim, generating 100-nucleotide paired-ended reads at 50X depth.</p></list-item></list></p></sec><sec id="s7" hwp:id="sec-16"><title hwp:id="title-18">Results</title><sec id="s7a" hwp:id="sec-17"><title hwp:id="title-19">Synthetic WGS 50X, generated with NEAT</title><sec id="s7a1" hwp:id="sec-18"><title hwp:id="title-20">Isaac 01.14.11.27 detects no variants</title><p hwp:id="p-50">It was desirable to test Isaac’s variant detection against a known “ground truth”, in order to evaluate its accuracy unequivocally, and independently of the properties of other variant callers. Thus, we generated a synthetic WGS dataset based on hg19 at 50X using NEAT, and compared Isaac’s results to the list of variants that were inserted by the read simulator. Unfortunately, Isaac 01.14.11.27 did not detect any variants at all. The final GVCF contained no entries in the ALT column, only dots.</p><p hwp:id="p-51">We hypothesized that perhaps our variants were filtered out by the variant caller, so we relaxed the following filters that have to do with local read depth and read mapping quality (by the way, these parameters have different names in the starling manual and Isaac variant caller configuration file):</p><boxed-text position="float" orientation="portrait" hwp:id="boxed-text-6"><preformat preformat-type="dialog" position="float" orientation="portrait" xml:space="preserve" hwp:id="preformat-6">
isSkipDepthFilters=1
maxInputDepth=-1
depthFilterMultiple=1000
minMapq=0
minGQX=0</preformat></boxed-text><p hwp:id="p-52">This had no effect. Inspecting the BAM in genome browser indicates that some expected variants do in fact get detected in alignment – but are not reported by the variant caller. For example, this variant was inserted into the dataset when simulated reads were created, and is present in the “golden” vcf (line abbreviated):</p><boxed-text position="float" orientation="portrait" hwp:id="boxed-text-7"><preformat preformat-type="dialog" position="float" orientation="portrait" xml:space="preserve" hwp:id="preformat-7">
chr1        240578        .        G        A        .</preformat></boxed-text><p hwp:id="p-53">However, Isaac variant caller reports nothing for the respective region (lines abbreviated):</p><boxed-text position="float" orientation="portrait" hwp:id="boxed-text-8"><preformat preformat-type="dialog" position="float" orientation="portrait" xml:space="preserve" hwp:id="preformat-8">
#CHROM    POS    ID          REF     ALT      QUAL    FILTER
chr1             240547   .             T          .              .            HighDPFRatio
chr1             240549   .             A          .              .            HighDPFRatio
chr1             240553   .             G          .              .            HighDPFRatio
chr1             240583   .             A          .              .            HighDPFRatio
chr1             240596   .             C          .              .            HighDPFRatio</preformat></boxed-text><p hwp:id="p-54">Meanwhile, the same variant is clearly visible in Isaac’s alignment (<xref ref-type="fig" rid="fig1" hwp:id="xref-fig-1-1" hwp:rel-id="F1">Figure 1</xref>).</p><fig id="fig1" position="float" orientation="portrait" fig-type="figure" hwp:id="F1" hwp:rev-id="xref-fig-1-1"><object-id pub-id-type="other" hwp:sub-type="pisa">biorxiv;031021v3/FIG1</object-id><object-id pub-id-type="other" hwp:sub-type="slug">F1</object-id><object-id pub-id-type="publisher-id">fig1</object-id><label>Figure 1.</label><caption hwp:id="caption-3"><title hwp:id="title-21">Isaac’s alignment on NEAT synthetic data; snapshot from the genome browser IGV.</title><p hwp:id="p-55">The variant at Position chrl:240578 is highlighted in green.</p></caption><graphic xlink:href="031021_fig1" position="float" orientation="portrait" hwp:id="graphic-3"/></fig><p hwp:id="p-56">Both Novoalign-GATK, and BWA-GATK work fine on this kind of data and report excellent concordance of variants (<xref ref-type="fig" rid="fig2" hwp:id="xref-fig-2-1" hwp:rel-id="F2">Figure 2</xref>).</p><fig id="fig2" position="float" orientation="portrait" fig-type="figure" hwp:id="F2" hwp:rev-id="xref-fig-2-1"><object-id pub-id-type="other" hwp:sub-type="pisa">biorxiv;031021v3/FIG2</object-id><object-id pub-id-type="other" hwp:sub-type="slug">F2</object-id><object-id pub-id-type="publisher-id">fig2</object-id><label>Figure 2.</label><caption hwp:id="caption-4"><title hwp:id="title-22">Results of running the standard GATK workflows on the NEAT synthetic WGS, 50X.</title><p hwp:id="p-57">Reads were simulated with varying sequencing error rates (abscissa). Perfect matches denote the number of variants found by the GATK workflow that corresponded to the “golden” vcf. False positives (FP) denote the number of variants found by the GATK workflow, but which were not inserted into the data at the time of simulation.</p></caption><graphic xlink:href="031021_fig2" position="float" orientation="portrait" hwp:id="graphic-4"/></fig></sec><sec id="s7a2" hwp:id="sec-19"><title hwp:id="title-23">Isaac v2 provides concordance of up to 97% on NEAT data</title><p hwp:id="p-58">Release of Isaac v2 aligner resulted in significant improvement. While the earlier version detected no variants at all, v2 provides fairly high concordance (<xref ref-type="table" rid="tbl3" hwp:id="xref-table-wrap-3-1" hwp:rel-id="T3">Table 3</xref>).</p><table-wrap id="tbl3" orientation="portrait" position="float" hwp:id="T3" hwp:rev-id="xref-table-wrap-3-1"><object-id pub-id-type="other" hwp:sub-type="pisa">biorxiv;031021v3/TBL3</object-id><object-id pub-id-type="other" hwp:sub-type="slug">T3</object-id><object-id pub-id-type="publisher-id">tbl3</object-id><label>Table 3.</label><caption hwp:id="caption-5"><title hwp:id="title-24">Concordance between variants called using Isaac_v2 and the variants inserted into the synthetic reads by NEAT.</title><p hwp:id="p-59">Measurements were done both ways: on all reported variants, including those that are homozygous and failed filtration (+homs, +failed), and also on the subset excluding those two categories (-homs, -failed).</p></caption><graphic xlink:href="031021_tbl3" position="float" orientation="portrait" hwp:id="graphic-5"/></table-wrap></sec></sec><sec id="s7b" hwp:id="sec-20"><title hwp:id="title-25">Synthetic WGS 50X, generated with VarSim</title><p hwp:id="p-60">We tested Isaac_v2 on synthetic data generated with VarSim, as an alternative to our NEAT synthetic reads. The VarSim data were downloaded from the developer’s repository. The Isaac alignment aborted with the message:</p><boxed-text position="float" orientation="portrait" hwp:id="boxed-text-9"><preformat preformat-type="dialog" position="float" orientation="portrait" xml:space="preserve" hwp:id="preformat-9">
Opened gz fastq stream on lane1_read1.fastq.gz
Opened gz fastq stream on lane1_read2.fastq.gz
ERROR: Thread: 1 caught an exception first:Invalid
argument:Isaac_v2/isaac2/src/c++/include/io/fastqReader.hh(170): Throw in function
InsertIt isaac::io::fastqReader::extractBcl(const Isaac::flowcell::ReadMetadata&amp;,
InsertIt) const [with InsertIt =___gnu_cxx::___normal_iterator&lt;char*, std::vector&lt;char&gt;
&gt;]
Dynamic exception type:
boost::exception_detail::clone_impl&lt;isaac::io::FASTQFormatException&gt;
std::exception::what: Invalid oligo M found in lane1_read2.fastq.gz at offset
5966430356
:Invalid oligo M found in lane1_read2.fastq.gz at offset 5966430356</preformat></boxed-text><p hwp:id="p-61">Looking back at the synthetic sequences, they did indeed contain the “nucleotide” M:</p><boxed-text position="float" orientation="portrait" hwp:id="boxed-text-10"><preformat preformat-type="dialog" position="float" orientation="portrait" xml:space="preserve" hwp:id="preformat-10">
grep -n M VarSim/lane1_read2.fastq
94111002:
CAGCTTGCTCTTCATTAGCGCTACATAGCTGMCTTATTATTCGTGGTCCCGTATGACCCCCTGATCATTTTCCCTGAGGGTGCATA
TTTATTCACTAACT
103350290:
TGTTTTTCATTTTCTTGATTTATTTCTGAATTCAGCTTGCTCTTCATTAGCCCTACATAGCTGMCTTATTATTCGTGGTCCCCTAT
GACCCCCTGGTCAT
116458522:
CATTAGCGCTACATAGCTGMCTTATTATTCGTGGTCCCCTATGACCCCCTGATCATTTTCCCTGAGGGTGCATATTTATTCACTAA
CTATGTTACAATCA
123122630:
AATTCAGCTTGCTCTTCATTAGCGCTACATAGCTGMCTTATTATTCGTGGTCCCCTATGACCCCCTGATCATTTTCCCTGAGGGTG
CATATTTATTCACT
128669782:
CTTGATTTATTTCTGAATTCAGCTTGCTCTTCATTAGCGCTACATAGCTGMCTTATTATTCGTGGTCCCCTATGACCCCCTGATCA
TTTTCCCTGAGGGT</preformat></boxed-text></sec><sec id="s7c" hwp:id="sec-21"><title hwp:id="title-26">Wessim synthetic WES, 50X</title><sec id="s7c1" hwp:id="sec-22"><title hwp:id="title-27">Isaac 01.14.11.27 generates a high number of false positives</title><p hwp:id="p-62">We produced one synthetic dataset using Wessim (<xref ref-type="bibr" rid="c5" hwp:id="xref-ref-5-2" hwp:rel-id="ref-5">Kim et al. 2013</xref>), which is known to closely simulate the properties of Illumina exome sequencing data. The Isaac version 01.14.11.27 did report some variants on this dataset, but with a very high rate of false positives (at least 251%) and false negatives (at least 28%). Out of 7,314 artificially inserted variants (all within exonic regions, according to hg19 annotation; see salmon ellipse on <xref ref-type="fig" rid="fig3" hwp:id="xref-fig-3-1" hwp:rel-id="F3">Figure 3</xref>), 2,048 were undetected (false negatives). Out of 23,638 variants that Isaac claimed to be present in this dataset (cyan ellipse on <xref ref-type="fig" rid="fig3" hwp:id="xref-fig-3-2" hwp:rel-id="F3">Figure 3</xref>), 18,374 were not a part of the synthetic set (false positives).</p><fig id="fig3" position="float" orientation="portrait" fig-type="figure" hwp:id="F3" hwp:rev-id="xref-fig-3-1 xref-fig-3-2 xref-fig-3-3"><object-id pub-id-type="other" hwp:sub-type="pisa">biorxiv;031021v3/FIG3</object-id><object-id pub-id-type="other" hwp:sub-type="slug">F3</object-id><object-id pub-id-type="publisher-id">fig3</object-id><label>Figure 3.</label><caption hwp:id="caption-6"><title hwp:id="title-28">Concordance statistics on the synthetic WES chr1 data generated by Wessim.</title><p hwp:id="p-63">Out of 7,314 simulated variants, 5,266 were detected by Isaac, but only 281 of those actually passed the default filters. Salmon ellipse: synthetic variants. Cyan ellipse: variants detected by Isaac. Purple ellipse: variants that were detected by Isaac and passed the default filters.</p></caption><graphic xlink:href="031021_fig3" position="float" orientation="portrait" hwp:id="graphic-6"/></fig><p hwp:id="p-64">Looking at Isaac’s output vcf more closely, it appears that few of the claimed variants pass the default filters (purple ellipse on <xref ref-type="fig" rid="fig3" hwp:id="xref-fig-3-3" hwp:rel-id="F3">Figure 3</xref>). Those filters are listed in <xref ref-type="table" rid="tbl4" hwp:id="xref-table-wrap-4-1" hwp:rel-id="T4">Table 4</xref>, copy-pasted from Isaac’s vcf header.</p><table-wrap id="tbl4" orientation="portrait" position="float" hwp:id="T4" hwp:rev-id="xref-table-wrap-4-1 xref-table-wrap-4-2"><object-id pub-id-type="other" hwp:sub-type="pisa">biorxiv;031021v3/TBL4</object-id><object-id pub-id-type="other" hwp:sub-type="slug">T4</object-id><object-id pub-id-type="publisher-id">tbl4</object-id><label>Table 4.</label><caption hwp:id="caption-7"><title hwp:id="title-29">Default filters used by Isaac, copy-pasted from an output vcf.</title><p hwp:id="p-65">In the particular case of Wessim-generated reads, most of the inserted variants fail to pass the LowGQX or HighDepth filters (<xref ref-type="table" rid="tbl4" hwp:id="xref-table-wrap-4-2" hwp:rel-id="T4">Table 4</xref>). GQX has the meaning of genotype quality score, generalized to both variant and non-variant loci. An example of such filtered variants is displayed on <xref ref-type="fig" rid="fig4" hwp:id="xref-fig-4-1" hwp:rel-id="F4">Figure 4</xref>.</p></caption><graphic xlink:href="031021_tbl4" position="float" orientation="portrait" hwp:id="graphic-7"/></table-wrap><table-wrap id="tbl5" orientation="portrait" position="float" hwp:id="T5"><object-id pub-id-type="other" hwp:sub-type="pisa">biorxiv;031021v3/TBL5</object-id><object-id pub-id-type="other" hwp:sub-type="slug">T5</object-id><object-id pub-id-type="publisher-id">tbl5</object-id><label>Table 5.</label><caption hwp:id="caption-8"><p hwp:id="p-66">Synthetic variants that were found by Isaac but did not pass the default filters, broken down by the filter.</p></caption><graphic xlink:href="031021_tbl5" position="float" orientation="portrait" hwp:id="graphic-8"/></table-wrap><p hwp:id="p-67">Filtering variants based on the sequencing depth and quality score is, of course, normal, and expected. The problem lies not with the fact that variants get filtered out, but with the extremely small number of passed variants that we know have actually been inserted into the data during the process of read simulation.</p><p hwp:id="p-68">The cause of this is the way Wessim simulates exome sequencing: reads are grabbed from the reference, in and around target regions. There are usually reads present that do not strictly belong to exons, and they will usually have coverage issues. Once we focus only on the 3,792 synthetic variants that belong strictly to the targeted regions (defined by the Agilent SureSelect bed file, and only considering regions with length &gt; 100), actually Isaac detects 98.55% of them (3,737 variants), but only 15 of them pass the filters. Additionally, Isaac finds 2,781 extra variants that should not be there (73.34%, only 36 passed filters; false positives) within the targeted regions and does not find 55 (1.45%; false negatives) variants that should in fact be present within the dataset. In other words, Isaac does find strictly exonic variants within the targeted regions, but its filters are a bit stringent for this dataset, and need some tuning to work properly. This tuning is difficult: when the filters are relaxed, the true variants will pass filtration, but the false positive variants will pass it too.</p><p hwp:id="p-69">Finally, Isaac assigned 993 variants to chromosomes other than chr1 (all regions), even though the input reads were simulated for chr1 only. This is normal, due to some sequence similarities between chromosomes. None of these variants passed the default filters.</p><p hwp:id="p-70">Based on these data it appears that Isaac 01.14.11.27 can be quite sensitive to variants, but also has an incredibly high rate of false positives, which is only somewhat compensated by stringent variant filters.</p><fig id="fig4" position="float" orientation="portrait" fig-type="figure" hwp:id="F4" hwp:rev-id="xref-fig-4-1"><object-id pub-id-type="other" hwp:sub-type="pisa">biorxiv;031021v3/FIG4</object-id><object-id pub-id-type="other" hwp:sub-type="slug">F4</object-id><object-id pub-id-type="publisher-id">fig4</object-id><label>Figure 4.</label><caption hwp:id="caption-9"><title hwp:id="title-30">Example of two synthetic variants that were detected but did not pass the filters.</title><p hwp:id="p-71">This is a screenshot of IGV genome browser zoomed in on loci <monospace>chr1: 809, 792</monospace> and <monospace>chr1: 809, 956</monospace> within an output BAM from Isaac aligner. The first synthetic variant (G→C) is highlighted with blue in the figure, but is filtered out as HighDepth. The second variant (T<italic toggle="yes">→</italic>A) is on the tail edge of the simulated exon and is only covered by two reads, so it is barely visible, but is nonetheless present in Isaac vcf and marked as LowGQX.</p></caption><graphic xlink:href="031021_fig4" position="float" orientation="portrait" hwp:id="graphic-9"/></fig></sec><sec id="s7c2" hwp:id="sec-23"><title hwp:id="title-31">Isaac v2 does not eliminate false positives on Wessim data</title><p hwp:id="p-72">Since Isaac v2 aligner improved the results on synthetic NEAT data, we applied it to Wessim data as well. Unfortunately, the number of false positives was still extremely high (<xref ref-type="table" rid="tbl6" hwp:id="xref-table-wrap-6-1" hwp:rel-id="T6">Table 6</xref>).</p><table-wrap id="tbl6" orientation="portrait" position="float" hwp:id="T6" hwp:rev-id="xref-table-wrap-6-1"><object-id pub-id-type="other" hwp:sub-type="pisa">biorxiv;031021v3/TBL6</object-id><object-id pub-id-type="other" hwp:sub-type="slug">T6</object-id><object-id pub-id-type="publisher-id">tbl6</object-id><label>Table 6.</label><caption hwp:id="caption-10"><title hwp:id="title-32">Concordance between variants called using Isaac_v2 and the variants inserted into the synthetic reads by Wessim.</title><p hwp:id="p-73">Measurements were done both ways: on all reported variants, including those that are homozygous and failed filtration (+homs, +failed), and also on the subset excluding those two categories (-homs, - failed). Concordance within the Platinum Confidence regions of hg19 is even worse than within targeted regions (73.85% perfect matches, 26.15% false negative, 77.66% false positives on +homs, +failed).</p></caption><graphic xlink:href="031021_tbl6" position="float" orientation="portrait" hwp:id="graphic-10"/></table-wrap></sec></sec><sec id="s7d" hwp:id="sec-24"><title hwp:id="title-33">1000 human genomes, WES data</title><sec id="s7d1" hwp:id="sec-25"><title hwp:id="title-34">Isaac 01.14.11.27 generates high number of false positives</title><p hwp:id="p-74">To eliminate any uncertainty in our evaluation that may have resulted from incorrect read simulation by Wessim, we proceeded to test Isaac on real datasets. We used whole exome sequencing dataset ERR250440 from the 1000 genomes project. The reads were aligned against hg 19 using Novoalign and then run through the best practices GATK workflow.</p><p hwp:id="p-75">The resultant vcf was used as a standard to compare Isaac’s vcf against. Once again, some of the same variants were detected, but most were marked as not passing the filters, mainly due to high coverage (<xref ref-type="fig" rid="fig5" hwp:id="xref-fig-5-1" hwp:rel-id="F5">Figure 5</xref>).</p><fig id="fig5" position="float" orientation="portrait" fig-type="figure" hwp:id="F5" hwp:rev-id="xref-fig-5-1"><object-id pub-id-type="other" hwp:sub-type="pisa">biorxiv;031021v3/FIG5</object-id><object-id pub-id-type="other" hwp:sub-type="slug">F5</object-id><object-id pub-id-type="publisher-id">fig5</object-id><label>Figure 5.</label><caption hwp:id="caption-11"><title hwp:id="title-35">Concordance statistics on the variants detected with novoalign-GATK and those detected by Isaac.</title><p hwp:id="p-76">Out of 211,175 variants detected by GATK (salmon circle), 182,793 (86.56%) were also found by Isaac, but only 8,936 of those passed the filters. A large number of false positives is observed again (300,376), but only 798 of them pass the filters. Cyan circle: variants found by Isaac. Purple circle: variants found by Isaac that also passed filtration.</p></caption><graphic xlink:href="031021_fig5" position="float" orientation="portrait" hwp:id="graphic-11"/></fig><p hwp:id="p-77">The number of false negative variants is still high (13.44%), and interestingly some of these are clearly visible in alignment, but not reported by Isaac. For example, the box below lists neighboring locations in Isaac’s and GATK’s vcfs, and matches the region displayed in the genome browser screenshot on <xref ref-type="fig" rid="fig6" hwp:id="xref-fig-6-1" hwp:rel-id="F6">Figure 6</xref>. All six variants listed in the box appear present in the alignment: their respective loci are highlighted in color within the box.</p><table-wrap id="utbl1" orientation="portrait" position="float" hwp:id="T7"><object-id pub-id-type="other" hwp:sub-type="pisa">biorxiv;031021v3/UTBL1</object-id><object-id pub-id-type="other" hwp:sub-type="slug">T7</object-id><object-id pub-id-type="publisher-id">utbl1</object-id><graphic xlink:href="031021_utbl1" position="float" orientation="portrait" hwp:id="graphic-12"/></table-wrap><fig id="fig6" position="float" orientation="portrait" fig-type="figure" hwp:id="F6" hwp:rev-id="xref-fig-6-1 xref-fig-6-2"><object-id pub-id-type="other" hwp:sub-type="pisa">biorxiv;031021v3/FIG6</object-id><object-id pub-id-type="other" hwp:sub-type="slug">F6</object-id><object-id pub-id-type="publisher-id">fig6</object-id><label>Figure 6.</label><caption hwp:id="caption-12"><title hwp:id="title-36">Example of variant mismatch between GATK and Isaac.</title><p hwp:id="p-78">Top panel is a screenshot of IGV genome browser zoomed in on the region <monospace>chr1:1, 650, 701–1, 650, 901</monospace> within an output BAM from Isaac aligner. Bottom panel is the same location within an output BAM from Novoalign. .</p></caption><graphic xlink:href="031021_fig6" position="float" orientation="portrait" hwp:id="graphic-13"/></fig><p hwp:id="p-79">At first it might look like reads are misaligned, and single variants became split into two, and only one half got called. For example, variant <monospace>chr1:1650807</monospace> got called by Isaac, but <monospace>chr1:1650801</monospace> and <monospace>chr1:1650787</monospace> did not, even though they seem to have similar characteristics. However, the alignment performed by Novoalign looks extremely similar in the same region (<xref ref-type="fig" rid="fig6" hwp:id="xref-fig-6-2" hwp:rel-id="F6">Figure 6</xref>, bottom panel). Perhaps the variant caller is the culprit?</p></sec><sec id="s7d2" hwp:id="sec-26"><title hwp:id="title-37">Isaac 01.15.04.01 and Isaac v2 both report high number of false positives on WES</title><p hwp:id="p-80">Newer versions of Isaac do not eliminate the high false positives rate, although the number of perfect matches within the Platinum v8 confident regions is quite high (<xref ref-type="table" rid="tbl7" hwp:id="xref-table-wrap-8-1" hwp:rel-id="T8">Table 7</xref>).</p><table-wrap id="tbl7" orientation="portrait" position="float" hwp:id="T8" hwp:rev-id="xref-table-wrap-8-1"><object-id pub-id-type="other" hwp:sub-type="pisa">biorxiv;031021v3/TBL7</object-id><object-id pub-id-type="other" hwp:sub-type="slug">T8</object-id><object-id pub-id-type="publisher-id">tbl7</object-id><label>Table 7.</label><caption hwp:id="caption-13"><title hwp:id="title-38">Concordance between variants called using Isaac 01.15.04.01 and Isaac_v2 (second % number, where applicable), and the variants detected by Novoalign-GATK in the WES reads from the ERR250440 sample (1000 genomes project).</title><p hwp:id="p-81">Measurements were done both ways: on all reported variants, including those that are homozygous and failed filtration (+homs, +failed), and also on the subset excluding those two categories (-homs, -failed)</p></caption><graphic xlink:href="031021_tbl7" position="float" orientation="portrait" hwp:id="graphic-14"/></table-wrap></sec></sec><sec id="s7e" hwp:id="sec-27"><title hwp:id="title-39">NA12878: paired-ended data from GATK and GIAB, and mate-pair data from ENA</title><p hwp:id="p-82">Finally, to test variant detection for whole genome sequencing, we used three datasets derived from the Illumina Platinum genome NA12878. One dataset was sequenced by the Broad Institute <ext-link l:rel="related" l:ref-type="uri" l:ref="http://gatkforums.broadinstitute.org/discussion/1292/which-datasets-should-i-use-for-reviewing-or-benchmarking-purposes" ext-link-type="uri" xlink:href="http://gatkforums.broadinstitute.org/discussion/1292/which-datasets-should-i-use-for-reviewing-or-benchmarking-purposes" hwp:id="ext-link-17">http://gatkforums.broadinstitute.org/discussion/1292/which-datasets-should-i-use-for-reviewing-or-benchmarking-purposes</ext-link> to produce high-coverage (&gt;60X) paired ended reads hosted by the NCBI <ext-link l:rel="related" l:ref-type="uri" l:ref="ftp://ftp-trace.ncbi.nih.gov/1000genomes/ftp/technical/working/20101201_cg_NA12878/" ext-link-type="uri" xlink:href="ftp://ftp-trace.ncbi.nih.gov/1000genomes/ftp/technical/working/20101201_cg_NA12878/" hwp:id="ext-link-18">ftp://ftp-trace.ncbi.nih.gov/1000genomes/ftp/technical/working/20101201_cg_NA12878/</ext-link>. The second set was downloaded from Genome In A Bottle (GIAB) consortium. The third was sequenced using long insert mate pair library (2000 nt fragment length) and hosted by the ENA <ext-link l:rel="related" l:ref-type="uri" l:ref="http://www.ebi.ac.uk/ena/data/view/ERP002490" ext-link-type="uri" xlink:href="http://www.ebi.ac.uk/ena/data/view/ERP002490" hwp:id="ext-link-19">http://www.ebi.ac.uk/ena/data/view/ERP002490</ext-link>.</p><p hwp:id="p-83">The results are definitely better than for any dataset above. Was Isaac tuned to performed particularly well on NA12878? The number of false positives and false negatives is still noticeable in some cases, especially the mate pair ENA dataset (<xref ref-type="table" rid="tbl8" hwp:id="xref-table-wrap-9-1" hwp:rel-id="T9">Table 8</xref>). This might be improved by setting the fragment length correctly, but it is not transparent from the documentation how to do that.</p><p hwp:id="p-84">For comparison, <xref ref-type="table" rid="tbl8" hwp:id="xref-table-wrap-9-2" hwp:rel-id="T9">Table 8</xref> also includes the concordance stats on the GIAB data analyzed using BWA-GATK HaplotypeCaller.</p><table-wrap id="tbl8" orientation="portrait" position="float" hwp:id="T9" hwp:rev-id="xref-table-wrap-9-1 xref-table-wrap-9-2"><object-id pub-id-type="other" hwp:sub-type="pisa">biorxiv;031021v3/TBL8</object-id><object-id pub-id-type="other" hwp:sub-type="slug">T9</object-id><object-id pub-id-type="publisher-id">tbl8</object-id><label>Table 8.</label><caption hwp:id="caption-14"><title hwp:id="title-40">Concordance for variants called using Isaac 01.14.11.27 and BWA-GATK HaplotypeCaller on NA12878 datasets of various origins.</title><p hwp:id="p-85">Measurements were made on all reported variants, including those that are homozygous and failed, but only inside the confident regions. Variants called on the datasets sourced from GATK and ENA were compared against the Platinum set v7. The variants called on datasets sourced from GIAB were compared to variants provided by GIAB.</p></caption><graphic xlink:href="031021_tbl8" position="float" orientation="portrait" hwp:id="graphic-15"/></table-wrap></sec><sec id="s7f" hwp:id="sec-28"><title hwp:id="title-41">NA12878_rep4 recommended by Illumina team</title><p hwp:id="p-86">To test for the best concordance, the Illumina team shared with us in BaseSpace a dataset comprised of NA12878 sequenced on two lanes, paired-ended reads 126 nt long, 40X WGS. They called it NA12878_rep4 and recommended we compare the results against Illumina Platinum VCFs version 8.</p><p hwp:id="p-87">We downloaded these data to the high-memory machine and ran the analysis locally using Isaac 01.15.04.01, with results comparable to those reported by Isaac 01.14.11.27 on the high coverage data from GATK. Isaac v2 was run on the NA12878_rep4 in BaseSpace, with very similar results (<xref ref-type="table" rid="tbl9" hwp:id="xref-table-wrap-10-1" hwp:rel-id="T10">Table 9</xref>).</p><table-wrap id="tbl9" orientation="portrait" position="float" hwp:id="T10" hwp:rev-id="xref-table-wrap-10-1"><object-id pub-id-type="other" hwp:sub-type="pisa">biorxiv;031021v3/TBL9</object-id><object-id pub-id-type="other" hwp:sub-type="slug">T10</object-id><object-id pub-id-type="publisher-id">tbl9</object-id><label>Table 9.</label><caption hwp:id="caption-15"><title hwp:id="title-42">Concordance between variants called on NA12878_rep4 using Isaac 01.15.04.01or Isaac v2, and the Platinum v8.</title><p hwp:id="p-88">Measurements were made on all reported variants, including those that are homozygous and failed filtration (+homs, +failed).</p></caption><graphic xlink:href="031021_tbl9" position="float" orientation="portrait" hwp:id="graphic-16"/></table-wrap></sec></sec><sec id="s8" hwp:id="sec-29"><title hwp:id="title-43">Performance</title><sec id="s8a" hwp:id="sec-30"><title hwp:id="title-44">Installation</title><p hwp:id="p-89">Isaac installs fairly easily on a linux box with standard, modern OS distribution and libraries. It does require <monospace>boost</monospace> and <monospace>gnuplot</monospace> as prerequisites.</p></sec><sec id="s8b" hwp:id="sec-31"><title hwp:id="title-45">Performance benchmarks</title><p hwp:id="p-90">It takes a long time to index the reference: 8-12 hours depending on the number of available cores. This only needs to be done once.</p><p hwp:id="p-91">On the Dell machine with 48 dual-threaded cores and 3 TB of RAM, the alignment takes ~80-120 minutes (depending on the version and OS activity), and variant calling in ~30 minutes on human WGS, 50X coverage. Performance definitely was degraded when sharing the machine with other bioinformatics applications, and sometimes Isaac crashed in those cases. On less powerful servers the alignment can take up to 4.5 hours and variant calling ~ 40 minutes. In BaseSpace, the entire workflow took 13.5 hours on a single server. In AWS, Isaac alignment took 4.5 hours, and variant calling took 45 minutes.</p><p hwp:id="p-92">Isaac aligner seems to use all available computational resources on the host machine during the run (<xref ref-type="fig" rid="fig7" hwp:id="xref-fig-7-1" hwp:rel-id="F7">Figure 7</xref>). According to Isaac whitepaper, the alignment consists of three distinct phases, which manifest in performance profiles as well. The first phase generates mapping position candidates via seed-based search, and finds exact matches on a stream of input data, which seem to be kept in memory. The second phase finds best mapping among all selected candidate mappings and determines alignment scores. This phase is highly i/o intensive and CPU intensive. Finally, duplicates are found and removed - a process that seems to happen in RAM as much as possible. The aligner logs also mention realignment around gaps during this phase.</p><fig id="fig7" position="float" orientation="portrait" fig-type="figure" hwp:id="F7" hwp:rev-id="xref-fig-7-1"><object-id pub-id-type="other" hwp:sub-type="pisa">biorxiv;031021v3/FIG7</object-id><object-id pub-id-type="other" hwp:sub-type="slug">F7</object-id><object-id pub-id-type="publisher-id">fig7</object-id><label>Figure 7.</label><caption hwp:id="caption-16"><title hwp:id="title-46">Performance profile on Isaac aligner, made by parsing /proc/PID every second.</title><p hwp:id="p-93">Top panel: RAM utilization measurements, specifically Vm size (red) and resident set size (green). The roman numerals mark the three computational phases discussed in the text. Middle panel: the rate of data reads (red) and writes (green). Bottom panel: number of utilized threads (red) and CPU load (green).</p></caption><graphic xlink:href="031021_fig7" position="float" orientation="portrait" hwp:id="graphic-17"/></fig></sec><sec id="s8c" hwp:id="sec-32"><title hwp:id="title-47">Issues</title><p hwp:id="p-94">One issue prevented us to successfully test the version 01.14.11.27 (and earlier versions) in a cluster environment: Isaac does not respect the boundaries placed on the usage of threads and RAM.</p><p hwp:id="p-95">For example, when specified to use 48 threads for reference indexing on the “high-memory” machine, Isaac still uses all available 96 threads in certain phases of computation, according to its ouput log. Similarly, Isaac aligner does not tend to respect the user-set number of threads specified to it on the command line using option -j. For example, when we ran tests on the “high-memory node”, which has 48 dual-threaded cores, with -j 48, the aligner logs still indicated that in fact all 96 virtual threads were used.</p><p hwp:id="p-96">For this reason, when running on a cluster node, especially in a shared mode with other users, Isaac throws a “<monospace>libgomp: Thread creation failed”</monospace> error (found both on Biocluster and iForge). For example the Biocluster nodes in question have 384 CPUs per node, and 2 TB of RAM per node. Thus, we are not exceeding the number of cores on the node by asking Isaac aligner to use 48 threads via the –j option, and also telling the PBS script to submit the Isaac job with a limitation of 48 threads, so that other users could utilize the other threads. However, Isaac appears to ignore these limitations: not only ignoring the -j option, but also not complying with the scheduler’s limits, and throwing the “<monospace>libgomp: Thread creation failed”</monospace> error.</p><p hwp:id="p-97">Isaac was probably designed to run alone on a computer, and that may be why we are seeing this error. It was reported to the developers, who did come up with a fix in January 2015. We did not test it on a cluster again.</p></sec><sec id="s8d" hwp:id="sec-33"><title hwp:id="title-48">Summary and conclusions</title><p hwp:id="p-98">In summary, the Isaac workflow appears to be optimized for whole genome sequencing on NA12878. It reports high number of false positive variants on exome data, both synthetic and real. However, its accuracy has improved steadily over several versions. On synthetic WGS, the accuracy of Isaac v2 is comparable or slightly worse than BWA-GATK and Novoalign-GATK. Special attention to variant filters is required when evaluating results.</p><p hwp:id="p-99">In terms of performance, it is best to dedicate a single server to Isaac, where it will not compete with other software for hardware resources, otherwise the user might notice unstable behavior.</p></sec></sec></body><back><ack hwp:id="ack-1"><title hwp:id="title-49">Acknowledgements</title><p hwp:id="p-100">We are grateful to Dr. Volodymyr Kindratenko (ISL2.0, NCSA) for allowing us to use his high memory node for the testing of Isaac workflow. Many thanks also to the system administrators at the Private Sector Program (NCSA) for their help in installing and determining reasons for runtime failures on iForge. Finally, we would like to acknowledge the Computer Network Resource Group at the Institute for Genomic Biology for similar efforts on Biocluster.</p><p hwp:id="p-101">This research is part of the Blue Waters sustained-petascale computing project, which is supported by the National Science Foundation (awards OCI-0725070 and ACI-1238993) and the state of Illinois. Blue Waters is a joint effort of the University of Illinois at Urbana-Champaign and its National Center for Supercomputing Applications.</p></ack><ref-list hwp:id="ref-list-1"><title hwp:id="title-50">References</title><ref id="c1" hwp:id="ref-1" hwp:rev-id="xref-ref-1-1"><citation publication-type="other" citation-type="journal" ref:id="031021v3.1" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-1"><string-name name-style="western" hwp:sortable="Cornish A"><given-names>A</given-names> <surname>Cornish</surname></string-name>, <string-name name-style="western" hwp:sortable="Guda C"><given-names>C</given-names> <surname>Guda</surname></string-name> (<year>2014</year>) <article-title hwp:id="article-title-2">A Comparison of Variant Calling Pipelines Using Genome in a Bottle as a Reference</article-title>. <source hwp:id="source-1">BioMed Research International</source>, Article ID 456479</citation></ref><ref id="c2" hwp:id="ref-2"><citation publication-type="website" citation-type="web" ref:id="031021v3.2" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-2"><article-title hwp:id="article-title-3">GATK best practices</article-title> <ext-link l:rel="related" l:ref-type="uri" l:ref="https://www.broadinstitute.org/gatk/guide/best-practices" ext-link-type="uri" xlink:href="https://www.broadinstitute.org/gatk/guide/best-practices" hwp:id="ext-link-20">https://www.broadinstitute.org/gatk/guide/best-practices</ext-link></citation></ref><ref id="c3" hwp:id="ref-3"><citation publication-type="website" citation-type="web" ref:id="031021v3.3" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-3"><article-title hwp:id="article-title-4">Genome Smasher</article-title>: <ext-link l:rel="related" l:ref-type="uri" l:ref="https://code.google.com/p/genome-smasher/wiki/SNP_mutator" ext-link-type="uri" xlink:href="https://code.google.com/p/genome-smasher/wiki/SNP_mutator" hwp:id="ext-link-21">https://code.google.com/p/genome-smasher/wiki/SNP_mutator</ext-link></citation></ref><ref id="c4" hwp:id="ref-4" hwp:rev-id="xref-ref-4-1"><citation publication-type="website" citation-type="web" ref:id="031021v3.4" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-4"><collab hwp:id="collab-1">Isaac whitepaper</collab>, <date-in-citation content-type="access-date">accessed in <month>March</month> <year>2015</year></date-in-citation>: <ext-link l:rel="related" l:ref-type="uri" l:ref="http://res.illumina.com/documents/products/whitepapers/whitepaper_iassc_workflow.pdf" ext-link-type="uri" xlink:href="http://res.illumina.com/documents/products/whitepapers/whitepaper_iassc_workflow.pdf" hwp:id="ext-link-22">http://res.illumina.com/documents/products/whitepapers/whitepaper_iassc_workflow.pdf</ext-link></citation></ref><ref id="c5" hwp:id="ref-5" hwp:rev-id="xref-ref-5-1 xref-ref-5-2"><citation publication-type="journal" citation-type="journal" ref:id="031021v3.5" ref:linkable="yes" ref:use-reference-as-is="yes" hwp:id="citation-5"><string-name name-style="western" hwp:sortable="Kim S"><given-names>S</given-names> <surname>Kim</surname></string-name>, <string-name name-style="western" hwp:sortable="Jeong K"><given-names>K</given-names> <surname>Jeong</surname></string-name>, <string-name name-style="western" hwp:sortable="Bafna V"><given-names>V</given-names> <surname>Bafna</surname></string-name> (<year>2013</year>) <article-title hwp:id="article-title-5">Wessim: a whole-exome sequencing simulator based on in silico exome capture</article-title>. <source hwp:id="source-2">Bioinformatics</source>. 2013 <month>Apr</month> <day>15</day>;<volume>29</volume>(<issue>8</issue>):<fpage>1076</fpage>–<lpage>7</lpage>.</citation></ref><ref id="c6" hwp:id="ref-6" hwp:rev-id="xref-ref-6-1"><citation publication-type="journal" citation-type="journal" ref:id="031021v3.6" ref:linkable="yes" ref:use-reference-as-is="yes" hwp:id="citation-6"><string-name name-style="western" hwp:sortable="Li H."><given-names>H.</given-names> <surname>Li</surname></string-name>, <string-name name-style="western" hwp:sortable="Durbin R"><given-names>R</given-names> <surname>Durbin</surname></string-name> (<year>2009</year>) <article-title hwp:id="article-title-6">Fast and accurate short read alignment with Burrows-Wheeler Transform</article-title>. <source hwp:id="source-3">Bioinformatics</source>, <volume>25</volume>:<fpage>1754</fpage>–<lpage>60</lpage></citation></ref><ref id="c7" hwp:id="ref-7"><citation publication-type="website" citation-type="web" ref:id="031021v3.7" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-7"><article-title hwp:id="article-title-7">NEAT Synthetic reads generator</article-title>: <ext-link l:rel="related" l:ref-type="uri" l:ref="https://github.com/zstephens/genReads1" ext-link-type="uri" xlink:href="https://github.com/zstephens/genReads1" hwp:id="ext-link-23">https://github.com/zstephens/genReads1</ext-link></citation></ref><ref id="c8" hwp:id="ref-8"><citation publication-type="website" citation-type="web" ref:id="031021v3.8" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-8"><article-title hwp:id="article-title-8">Novoalign</article-title>: <ext-link l:rel="related" l:ref-type="uri" l:ref="http://www.novocraft.com" ext-link-type="uri" xlink:href="http://www.novocraft.com" hwp:id="ext-link-24">www.novocraft.com</ext-link></citation></ref><ref id="c9" hwp:id="ref-9" hwp:rev-id="xref-ref-9-1"><citation publication-type="journal" citation-type="journal" ref:id="031021v3.9" ref:linkable="yes" ref:use-reference-as-is="yes" hwp:id="citation-9"><string-name name-style="western" hwp:sortable="O’Rawe J"><given-names>J</given-names> <surname>O’Rawe</surname></string-name>, <string-name name-style="western" hwp:sortable="Jiang T"><given-names>T</given-names> <surname>Jiang</surname></string-name>, <string-name name-style="western" hwp:sortable="Sun G"><given-names>G</given-names> <surname>Sun</surname></string-name>, <string-name name-style="western" hwp:sortable="Wu Y"><given-names>Y</given-names> <surname>Wu</surname></string-name>, <string-name name-style="western" hwp:sortable="Wang W"><given-names>W</given-names> <surname>Wang</surname></string-name>, <string-name name-style="western" hwp:sortable="Hu J"><given-names>J</given-names> <surname>Hu</surname></string-name>, <string-name name-style="western" hwp:sortable="Bodily P"><given-names>P</given-names> <surname>Bodily</surname></string-name>, <string-name name-style="western" hwp:sortable="Tian L"><given-names>L</given-names> <surname>Tian</surname></string-name>, <string-name name-style="western" hwp:sortable="Hakonarson H"><given-names>H</given-names> <surname>Hakonarson</surname></string-name>, <string-name name-style="western" hwp:sortable="Johnson W E"><given-names>W E</given-names> <surname>Johnson</surname></string-name>, <string-name name-style="western" hwp:sortable="Wei Z"><given-names>Z</given-names> <surname>Wei</surname></string-name>, <string-name name-style="western" hwp:sortable="Wang K"><given-names>K</given-names> <surname>Wang</surname></string-name>, <string-name name-style="western" hwp:sortable="Lyon G J"><given-names>G J</given-names> <surname>Lyon</surname></string-name> (<year>2013</year>) <article-title hwp:id="article-title-9">Low concordance of multiple variant-calling pipelines: practical implications for exome and genome sequencing</article-title>. <source hwp:id="source-4">Genome Medicine</source> 2013, <volume>5</volume>:<fpage>28</fpage></citation></ref><ref id="c10" hwp:id="ref-10" hwp:rev-id="xref-ref-10-1"><citation publication-type="journal" citation-type="journal" ref:id="031021v3.10" ref:linkable="yes" ref:use-reference-as-is="yes" hwp:id="citation-10"><string-name name-style="western" hwp:sortable="Pabinger S"><given-names>S</given-names> <surname>Pabinger</surname></string-name>, <string-name name-style="western" hwp:sortable="Dander A"><given-names>A</given-names> <surname>Dander</surname></string-name>, <string-name name-style="western" hwp:sortable="Fischer M"><given-names>M</given-names> <surname>Fischer</surname></string-name>, <string-name name-style="western" hwp:sortable="Snajder R"><given-names>R</given-names> <surname>Snajder</surname></string-name>, <string-name name-style="western" hwp:sortable="Sperk M"><given-names>M</given-names> <surname>Sperk</surname></string-name>, <string-name name-style="western" hwp:sortable="Efremova M"><given-names>M</given-names> <surname>Efremova</surname></string-name>, <string-name name-style="western" hwp:sortable="Krabichler B"><given-names>B</given-names> <surname>Krabichler</surname></string-name>, <string-name name-style="western" hwp:sortable="Speicher M R."><given-names>M R.</given-names> <surname>Speicher</surname></string-name>, <string-name name-style="western" hwp:sortable="Zschocke J"><given-names>J</given-names> <surname>Zschocke</surname></string-name>, Z (<year>2014</year>) <article-title hwp:id="article-title-10">A survey of tools for variant analysis of next-generation genome sequencing data</article-title>. <source hwp:id="source-5">Brief Bioinform</source> <volume>15</volume> (<issue>2</issue>): <fpage>256</fpage>–<lpage>278</lpage>. doi: <pub-id pub-id-type="doi">10.1093/bib/bbs086</pub-id></citation></ref><ref id="c11" hwp:id="ref-11" hwp:rev-id="xref-ref-11-1"><citation publication-type="journal" citation-type="journal" ref:id="031021v3.11" ref:linkable="yes" ref:use-reference-as-is="yes" hwp:id="citation-11"><string-name name-style="western" hwp:sortable="Yi M"><given-names>M</given-names> <surname>Yi</surname></string-name>, <string-name name-style="western" hwp:sortable="Zhao Y"><given-names>Y</given-names> <surname>Zhao</surname></string-name>, <string-name name-style="western" hwp:sortable="Jia L"><given-names>L</given-names> <surname>Jia</surname></string-name>, <string-name name-style="western" hwp:sortable="He M"><given-names>M</given-names> <surname>He</surname></string-name>, <string-name name-style="western" hwp:sortable="Kebebew E"><given-names>E</given-names> <surname>Kebebew</surname></string-name>, <string-name name-style="western" hwp:sortable="Stephens RM."><given-names>RM.</given-names> <surname>Stephens</surname></string-name> (<year>2014</year>) <article-title hwp:id="article-title-11">Performance comparison of SNP detection tools with illumina exome sequencing data—an assessment using both family pedigree information and sample-matched SNP array data</article-title>. <source hwp:id="source-6">Nucl. Acids Res</source>. <volume>42</volume>(<issue>12</issue>):<fpage>e101</fpage>. doi: <pub-id pub-id-type="doi">10.1093/nar/gku392</pub-id></citation></ref><ref id="c12" hwp:id="ref-12" hwp:rev-id="xref-ref-12-1"><citation publication-type="journal" citation-type="journal" ref:id="031021v3.12" ref:linkable="yes" ref:use-reference-as-is="yes" hwp:id="citation-12"><string-name name-style="western" hwp:sortable="Yu X."><given-names>X.</given-names> <surname>Yu</surname></string-name>, <string-name name-style="western" hwp:sortable="Sun S."><given-names>S.</given-names> <surname>Sun</surname></string-name> (<year>2013</year>) <article-title hwp:id="article-title-12">Comparing a few SNP calling algorithms using low-coverage sequencing data</article-title>. <source hwp:id="source-7">BMC Bioinformatics</source> <volume>14</volume>:<fpage>274</fpage></citation></ref></ref-list></back></article>
