<article article-type="article" specific-use="production" xml:lang="en" xmlns:hw="org.highwire.hpp" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ali="http://www.niso.org/schemas/ali/1.0/" xmlns:ref="http://schema.highwire.org/Reference" xmlns:hwp="http://schema.highwire.org/Journal" xmlns:l="http://schema.highwire.org/Linking" xmlns:r="http://schema.highwire.org/Revision" xmlns:x="http://www.w3.org/1999/xhtml" xmlns:app="http://www.w3.org/2007/app" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:nlm="http://schema.highwire.org/NLM/Journal" xmlns:a="http://www.w3.org/2005/Atom" xmlns:c="http://schema.highwire.org/Compound" xmlns:hpp="http://schema.highwire.org/Publishing"><front><journal-meta><journal-id journal-id-type="hwp">biorxiv</journal-id><journal-id journal-id-type="publisher-id">BIORXIV</journal-id><journal-title>bioRxiv</journal-title><abbrev-journal-title abbrev-type="publisher">bioRxiv</abbrev-journal-title><publisher><publisher-name>Cold Spring Harbor Laboratory</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.1101/213884</article-id><article-id pub-id-type="other" hwp:sub-type="pisa">biorxiv;213884v1</article-id><article-id pub-id-type="other" hwp:sub-type="pisa-master">biorxiv;213884</article-id><article-id pub-id-type="other" hwp:sub-type="slug">213884</article-id><article-id pub-id-type="other" hwp:sub-type="tag">213884</article-id><article-version>1.1</article-version><article-categories><subj-group subj-group-type="author-type"><subject>Regular Article</subject></subj-group><subj-group subj-group-type="heading"><subject>New Results</subject></subj-group><subj-group subj-group-type="hwp-journal-coll" hwp:journal-coll-id="Bioinformatics" hwp:journal="biorxiv"><subject>Bioinformatics</subject></subj-group></article-categories><title-group><article-title hwp:id="article-title-1">Bioinformatics Workflow Management With The Wobidisco Ecosystem</article-title></title-group><author-notes hwp:id="author-notes-1"><corresp id="cor1" hwp:id="corresp-1" hwp:rev-id="xref-corresp-1-1"><label>*</label>Corresponding Author, <email hwp:id="email-1">smondet@hammerlab.org</email>, Department of Genetics and Genomic Sciences, Icahn School of Medicine at Mount Sinai, New York, NY 10029</corresp></author-notes><contrib-group hwp:id="contrib-group-1"><contrib contrib-type="author" corresp="yes" hwp:id="contrib-1"><contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0003-4833-4221</contrib-id><name name-style="western" hwp:sortable="Mondet Sebastien"><surname>Mondet</surname><given-names>Sebastien</given-names></name><xref ref-type="corresp" rid="cor1" hwp:id="xref-corresp-1-1" hwp:rel-id="corresp-1">*</xref><object-id pub-id-type="other" hwp:sub-type="orcid" xlink:href="http://orcid.org/0000-0003-4833-4221"/></contrib><contrib contrib-type="author" hwp:id="contrib-2"><contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0002-0135-2505</contrib-id><name name-style="western" hwp:sortable="Aksoy Bulent Arman"><surname>Aksoy</surname><given-names>Bulent Arman</given-names></name><xref ref-type="aff" rid="a1" hwp:id="xref-aff-1-1" hwp:rel-id="aff-1">†</xref><object-id pub-id-type="other" hwp:sub-type="orcid" xlink:href="http://orcid.org/0000-0002-0135-2505"/></contrib><contrib contrib-type="author" hwp:id="contrib-3"><contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0002-7696-8451</contrib-id><name name-style="western" hwp:sortable="Rozenberg Leonid"><surname>Rozenberg</surname><given-names>Leonid</given-names></name><xref ref-type="aff" rid="a2" hwp:id="xref-aff-2-1" hwp:rel-id="aff-2">‡</xref><object-id pub-id-type="other" hwp:sub-type="orcid" xlink:href="http://orcid.org/0000-0002-7696-8451"/></contrib><contrib contrib-type="author" hwp:id="contrib-4"><contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0002-8305-9045</contrib-id><name name-style="western" hwp:sortable="Hodes Isaac"><surname>Hodes</surname><given-names>Isaac</given-names></name><xref ref-type="aff" rid="a3" hwp:id="xref-aff-3-1" hwp:rel-id="aff-3">§</xref><object-id pub-id-type="other" hwp:sub-type="orcid" xlink:href="http://orcid.org/0000-0002-8305-9045"/></contrib><contrib contrib-type="author" hwp:id="contrib-5"><contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0001-6596-8563</contrib-id><name name-style="western" hwp:sortable="Hammerbacher Jeff"><surname>Hammerbacher</surname><given-names>Jeff</given-names></name><xref ref-type="aff" rid="a4" hwp:id="xref-aff-4-1" hwp:rel-id="aff-4">¶</xref><object-id pub-id-type="other" hwp:sub-type="orcid" xlink:href="http://orcid.org/0000-0001-6596-8563"/></contrib><aff id="a1" hwp:id="aff-1" hwp:rev-id="xref-aff-1-1"><label>†</label><institution hwp:id="institution-1">Department of Microbiology and Immunology, Medical University of South Carolina</institution>, Charleston, SC 29425, <email hwp:id="email-2">arman@hammerlab.org</email></aff><aff id="a2" hwp:id="aff-2" hwp:rev-id="xref-aff-2-1"><label>‡</label><institution hwp:id="institution-2">Department of Genetics and Genomic Sciences, Icahn School of Medicine at Mount Sinai</institution>, New York, NY 10029, <email hwp:id="email-3">leonidr@hammerlab.org</email></aff><aff id="a3" hwp:id="aff-3" hwp:rev-id="xref-aff-3-1"><label>§</label><institution hwp:id="institution-3">Department of Genetics and Genomic Sciences, Icahn School of Medicine at Mount Sinai</institution>, New York, NY 10029, <email hwp:id="email-4">issac@hammerlab.org</email></aff><aff id="a4" hwp:id="aff-4" hwp:rev-id="xref-aff-4-1"><label>¶</label><institution hwp:id="institution-4">Department of Microbiology and Immunology, Medical University of South Carolina</institution>, Charleston, SC 29425, <email hwp:id="email-5">jeff@hammerlab.org</email></aff></contrib-group><pub-date pub-type="epub-original" hwp:start="2017"><year>2017</year></pub-date><pub-date pub-type="hwp-created" hwp:start="2017-11-07T08:00:27-08:00">
    <day>7</day><month>11</month><year>2017</year>
  </pub-date><pub-date pub-type="hwp-received" hwp:start="2017-11-07T08:00:27-08:00">
    <day>7</day><month>11</month><year>2017</year>
  </pub-date><pub-date pub-type="epub" hwp:start="2017-11-07T08:07:02-08:00">
    <day>7</day><month>11</month><year>2017</year>
  </pub-date><pub-date pub-type="epub-version" hwp:start="2017-11-07T08:07:02-08:00">
    <day>7</day><month>11</month><year>2017</year>
  </pub-date><elocation-id>213884</elocation-id><history hwp:id="history-1">
<date date-type="received" hwp:start="2017-11-07"><day>07</day><month>11</month><year>2017</year></date>
<date date-type="rev-recd" hwp:start="2017-11-07"><day>07</day><month>11</month><year>2017</year></date>
<date date-type="accepted" hwp:start="2017-11-07"><day>07</day><month>11</month><year>2017</year></date>
</history><permissions><copyright-statement hwp:id="copyright-statement-1">© 2017, Posted by Cold Spring Harbor Laboratory</copyright-statement><copyright-year>2017</copyright-year><license license-type="creative-commons" xlink:href="http://creativecommons.org/licenses/by/4.0/" hwp:id="license-1"><p hwp:id="p-1">This pre-print is available under a Creative Commons License (Attribution 4.0 International), CC BY 4.0, as described at <ext-link l:rel="related" l:ref-type="uri" l:ref="http://creativecommons.org/licenses/by/4.0/" ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/" hwp:id="ext-link-1">http://creativecommons.org/licenses/by/4.0/</ext-link></p></license></permissions><self-uri xlink:href="213884.pdf" content-type="pdf" xlink:role="full-text"/><self-uri l:ref="forthcoming:yes" c:role="http://schema.highwire.org/variant/abstract" xlink:role="abstract" content-type="xhtml+xml" hwp:variant="yes"/><self-uri l:ref="forthcoming:yes" c:role="http://schema.highwire.org/variant/full-text" xlink:href="file:/content/biorxiv/vol0/issue2019/pdf/213884v1.pdf" hwp:variant="yes" content-type="pdf" xlink:role="full-text"/><self-uri l:ref="forthcoming:yes" c:role="http://schema.highwire.org/variant/full-text" xlink:role="full-text" content-type="xhtml+xml" hwp:variant="yes"/><self-uri l:ref="forthcoming:yes" c:role="http://schema.highwire.org/variant/source" xlink:role="source" content-type="xml" xlink:show="none" hwp:variant="yes"/><self-uri l:ref="forthcoming:yes" c:role="http://schema.highwire.org/variant/original" xlink:role="original" content-type="xml" xlink:show="none" hwp:variant="yes" xlink:href="213884.xml"/><self-uri content-type="abstract" xlink:href="file:/content/biorxiv/vol0/issue2019/abstracts/213884v1/213884v1.htslp"/><self-uri content-type="fulltext" xlink:href="file:/content/biorxiv/vol0/issue2019/fulltext/213884v1/213884v1.htslp"/><abstract hwp:id="abstract-1"><title hwp:id="title-1">References</title><p hwp:id="p-2">To conduct our computational experiments, our team developed a set of workflow-management-related projects: Ketrew, Biokepi, and Coclobas. The family of tools and libraries are designed with reliability and flexibility as main guiding principles. We describe the components of the software stack and explain the choices we made. Every piece of software is free and open-source; the umbrella documentation project is available at <ext-link l:rel="related" l:ref-type="uri" l:ref="https://github.com/hammerlab/wobidisco" ext-link-type="uri" xlink:href="https://github.com/hammerlab/wobidisco" hwp:id="ext-link-2">https://github.com/hammerlab/wobidisco</ext-link>.</p></abstract><counts><page-count count="18"/></counts></article-meta></front><body><sec id="s1" hwp:id="sec-1"><title hwp:id="title-2">Introduction</title><sec id="s1a" hwp:id="sec-2"><title hwp:id="title-3">State Of The Union</title><p hwp:id="p-3">Over the past half-century the computer and software worlds have proven to be a complete engineering disaster. Extremely poor quality standards, mostly due to humans overestimating their capabilities [<xref ref-type="bibr" rid="c1" hwp:id="xref-ref-1-1" hwp:rel-id="ref-1">1</xref>], has lead to the deployment of very unsecure [<xref ref-type="bibr" rid="c2" hwp:id="xref-ref-2-1" hwp:rel-id="ref-2">2</xref>] and unreliable [<xref ref-type="bibr" rid="c3" hwp:id="xref-ref-3-1" hwp:rel-id="ref-3">3</xref>], [<xref ref-type="bibr" rid="c4" hwp:id="xref-ref-4-1" hwp:rel-id="ref-4">4</xref>] software in all sectors of industry and academia. The biomedical research community has added to the phenomenon by allocating very little funding and training to software development; and moreover providing poor recognition for (comparatively) valuable efforts in the domain. Despite some advances in the open-sourcing and community building, like projects using proper online hosting and distribution [<xref ref-type="bibr" rid="c5" hwp:id="xref-ref-5-1" hwp:rel-id="ref-5">5</xref>], [<xref ref-type="bibr" rid="c6" hwp:id="xref-ref-6-1" hwp:rel-id="ref-6">6</xref>] with decent licenses, and opening access to data, the situation as of 2017 is still that Bioinformatics tools are of extremely poor quality and prove to hurt the productivity of the whole community.</p><p hwp:id="p-4">While our projects stay within cancer immunotherapy [<xref ref-type="bibr" rid="c7" hwp:id="xref-ref-7-1" hwp:rel-id="ref-7">7</xref>], we aim here at showing solutions for the bioinformatics community at large. Most, if not all, bioinformatics tools presented in various papers, provide partial analysis “steps” blessed through peer-review, and distributed as software packages. Bionformaticians need many of those tools chained together through partially compatible [<xref ref-type="bibr" rid="c8" hwp:id="xref-ref-8-1" hwp:rel-id="ref-8">8</xref>] and/or weakly defined file-formats [<xref ref-type="bibr" rid="c9" hwp:id="xref-ref-9-1" hwp:rel-id="ref-9">9</xref>], to bring raw data (usually from sequencing platforms) to usable biologically or medically relevant information. We call the whole graph of computations a <italic toggle="yes">pipeline</italic>. Data analysts also need to be able to easily rearrange the ordering of the steps in the pipeline, make their parameters vary, over many similar experiments, while keeping track of the results.</p><p hwp:id="p-5">We also want to easily and safely add new tools; adapt to new versions; and install software with as much automation as possible. While we need to assume that anything can randomly fail for obscure reasons, and have to deal with adverse conditions (firewalls, university VPNs, cloud hosting, etc.), we want to optimize infrastructure usage and make reproducible research <italic toggle="yes">easier</italic>. Note that being able to rerun someone else’s analysis bug-for-bug as a “black-box” [<xref ref-type="bibr" rid="c10" hwp:id="xref-ref-10-1" hwp:rel-id="ref-10">10</xref>] is very useful but it is not yet proper reproducible research, which should mean being able to re-implement all the tools from their mathematical description/specification, including bugs, imprecisions, and unexpected behaviors if any.</p><p hwp:id="p-6">These hurdles on a bioinformatician’s path to publication have lead to a huge demand for pipeline automation tools, a.k.a “Workflow Engines.” A lot of them are hence in use, including many whose development originates from the bioinformatics community itself. We reviewed many of them, cf. Related Work (section), and concluded that none of them came up to our expectations and that their development setup would make it very hard for us to reach an acceptable value by simply contributing. We found that they were not flexible enough, often specific to a platform (e.g. Hadoop), and driven by lots of strong assumptions (e.g. on networks, file-systems, or regarding the topology of the pipeline graphs, etc.). Moreover, we observed very little support for fault-tolerance or guarantees against hard-to-track mistakes. We also argue that the use of custom Domain Specific Languages (DSLs) almost never renders enough flexibility and reliability. Indeed, programmers think they need a very simple DSL, then they realize they need a form of variable-definition-and-substitution, then a “conditional” construct appears, and the list of programming-language-features keeps growing; cf. the <italic toggle="yes">“yet another half-baked Turing-complete language”</italic> syndrome [<xref ref-type="bibr" rid="c11" hwp:id="xref-ref-11-1" hwp:rel-id="ref-11">11</xref>], [<xref ref-type="bibr" rid="c12" hwp:id="xref-ref-12-1" hwp:rel-id="ref-12">12</xref>].</p></sec><sec id="s1b" hwp:id="sec-3"><title hwp:id="title-4">Description of The Present Work</title><p hwp:id="p-7">To conduct our own computational experiments, we started our own family of workflow-management-related projects: Ketrew, Biokepi, and Coclobas.</p><list list-type="bullet" hwp:id="list-1"><list-item hwp:id="list-item-1"><p hwp:id="p-8">Ketrew is a general-purpose workflow engine (which has also been used for non-bioinformatics applications); it is based on an <italic toggle="yes">Embedded</italic> Domain Specific Language (EDSL), that allowed us to build properly modular libraries of “workflow-steps.”</p></list-item><list-item hwp:id="list-item-2"><p hwp:id="p-9">Biokepi is our main library collecting and wrapping bioinformatics software tools as assembly-ready pieces of Ketrew pipeline.</p></list-item><list-item hwp:id="list-item-3"><p hwp:id="p-10">Ketrew has various backend-plugins defining how to communicate with batch scheduling systems; Coclobas is such a new backend; it allows us to harness elastic and container-based infrastructure, such as Kubernetes [<xref ref-type="bibr" rid="c13" hwp:id="xref-ref-13-1" hwp:rel-id="ref-13">13</xref>] clusters as provided by the Google Container Engine (GKE, [<xref ref-type="bibr" rid="c14" hwp:id="xref-ref-14-1" hwp:rel-id="ref-14">14</xref>]) or AWS-Batch clusters provided by Amazon [<xref ref-type="bibr" rid="c15" hwp:id="xref-ref-15-1" hwp:rel-id="ref-15">15</xref>].</p></list-item></list><p hwp:id="p-11">This modular setup allowed us to experiment with the <italic toggle="yes">different levels of abstraction</italic> for concisely expressing bioinformatics pipelines. We can see this in our “flagship” application: Epidisco a family of pipelines for “personalized cancer epitope discovery and peptide vaccine prediction” used among other things in the <ext-link l:rel="related" l:ref-type="CLINTRIALGOV" l:ref="NCT02721043" ext-link-type="clintrialgov" xlink:href="NCT02721043" hwp:id="ext-link-3">NCT02721043</ext-link> clinical trial [<xref ref-type="bibr" rid="c16" hwp:id="xref-ref-16-1" hwp:rel-id="ref-16">16</xref>], [<xref ref-type="bibr" rid="c17" hwp:id="xref-ref-17-1" hwp:rel-id="ref-17">17</xref>]. We created the “umbrella documentation project” named Wobidisco as a centralized entry-point to the family of projects presented in this paper.</p><p hwp:id="p-12">This work has been guided by the following general design ideas:
<list list-type="bullet" hwp:id="list-2"><list-item hwp:id="list-item-4"><p hwp:id="p-13">We use <italic toggle="yes">Embedded</italic> DSLs with static, as strong as possible, type checking; this gives us lot of flexibility to develop, inspect, and maintain very complex pipelines while providing safety guarantees, proper semantics, and always up-to-date “IDE-like” documentation. In particular, Biokepi’s high-level pipeline EDSL (section), is based on recent research by Suzuki et al. [<xref ref-type="bibr" rid="c18" hwp:id="xref-ref-18-1" hwp:rel-id="ref-18">18</xref>] which provides flexible and well-typed extensibility.</p></list-item><list-item hwp:id="list-item-5"><p hwp:id="p-14">Small well-defined abstractions work better than monumental piles of spaghetti. This <italic toggle="yes">modularity</italic> is also important for manageable documentation efforts.</p></list-item><list-item hwp:id="list-item-6"><p hwp:id="p-15">We acknowledge that we cannot handle or even envision all possible use-cases; every (layer of) abstraction has to be extensible and “escapable” by the users.</p></list-item><list-item hwp:id="list-item-7"><p hwp:id="p-16">We aim at stressing correctness and fault-tolerance.</p></list-item><list-item hwp:id="list-item-8"><p hwp:id="p-17">Since system-administration (or “DevOps”) are often missing or under-staffed/underfunded; we need to make deployment in adverse conditions as easy and flexible as possible.</p></list-item><list-item hwp:id="list-item-9"><p hwp:id="p-18">We want to maximize open/free-for-anything availability of software and data [<xref ref-type="bibr" rid="c19" hwp:id="xref-ref-19-1" hwp:rel-id="ref-19">19</xref>].</p></list-item></list></p><p hwp:id="p-19">Many of the above guide-lines lead us to use a <italic toggle="yes">saner-than-usual</italic> implementation language: OCaml [<xref ref-type="bibr" rid="c20" hwp:id="xref-ref-20-1" hwp:rel-id="ref-20">20</xref>]. The above choices may not be “traditional,” we discuss them in the following section.</p></sec><sec id="s1c" hwp:id="sec-4"><title hwp:id="title-5">Quick Digression: Types (and OCaml)</title><p hwp:id="p-20">Within bioinformatics tools as with most low quality general purpose software, we observe a lot of overestimation of programmers’ abilities to produce well designed and carefully implemented programs. Indeed, most dismiss or misunderstand the importance of <italic toggle="yes">types</italic>, we see this through the use of popular but <italic toggle="yes">unityped</italic> (as in “one type”) or unsound languages like Python, Perl, Ruby, or C++.</p><p hwp:id="p-21">Type theory is an expression of constructive logic which is, or should be, to software engineering what calculus and physics are to civil engineering. Types are not only a great way of thinking about (and modeling) programming problems; types are useful logical properties describing (pieces of) a program. Checking types is actually proving (in the mathematical sense) that the logical properties are consistent over the whole program or library. Removing type checking (through weak or dynamic typing) is equivalent to trusting the programmer for checking these logical properties themselves. This means trusting a <italic toggle="yes">homo sapiens</italic>, for being consistently and carefully logical all the time; which is absurd and very ill-advised [<xref ref-type="bibr" rid="c21" hwp:id="xref-ref-21-1" hwp:rel-id="ref-21">21</xref>]. We see expensive consequences of this irresponsible behavior for instance when the security community exhibits exploitable software flaws, recent findings are even brought to the attention of bioinformaticians [<xref ref-type="bibr" rid="c22" hwp:id="xref-ref-22-1" hwp:rel-id="ref-22">22</xref>]: while the article suffers from sensationalism, it highlights the need to be sure that any piece of software behaves correctly for all possible inputs, including maliciously crafted ones. Software testing, no matter how thorough, only gives confidence on tiny subsets of possible program executions. Of course, while the software safety research community has made immense advances, as of 2017, fully formalized and proved software is still out of reach for large-scale, open-source, and under-funded software engineering. Testing remains important, but it has to be in addition to static and “as strong as possible” typing.</p><p hwp:id="p-22">Given the above considerations, actual choices for implementation were limited, but OCaml stood out. It is equipped with a very advanced but <italic toggle="yes">practical</italic> type-system [<xref ref-type="bibr" rid="c20" hwp:id="xref-ref-20-2" hwp:rel-id="ref-20">20</xref>], [<xref ref-type="bibr" rid="c23" hwp:id="xref-ref-23-1" hwp:rel-id="ref-23">23</xref>]. The system was carefully designed with speed <italic toggle="yes">and</italic> correctness in mind and offers a lot of flexibility. The community includes very successful industrial users for whom safety and security matter [<xref ref-type="bibr" rid="c24" hwp:id="xref-ref-24-1" hwp:rel-id="ref-24">24</xref>], [<xref ref-type="bibr" rid="c25" hwp:id="xref-ref-25-1" hwp:rel-id="ref-25">25</xref>], and has contributed great tooling. OCaml is also more future-proof; as the next generation of safer programming languages and tools, like Coq [<xref ref-type="bibr" rid="c26" hwp:id="xref-ref-26-1" hwp:rel-id="ref-26">26</xref>] or F* [<xref ref-type="bibr" rid="c27" hwp:id="xref-ref-27-1" hwp:rel-id="ref-27">27</xref>], are often written and/or extract code to OCaml.</p></sec><sec id="s1d" hwp:id="sec-5"><title hwp:id="title-6">Next In This Paper</title><p hwp:id="p-23">We are now going to see deeper into the proposed systems, the remaining of this paper is organized as follows. We start at a lower-level (i.e. close to the computing environment) with Ketrew and Coclobas, our infrastructure for workflow automation, in section. Then, we climb the abstraction hierarchy through Biokepi, our library for building bioinformatics pipelines, up-to it’s EDSL based on recent computer-science research (section). In section, we quickly present an open-source and quite feature-rich use case: Epidisco. We finish with related (section) and future (section) work.</p></sec></sec><sec id="s2" hwp:id="sec-6"><title hwp:id="title-7">Ketrew and Lower-Level Considerations</title><p hwp:id="p-24"><italic toggle="yes">Ketrew</italic> stands for “Keep Track of Experimental Workflows,” we detail first its low-level design and implementation, and then its pipeline-construction API. We end this section with <italic toggle="yes">Coclobas</italic> which stands for “Configurable Cloudy Batch Scheduler.”</p><sec id="s2a" hwp:id="sec-7"><title hwp:id="title-8">The Ketrew System</title><p hwp:id="p-25">The initial design and first versions of Ketrew had two modes of operation: a “client-server” — default/normal — mode, and a “standalone” one. The standalone mode has been dropped since; it was meant to allow users to quickly setup and try running workflows by not having any server or daemon (Ketrew itself or a database) in place, and doing everything with a single Unix process. This <italic toggle="yes">standalone</italic> behavior exists in other workflow automation tools (it is the default for utilities similar to make or bigger systems like Luigi [<xref ref-type="bibr" rid="c28" hwp:id="xref-ref-28-1" hwp:rel-id="ref-28">28</xref>]). We dropped its support for various reasons, among them: i) the interactive web-based user interface (a.k.a. “WebUI”) has proven very useful especially for beginners and it can only be used when a server is running; ii) the operation of the standalone mode was confusing users regardig what they can or cannot do “concurrently” (it was based on the <italic toggle="yes">Sqlite 3</italic> database which does not fully support inter-process concurrency [<xref ref-type="bibr" rid="c29" hwp:id="xref-ref-29-1" hwp:rel-id="ref-29">29</xref>]). Instead we have insisting on making the client-server mode as easy and flexible to setup as possible [<xref ref-type="bibr" rid="c30" hwp:id="xref-ref-30-1" hwp:rel-id="ref-30">30</xref>].</p><p hwp:id="p-26">The Ketrew application is hence one simple Unix binary which contains the service logic (called “the engine”), a web-server, a command line interface (CLI), packed together with the Javascript code (compiled from OCaml thanks to <monospace>js_of_ocaml</monospace> [<xref ref-type="bibr" rid="c31" hwp:id="xref-ref-31-1" hwp:rel-id="ref-31">31</xref>]) and the style-sheet (CSS) of the WebUI. The system can be installed and used on any Linux system or on Mac OSX and, if needed, everything can be done as a regular Unix user. The server-side component is designed so that the application can be abruptly stopped or become offline while workflows are running, and restarted seamlessly in the right “state.” The HTTP API and the WebUI can be served over plain HTTP or with TLS (both the classical OpenSSL library, and the safer nqsb-TLS [<xref ref-type="bibr" rid="c32" hwp:id="xref-ref-32-1" hwp:rel-id="ref-32">32</xref>] can be used). There is also a semi-interactive text-based user interface which communicates with the web-server using the same protocol as the WebUI; users usually prefer the latter but the TextUI is for example useful when institutional firewalls or virtual-private-networks (VPN) get on the way of regular web-browsing.</p><p hwp:id="p-27">Usually, scientific computing clusters run a system component to abstract the setup and monitoring of programs for regular users; this is known as a <italic toggle="yes">batch/job scheduler</italic>. A workflow engine needs to interface with these systems to actually run commands and scripts on the targeted infrastructure. Ketrew adopts a plugin architecture for the implementation of the communication with these system called “backends.” Any user can write new backends and load them with the system (and if deployment of dynamically loaded modules is a problem; one can easily create a Ketrew application binary statically linked their plugins). We ship various backends: Platform LSF [<xref ref-type="bibr" rid="c33" hwp:id="xref-ref-33-1" hwp:rel-id="ref-33">33</xref>], PBS/Torque [<xref ref-type="bibr" rid="c34" hwp:id="xref-ref-34-1" hwp:rel-id="ref-34">34</xref>], YARN [<xref ref-type="bibr" rid="c35" hwp:id="xref-ref-35-1" hwp:rel-id="ref-35">35</xref>] (with which we can run both Hadoop applications like Spark applications or regular shell-based jobs), and a “daemonization” plugin capable using two methods (one for more “standard” Unix hosts based on the nohup and setsid programs, and one based on generated Python scripts — for Mac OSX hosts).</p><p hwp:id="p-28">At a pipeline-level, the choice of backend is attached to lowest-level jobs; each step can choose the plugin it uses. Unlike many other workflow-engines where the backend is set at a global level, cross-infrastructure workflows are hence easy to write and setup (e.g. replicating data from one cluster to another, or running some steps outside of the scheduler for speed-up).</p><p hwp:id="p-29">Ketrew’s engine (and its plugins) can communicate with the infrastructure directly on the current host (as simple system calls) or over SSH connections. Indeed, users can setup password-less SSH access in order to, for instance, run Ketrew on their laptop and manage workflows on one or more university clusters, even when they cannot have a long-running server on their institution’s infrastructure.</p><p hwp:id="p-30">As a <italic toggle="yes">failed</italic> experiment, we also built with a system for users to setup so-called “control master” reusable SSH connections from a shared Ketrew server. Even though OpenSSH is specifically designed to make it hard for users to “script” the client, we managed to get a prototype working: a Web interface to setup SSH connections (working even with password-only or 2-factor authentication schemes). We then hit multiple unexpected failures from OpenSSH, it proved not reliable enough for heavy duty use of the system (there are hard limitations on connection multiplexing [<xref ref-type="bibr" rid="c36" hwp:id="xref-ref-36-1" hwp:rel-id="ref-36">36</xref>]).</p></sec><sec id="s2b" hwp:id="sec-8"><title hwp:id="title-9">Ketrew’s EDSL</title><p hwp:id="p-31">We provide a very flexible EDSL-based API to construct workflows. The EDSL is provided as a simple and pure OCaml library. All the constructs of the language are used to build an immutable graph data-structure. This helps the users organize their (partial) workflows in a modular way and with their own domain-specific abstractions. The resulting functions and libraries are then nicely composable and easier to reason about.</p><p hwp:id="p-32">The submission of the workflow to the server is done with one simple function that serializes the resulting data-structure to a JSON object [<xref ref-type="bibr" rid="c37" hwp:id="xref-ref-37-1" hwp:rel-id="ref-37">37</xref>] and sends it to the server over HTTP(S). The Ketrew engine performs a node equivalence search before starting any jobs; this means that unless explicitly disabled, nodes that attempt to produce the same result will be “merged.”</p><p hwp:id="p-33">On a semantic level, the API of the EDSL is designed to help the user build a graph with three kinds of edges. The nodes contain most of the information (how to run the step, how to check whether it is already done or successful, and much more meta-data) and the edges are either <italic toggle="yes">dependencies</italic> (the most common way of constructing workflows) or mechanisms to react to success or failure of the nodes (for instance, we can define “clean-up” workflows that are activated when a step fails).</p><p hwp:id="p-34">Workflow nodes are meant to ensure logical “conditions.” These are expressed thanks to a (much smaller) EDSL of boolean expressions whose base terms are checks on precise system conditions (e.g. that a given file or a file-tree structure exists, or that a shell-command returns a given code, etc.). As we started using the first iteration of the EDSL for larger scale pipelines, the importance of the object(s) of these condition-expressions proved to be bigger than anticipated. Hence, in the second (and current) major version of the EDSL, we use a type-parameter to pass the products of the nodes around the programs in a strongly typed way (cf. Parametric Polymorphism [<xref ref-type="bibr" rid="c38" hwp:id="xref-ref-38-1" hwp:rel-id="ref-38">38</xref>]). A “product” is then an abstraction of what a workflow node ensures. Using different type-parameters for different kinds of workflow-nodes helps us make senseless code impossible to express; those constructs are extensible by user-code. For instance, within Biokepi, we cannot use a node which produces Bam files in a place where we expect VCF files; those products are defined in the library as they are bioinformatics-specific. Differently typed nodes, can still be be packed together, e.g. as a list of dependencies, thanks to existential types [<xref ref-type="bibr" rid="c39" hwp:id="xref-ref-39-1" hwp:rel-id="ref-39">39</xref>]; they become “edges” in the pipeline graph.</p></sec><sec id="s2c" hwp:id="sec-9"><title hwp:id="title-10">The Coclobas Backend</title><p hwp:id="p-35">In practice, our team has run Ketrew workflows first on a Plaform LSF cluster, and then on a YARN-based Hadoop cluster, until moving to Google Cloud’s infrastructure. We consider relevant and interesting to report on this experience.</p><p hwp:id="p-36">We first were guided by the goal of utilizing the infrastructure as fast as possible. Hence we wanted to quickly set-up/update/destroy familiar PBS/Torque [<xref ref-type="bibr" rid="c34" hwp:id="xref-ref-34-2" hwp:rel-id="ref-34">34</xref>] clusters with shared file-systems. As we tried and were disapointed with the reliability of existing solutions (e.g. Elasticluster [<xref ref-type="bibr" rid="c40" hwp:id="xref-ref-40-1" hwp:rel-id="ref-40">40</xref>]), we decided to use Ketrew workflows for the task (process often known as “dogfooding,” i.e. using our own product to stress-test it). The resulting project was called Stratocumulus [<xref ref-type="bibr" rid="c41" hwp:id="xref-ref-41-1" hwp:rel-id="ref-41">41</xref>]; configurable workflows which could set up shared computing infrastructure on the Google Compute Engine.</p><p hwp:id="p-37">The above project got us and our users to very quickly get started leveraging the infrastructure but it was not cost efficient. Indeed, building “classical” computing clusters on cloud infrastructure most often means keeping compute nodes up and running even when there is no work to do. Manual update or destruction from users when they are done cannot always be counted on; for instance, we observe that when a workflow finishes on Friday night, users will not collect their results and clean-up their resources until Monday morning. This lead us to investigate ways of using auto-scaling capabilities provided by some Google Cloud components: we created a new job scheduler, Coclobas, accepting jobs over HTTP and scheduling them on elastic Kubernetes [<xref ref-type="bibr" rid="c13" hwp:id="xref-ref-13-2" hwp:rel-id="ref-13">13</xref>] clusters (as deployed by the <italic toggle="yes">Google Container Engine</italic> — GKE). Later, the project was extended to schedule container-based jobs within <italic toggle="yes">AWS-Batch</italic> and on local Docker installations. Note, that while the main client is the Ketrew plugin, one can submit jobs to Coclobas without Ketrew. Coclobas also takes care of working around various idiosyncrasies of Kubernetes: it keeps track of the logs (which Kubernetes can easily loose), and, it throttles submissions and retires after failures to limit the impact of overloading of the Kubernetes server. The API also simplifies like the use of the “secrets” feature to pass custom information to containers (e.g. a script to run), or the setup of arbitrary NFS mounts. Coclobas can use an existing server or manage a fresh one using the Google Cloud client.</p></sec></sec><sec id="s3" hwp:id="sec-10"><title hwp:id="title-11">Abstractions in Biokepi</title><p hwp:id="p-38">Ketrew and Coclobas are also used for workloads not related to bioinformatics (like system administration [<xref ref-type="bibr" rid="c41" hwp:id="xref-ref-41-2" hwp:rel-id="ref-41">41</xref>], building documentation, etc.) but the main strength of Ketrew’s API is being an embedded DSL in a powerful language like OCaml. This allows users to build modular abstractions that fit their application domain using proper software engineering. Our abstractions for bioinformatics, i.e. the Biokepi library, are detailed in this section.</p><p hwp:id="p-39">Bioinformatics workflows in Biokepi are organized in two layers: the lower-level layer consists in a catalog of bioinformatics tools wrapped as Ketrew workflow nodes. The second layer is the higher-level <monospace>Pipeline_edsl</monospace> module; it is an embedded language to write workflows very concisely with help from precise types.</p><sec id="s3a" hwp:id="sec-11"><title hwp:id="title-12">The “Tools” API</title><p hwp:id="p-40">At this lower-level, we use already proper types to give stronger semantics to the tools’ parameters, and add constraints and invariants. We have for instance abstractions of FASTQ [<xref ref-type="bibr" rid="c42" hwp:id="xref-ref-42-1" hwp:rel-id="ref-42">42</xref>] single-end or paired-end sets of files, or Bams [<xref ref-type="bibr" rid="c8" hwp:id="xref-ref-8-2" hwp:rel-id="ref-8">8</xref>] recording their reference genome their sorting status (coordinate, read name, etc.). We also use these modules to encode our slowly acquired knowledge about the idiosyncrasies of biomedical software. Having a proper programming language also simplifies the implementation of decently complex performance improvements like automatically generating <italic toggle="yes">“scatter-gather”</italic> parallelizations of some computations or replacing partial of workflows with “chained” shell pipes.</p><p hwp:id="p-41">The workflow nodes are designed to be able to make everything <italic toggle="yes">“restartable”</italic> and leverage Ketrew’s semantics to share intermediate results as much as possible. All of this is built around the “Machine” abstraction, a module defining the computing infrastructure and environment (bioinformatics software and data) to simplify the implementation of very portable and configurable workflows. This environment can take care of most software installations, but it is easily configurable; for example one can leverage software already present on the user’s infrastructure. Similarly one uses the abstraction to configure the access to “reference-data,” by default through downloads from public sources.</p></sec><sec id="s3b" hwp:id="sec-12"><title hwp:id="title-13">The Typed-Tagless Final Interpreter</title><p hwp:id="p-42">The second layer is the higher-level <monospace>Pipeline_edsl</monospace> module; it is an embedded language to write workflows very concisely with help from precise types. The EDSL hides out workflow steps that we consider “boilerplate” (like indexing and sorting Bam files, preprocessing reference genomes, locally installing software, etc.).</p><p hwp:id="p-43">The first version of the EDSL that we implemented was based on a generalized algebraic data type (or GADTs, [<xref ref-type="bibr" rid="c43" hwp:id="xref-ref-43-1" hwp:rel-id="ref-43">43</xref>]). The module (that we maintain for backwards compatibility for now) proved very practical for end users as long as they did not want to extend the language without modifying Biokepi itself. Moreover the GADT-based implementation lacked modularity and could have grown to proportions difficult to maintain. Therefore we decided to rewrite this component to be based on recent research on <italic toggle="yes">typed tagless-final interpreters</italic> [<xref ref-type="bibr" rid="c18" hwp:id="xref-ref-18-2" hwp:rel-id="ref-18">18</xref>], [<xref ref-type="bibr" rid="c44" hwp:id="xref-ref-44-1" hwp:rel-id="ref-44">44</xref>]. While being slightly more complicated to approach the new implementation provides extensibility while being well-typed. Examples of extensions are detailed in section.</p><p hwp:id="p-44">The pipelines written using Biokepi’s high-level EDSL can be compiled to various backends. Of course the main compilation target are Ketrew worklow nodes (using the lower-level modules of Biokepi), but we can also generate high-level graph descriptions (i.e. at the level of bioinformatic-tools/semantics) using the “dot” language from the Graphviz project (cf. example in <xref rid="fig2" ref-type="fig" hwp:id="xref-fig-2-1" hwp:rel-id="F2">figure 2</xref>). There is also a compiler to JSON files allowing implementation-independent traceability (and potential reproducibility) of the workflows (human-and-computer-readable exact descriptions of the whole pipeline). Biokepi still allows to “break” the abstraction barrier and write workflows with lower-level functions manipulating Ketrew workflow-nodes through extensions of the EDSL and users can write their own compilers/interpreters.</p><p hwp:id="p-45">Because of our main application domain, the tools avaialable in Biokepi are for now mostly focused on cancer genomic pipelines but we welcome contributions from any sub-field of bioinformatics. The following section presents Epidisco a configurable pipeline based on Biokepi’s EDSL.</p></sec></sec><sec id="s4" hwp:id="sec-13"><title hwp:id="title-14">Use Case of Epidisco and the PGV Trial</title><p hwp:id="p-46">In the context of our participation in a Personalized Genomic Vaccine clinical trial (<ext-link l:rel="related" l:ref-type="CLINTRIALGOV" l:ref="NCT02721043" ext-link-type="clintrialgov" xlink:href="NCT02721043" hwp:id="ext-link-4">NCT02721043</ext-link> [<xref ref-type="bibr" rid="c16" hwp:id="xref-ref-16-2" hwp:rel-id="ref-16">16</xref>]), we have developed Epidisco, a family of pipelines for selecting vaccine peptides targeting cancer mutations. Epidisco is a Biokepi pipeline that produces ranked peptides from the outputs of the sequencer (by default FASTQ data, but we can also start from BAMs and realign them automatically); it is designed to run with an arbitrary number of normal, tumor, and tumor-RNA samples, plus optional HLA-typing information (if not provided the pipeline computes it) [<xref ref-type="bibr" rid="c16" hwp:id="xref-ref-16-3" hwp:rel-id="ref-16">16</xref>], [<xref ref-type="bibr" rid="c17" hwp:id="xref-ref-17-2" hwp:rel-id="ref-17">17</xref>], see <xref rid="fig1" ref-type="fig" hwp:id="xref-fig-1-1" hwp:rel-id="F1">figure 1</xref>. The pipeline produces an HTML report that we can serve to our collaborators together with the results.</p><fig id="fig1" position="float" orientation="portrait" fig-type="figure" hwp:id="F1" hwp:rev-id="xref-fig-1-1"><object-id pub-id-type="other" hwp:sub-type="pisa">biorxiv;213884v1/FIG1</object-id><object-id pub-id-type="other" hwp:sub-type="slug">F1</object-id><object-id pub-id-type="publisher-id">fig1</object-id><label>Figure 1:</label><caption hwp:id="caption-1"><title hwp:id="title-15">The PGV/Epidisco Pipeline.</title><p hwp:id="p-47">High-level diagram of the pipeline that we currently have running in production.</p></caption><graphic xlink:href="213884_fig1" position="float" orientation="portrait" hwp:id="graphic-1"/></fig><fig id="fig2" position="float" orientation="portrait" fig-type="figure" hwp:id="F2" hwp:rev-id="xref-fig-2-1"><object-id pub-id-type="other" hwp:sub-type="pisa">biorxiv;213884v1/FIG2</object-id><object-id pub-id-type="other" hwp:sub-type="slug">F2</object-id><object-id pub-id-type="publisher-id">fig2</object-id><label>Figure 2:</label><caption hwp:id="caption-2"><title hwp:id="title-16">Biokepi-EDSL Example Pipeline.</title><p hwp:id="p-48">Excerpt from the Graphvizbased rendering of a pipeline which uses Biokepi’s EDSL.</p></caption><graphic xlink:href="213884_fig2" position="float" orientation="portrait" hwp:id="graphic-2"/></fig><p hwp:id="p-49">Epidisco fully utilizes the flexibility provided by the Biokepi EDSL. We extend it with custom constructs that are specific to the particular application (like the “saving” of intermediate results or construction of the final report web-page). The big and growing amount of options that can modify the pipeline enables us to maintain a “production” pipeline while allowing various experimentations; the high-level EDSL makes the code still reasonably readable and easy to understand. Moreover using proper software engineering at the pipeline-level makes perilous changes much easier; for instance, one can see that the logic used to experiment-on and implement the fix in the pull-request <monospace>#119</monospace> [<xref ref-type="bibr" rid="c45" hwp:id="xref-ref-45-1" hwp:rel-id="ref-45">45</xref>] would have been much harder to express in a custom workflow DSL or with a weak programming language.</p></sec><sec id="s5" hwp:id="sec-14"><title hwp:id="title-17">Related Work</title><p hwp:id="p-50">The literature and the open-source world contain many workflow engines and computational pipeline tools. Some of them are biology-specific specific and some are more generic. Before starting working on this family of projects we reviewed and tried a few (including commercial software, although inadmissible for security and long-term dependence reasons). None were fully satisfying although we borrowed ideas and lessons from many of them. Note that Spjuth et al. previously published a biased but relatively thorough review paper on the matter [<xref ref-type="bibr" rid="c46" hwp:id="xref-ref-46-1" hwp:rel-id="ref-46">46</xref>].</p><p hwp:id="p-51">Given the diversity of the analyses and of the software environments, most work-flow management tools that aim at specializing (in bioinformatics or other) end up not being flexible enough and having to implement many edges cases one by one. A good example is the famous Galaxy [<xref ref-type="bibr" rid="c47" hwp:id="xref-ref-47-1" hwp:rel-id="ref-47">47</xref>], which is quite inflexible while being very thorough has required many human-years of effort to be implemented and by the time we tested still didn’t present the reliability and flexibility that a small fast-paced team requires. QuickNGS [<xref ref-type="bibr" rid="c48" hwp:id="xref-ref-48-1" hwp:rel-id="ref-48">48</xref>] is actually a LIMS (Laboratory Information Management System) that happens to implement a simple work-flow engine to run a predefined set of tools; this can be useful for core facilities that follow the same overall functioning. ExScalibur [<xref ref-type="bibr" rid="c49" hwp:id="xref-ref-49-1" hwp:rel-id="ref-49">49</xref>] is a set of automated pipelines for whole exome data analysis, that is implemented in the custom DSL “BigDataScript” with very little abstraction power. COSMOS [<xref ref-type="bibr" rid="c50" hwp:id="xref-ref-50-1" hwp:rel-id="ref-50">50</xref>] at least uses an EDSL, within Python, but its model restricted to map-reduce-like workloads (direct acyclic graphs of shell commands producing files). Azkaban [<xref ref-type="bibr" rid="c51" hwp:id="xref-ref-51-1" hwp:rel-id="ref-51">51</xref>] is a heavy-weight workflow manager used for <italic toggle="yes">“several years at LinkedIn.”</italic> Its design is specialized for quick-running Hadoop pipelines although extensible through Java plugins; workflows are defined very awkwardly as key-value configuration files. Still extremely specialized, Makeflow [<xref ref-type="bibr" rid="c52" hwp:id="xref-ref-52-1" hwp:rel-id="ref-52">52</xref>] is actually a set of tools which provide abstractions for particular computational patterns (e.g. “Map-Reduce” is such a kind of abstraction). GXP Make [<xref ref-type="bibr" rid="c53" hwp:id="xref-ref-53-1" hwp:rel-id="ref-53">53</xref>] (based on “GXP Shell” [<xref ref-type="bibr" rid="c54" hwp:id="xref-ref-54-1" hwp:rel-id="ref-54">54</xref>]) is a fun (ab)use of GNU-make as it provides a shell mksh that intercepts make’s calls to run distributed workflows. Biomake [<xref ref-type="bibr" rid="c55" hwp:id="xref-ref-55-1" hwp:rel-id="ref-55">55</xref>] is another extension of the venerable make tool by making it more programmable thanks a Prolog execution engine. Swift [<xref ref-type="bibr" rid="c56" hwp:id="xref-ref-56-1" hwp:rel-id="ref-56">56</xref>] is a C-styled custom, hence limited, language used for encoding Makefile-like dependency graphs which can be run on various platforms. Taverna [<xref ref-type="bibr" rid="c57" hwp:id="xref-ref-57-1" hwp:rel-id="ref-57">57</xref>], now an Apache Incubator project, attempt to be a “Graphical Programming Environment” to define workflows and share them through My-Experiment.org project.</p><p hwp:id="p-52">Other tools, have embraced the “Embedded Domain Specific Language” bandwagon but most often fell short on the reliability and expressivity aspects. For instance, BPipe [<xref ref-type="bibr" rid="c58" hwp:id="xref-ref-58-1" hwp:rel-id="ref-58">58</xref>] while claiming no need for programming experience, is also an awkward EDSL within Groovy, an unacceptable Python-like language for the Java Virtual Machine. Snakemake [<xref ref-type="bibr" rid="c59" hwp:id="xref-ref-59-1" hwp:rel-id="ref-59">59</xref>], Ruffus [<xref ref-type="bibr" rid="c60" hwp:id="xref-ref-60-1" hwp:rel-id="ref-60">60</xref>], and Luigi [<xref ref-type="bibr" rid="c28" hwp:id="xref-ref-28-2" hwp:rel-id="ref-28">28</xref>], are Python EDSLs, the latest being most advanced one, while quite Hadoop-centric. Similarly, Pwrake [<xref ref-type="bibr" rid="c61" hwp:id="xref-ref-61-1" hwp:rel-id="ref-61">61</xref>] is an extension of Rake (Ruby EDSL-ish build system) to run “builds” in parallel. Queue (part of the GATK [<xref ref-type="bibr" rid="c62" hwp:id="xref-ref-62-1" hwp:rel-id="ref-62">62</xref>]) on the other hand is a Scala-based library; the extreme object-orientation brings the verbosity of Java while not trying to improve on the type safety.</p></sec><sec id="s6" hwp:id="sec-15"><title hwp:id="title-18">Future Work</title><p hwp:id="p-53">Like a almost any open-source family of projects, more future work can be envisioned than humanly achievable.</p><p hwp:id="p-54">One the lower-level aspects we are actively working on extending the catalog of backends that Ketrew can utilize: after the Google Container Engine and the “Local Docker” setup, we are now improving support for Amazon AWS.</p><p hwp:id="p-55">For the workflow engine itself, after a few recent performance and scalability improvements, the main point we want to improve is now the WebUI. We want to make it extremely easy to build custom “job submission interfaces” from a high-level and embed them in Ketrew’s WebUI. Multi-scale graphical visualization of large workflow graphs is also both a very appealing feature and an interesting, surprisingly “open,” problem to work on.</p><p hwp:id="p-56">Ketrew’s API for writing workflows has proved to be very practical and scalable but the actual shells commands run by workflow-nodes are still mostly untyped strings, the module provides a few higher-level constructs but we want more “typed programming” abilities. This is why we have been developing Genspio [<xref ref-type="bibr" rid="c63" hwp:id="xref-ref-63-1" hwp:rel-id="ref-63">63</xref>], a <italic toggle="yes">typed</italic> EDSL to generate POSIX shells scripts; we avoid the shell’s “escaping hell” and provide a more composable API. Genspio has been recently released, and stress-tested in a systems-administration context; the next step being its integration into Ketrew.</p><p hwp:id="p-57">At the level of Biokepi, in addition to the expansion of the “tool catalog,” it may be interesting to add more <italic toggle="yes">formal</italic> information into the types of the constructs of the EDSL (e.g. whole genome or exome, species, RNA/DNA). Of course, we also want to explore, at any level of the system, the progressive introduction of more precise and stronger formal guarantees through dependently typed approaches [<xref ref-type="bibr" rid="c26" hwp:id="xref-ref-26-2" hwp:rel-id="ref-26">26</xref>].</p></sec></body><back><ref-list hwp:id="ref-list-1"><title hwp:id="title-19">References</title><ref id="c1" hwp:id="ref-1" hwp:rev-id="xref-ref-1-1"><label>[1]</label><citation publication-type="journal" citation-type="journal" ref:id="213884v1.1" ref:linkable="yes" ref:use-reference-as-is="yes" hwp:id="citation-1"><string-name name-style="western" hwp:sortable="Hoare C."><given-names>C.</given-names> <surname>Hoare</surname></string-name>, <string-name name-style="western" hwp:sortable="Misra J."><given-names>J.</given-names> <surname>Misra</surname></string-name>, <string-name name-style="western" hwp:sortable="Leavens G. T."><given-names>G. T.</given-names> <surname>Leavens</surname></string-name>, and <string-name name-style="western" hwp:sortable="Shankar N."><given-names>N.</given-names> <surname>Shankar</surname></string-name>, “<article-title hwp:id="article-title-2">The verified software initiative: A manifesto</article-title>,” <source hwp:id="source-1">ACM Comput. Surv.</source>, vol. <volume>41</volume>, no. <issue>4</issue>, pp. <fpage>22:1</fpage>–<lpage>22:8</lpage>, <month>Oct</month>. <year>2009</year>.</citation></ref><ref id="c2" hwp:id="ref-2" hwp:rev-id="xref-ref-2-1"><label>[2]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.2" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-2">“<article-title hwp:id="article-title-3">The common vulnerabilities and exposures project</article-title>.” <ext-link l:rel="related" l:ref-type="uri" l:ref="http://cve.mitre.org/" ext-link-type="uri" xlink:href="http://cve.mitre.org/" hwp:id="ext-link-5">http://cve.mitre.org/</ext-link>, <year>2016</year>.</citation></ref><ref id="c3" hwp:id="ref-3" hwp:rev-id="xref-ref-3-1"><label>[3]</label><citation publication-type="journal" citation-type="journal" ref:id="213884v1.3" ref:linkable="yes" ref:use-reference-as-is="yes" hwp:id="citation-3"><string-name name-style="western" hwp:sortable="Leveson N. G."><given-names>N. G.</given-names> <surname>Leveson</surname></string-name> and <string-name name-style="western" hwp:sortable="Turner C. S."><given-names>C. S.</given-names> <surname>Turner</surname></string-name>, “<article-title hwp:id="article-title-4">An investigation of the therac-25 accidents</article-title>,” <source hwp:id="source-2">Computer</source>, vol. <volume>26</volume>, no. <issue>7</issue>, pp. <fpage>18</fpage>–<lpage>41</lpage>, Jul. <year>1993</year>.</citation></ref><ref id="c4" hwp:id="ref-4" hwp:rev-id="xref-ref-4-1"><label>[4]</label><citation publication-type="journal" citation-type="journal" ref:id="213884v1.4" ref:linkable="yes" ref:use-reference-as-is="yes" hwp:id="citation-4"><string-name name-style="western" hwp:sortable="Zhivich M."><given-names>M.</given-names> <surname>Zhivich</surname></string-name> and <string-name name-style="western" hwp:sortable="Cunningham R. K."><given-names>R. K.</given-names> <surname>Cunningham</surname></string-name>, “<article-title hwp:id="article-title-5">The real cost of software errors</article-title>,” <source hwp:id="source-3">IEEE Security &amp; Privacy</source>, vol. <volume>7</volume>, no. undefined, pp. <fpage>87</fpage>–<lpage>90</lpage>, <year>2009</year>.</citation></ref><ref id="c5" hwp:id="ref-5" hwp:rev-id="xref-ref-5-1"><label>[5]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.5" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-5">“<article-title hwp:id="article-title-6">Project <monospace>ypriverol/github-paper</monospace>, issue #129</article-title>.” <ext-link l:rel="related" l:ref-type="uri" l:ref="https://github.com/ypriverol/github-paper/issues/129" ext-link-type="uri" xlink:href="https://github.com/ypriverol/github-paper/issues/129" hwp:id="ext-link-6">https://github.com/ypriverol/github-paper/issues/129</ext-link>, <year>2016</year>.</citation></ref><ref id="c6" hwp:id="ref-6" hwp:rev-id="xref-ref-6-1"><label>[6]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.6" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-6">“<article-title hwp:id="article-title-7">Project <monospace>genenetwork/guix-bioinformatics</monospace></article-title>.” <ext-link l:rel="related" l:ref-type="uri" l:ref="https://github.com/genenetwork/guix-bioinformatics" ext-link-type="uri" xlink:href="https://github.com/genenetwork/guix-bioinformatics" hwp:id="ext-link-7">https://github.com/genenetwork/guix-bioinformatics</ext-link>, <year>2016</year>.</citation></ref><ref id="c7" hwp:id="ref-7" hwp:rev-id="xref-ref-7-1"><label>[7]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.7" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-7">“<article-title hwp:id="article-title-8">Hammerlab work description</article-title>.” <ext-link l:rel="related" l:ref-type="uri" l:ref="http://www.hammerlab.org/" ext-link-type="uri" xlink:href="http://www.hammerlab.org/" hwp:id="ext-link-8">http://www.hammerlab.org/</ext-link>, <year>2016</year>.</citation></ref><ref id="c8" hwp:id="ref-8" hwp:rev-id="xref-ref-8-1 xref-ref-8-2"><label>[8]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.8" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-8">“<article-title hwp:id="article-title-9">SAMBAM format informal specification</article-title>.” <ext-link l:rel="related" l:ref-type="uri" l:ref="https://samtools.github.io/hts-specs/" ext-link-type="uri" xlink:href="https://samtools.github.io/hts-specs/" hwp:id="ext-link-9">https://samtools.github.io/hts-specs/</ext-link>, <year>2016</year>.</citation></ref><ref id="c9" hwp:id="ref-9" hwp:rev-id="xref-ref-9-1"><label>[9]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.9" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-9">“<article-title hwp:id="article-title-10">Wikipedia: Variant call format</article-title>.” <ext-link l:rel="related" l:ref-type="uri" l:ref="https://en.wikipedia.org/wiki/Variant_Call_Format" ext-link-type="uri" xlink:href="https://en.wikipedia.org/wiki/Variant_Call_Format" hwp:id="ext-link-10">https://en.wikipedia.org/wiki/Variant_Call_Format</ext-link>, <year>2016</year>.</citation></ref><ref id="c10" hwp:id="ref-10" hwp:rev-id="xref-ref-10-1"><label>[10]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.10" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-10"><string-name name-style="western" hwp:sortable="Chapman B."><given-names>B.</given-names> <surname>Chapman</surname></string-name>, “<article-title hwp:id="article-title-11">Improving reproducibility and installation of genomic analysis pipelines with docker</article-title>.” <ext-link l:rel="related" l:ref-type="uri" l:ref="https://archive.is/OLXFw" ext-link-type="uri" xlink:href="https://archive.is/OLXFw" hwp:id="ext-link-11">https://archive.is/OLXFw</ext-link>, <year>2014</year>.</citation></ref><ref id="c11" hwp:id="ref-11" hwp:rev-id="xref-ref-11-1"><label>[11]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.11" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-11"><string-name name-style="western" hwp:sortable="Zwinkau A."><given-names>A.</given-names> <surname>Zwinkau</surname></string-name>, “<article-title hwp:id="article-title-12">Accidentally turing-complete</article-title>.” <ext-link l:rel="related" l:ref-type="uri" l:ref="http://beza1e1.tuxen.de/articles/accidentally_turing_complete.html" ext-link-type="uri" xlink:href="http://beza1e1.tuxen.de/articles/accidentally_turing_complete.html" hwp:id="ext-link-12">http://beza1e1.tuxen.de/articles/accidentally_turing_complete.html</ext-link>, <year>2016</year>.</citation></ref><ref id="c12" hwp:id="ref-12" hwp:rev-id="xref-ref-12-1"><label>[12]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.12" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-12">“<article-title hwp:id="article-title-13">Surprisingly turing-complete</article-title>.” <ext-link l:rel="related" l:ref-type="uri" l:ref="https://www.gwern.net/Turing-complete" ext-link-type="uri" xlink:href="https://www.gwern.net/Turing-complete" hwp:id="ext-link-13">https://www.gwern.net/Turing-complete</ext-link>, <year>2016</year>.</citation></ref><ref id="c13" hwp:id="ref-13" hwp:rev-id="xref-ref-13-1 xref-ref-13-2"><label>[13]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.13" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-13">“<article-title hwp:id="article-title-14">Wikipedia: Kubernetes</article-title>.” <ext-link l:rel="related" l:ref-type="uri" l:ref="https://en.wikipedia.org/wiki/Kubernetes" ext-link-type="uri" xlink:href="https://en.wikipedia.org/wiki/Kubernetes" hwp:id="ext-link-14">https://en.wikipedia.org/wiki/Kubernetes</ext-link>, <year>2016</year>.</citation></ref><ref id="c14" hwp:id="ref-14" hwp:rev-id="xref-ref-14-1"><label>[14]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.14" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-14">“<article-title hwp:id="article-title-15">The google container engine</article-title>.” <ext-link l:rel="related" l:ref-type="uri" l:ref="https://cloud.google.com/container-engine/" ext-link-type="uri" xlink:href="https://cloud.google.com/container-engine/" hwp:id="ext-link-15">https://cloud.google.com/container-engine/</ext-link>, <year>2016</year>.</citation></ref><ref id="c15" hwp:id="ref-15" hwp:rev-id="xref-ref-15-1"><label>[15]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.15" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-15">“<article-title hwp:id="article-title-16">AWS batch</article-title>.” <ext-link l:rel="related" l:ref-type="uri" l:ref="https://aws.amazon.com/batch/" ext-link-type="uri" xlink:href="https://aws.amazon.com/batch/" hwp:id="ext-link-16">https://aws.amazon.com/batch/</ext-link>, <year>2017</year>.</citation></ref><ref id="c16" hwp:id="ref-16" hwp:rev-id="xref-ref-16-1 xref-ref-16-2 xref-ref-16-3"><label>[16]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.16" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-16"><string-name name-style="western" hwp:sortable="Bhardwaj N."><given-names>N.</given-names> <surname>Bhardwaj</surname></string-name>, “<article-title hwp:id="article-title-17">Trial <ext-link l:rel="related" l:ref-type="CLINTRIALGOV" l:ref="nCT02721043" ext-link-type="clintrialgov" xlink:href="nCT02721043" hwp:id="ext-link-17">nCT02721043</ext-link>: Safety and immunogenicity of personalized genomic vaccine to treat solid tumors</article-title>.” <ext-link l:rel="related" l:ref-type="uri" l:ref="https://clinicaltrials.gov/ct2/show/NCT02721043" ext-link-type="uri" xlink:href="https://clinicaltrials.gov/ct2/show/NCT02721043" hwp:id="ext-link-18">https://clinicaltrials.gov/ct2/show/NCT02721043</ext-link>, <year>2016</year>.</citation></ref><ref id="c17" hwp:id="ref-17" hwp:rev-id="xref-ref-17-1 xref-ref-17-2"><label>[17]</label><citation publication-type="journal" citation-type="journal" ref:id="213884v1.17" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-17"><string-name name-style="western" hwp:sortable="Rubinsteyn A."><given-names>A.</given-names> <surname>Rubinsteyn</surname></string-name>, <string-name name-style="western" hwp:sortable="Kodysh J."><given-names>J.</given-names> <surname>Kodysh</surname></string-name>, <string-name name-style="western" hwp:sortable="Hodes I."><given-names>I.</given-names> <surname>Hodes</surname></string-name>, <string-name name-style="western" hwp:sortable="Mondet S."><given-names>S.</given-names> <surname>Mondet</surname></string-name>, <string-name name-style="western" hwp:sortable="Aksoy B. A."><given-names>B. A.</given-names> <surname>Aksoy</surname></string-name>, <string-name name-style="western" hwp:sortable="Finnigan J. P."><given-names>J. P.</given-names> <surname>Finnigan</surname></string-name>, <string-name name-style="western" hwp:sortable="Bhardwaj N."><given-names>N.</given-names> <surname>Bhardwaj</surname></string-name>, and <string-name name-style="western" hwp:sortable="Hammerbacher J."><given-names>J.</given-names> <surname>Hammerbacher</surname></string-name>, “<article-title hwp:id="article-title-18">Computational pipeline for the pGV-001 neoantigen vaccine trial</article-title>,” <source hwp:id="source-4">bioRxiv</source>, <year>2017</year>.</citation></ref><ref id="c18" hwp:id="ref-18" hwp:rev-id="xref-ref-18-1 xref-ref-18-2"><label>[18]</label><citation publication-type="journal" citation-type="journal" ref:id="213884v1.18" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-18"><string-name name-style="western" hwp:sortable="Suzuki K."><given-names>K.</given-names> <surname>Suzuki</surname></string-name>, <string-name name-style="western" hwp:sortable="Kiselyov O."><given-names>O.</given-names> <surname>Kiselyov</surname></string-name>, and <string-name name-style="western" hwp:sortable="Kameyama Y."><given-names>Y.</given-names> <surname>Kameyama</surname></string-name>, “<article-title hwp:id="article-title-19">Finally, safely-extensible and efficient language-integrated query</article-title>,” in <source hwp:id="source-5">Proceedings of the 2016 aCM sIGPLAN workshop on partial evaluation and program manipulation</source>, <year>2016</year>, pp. <fpage>37</fpage>–<lpage>48</lpage>.</citation></ref><ref id="c19" hwp:id="ref-19" hwp:rev-id="xref-ref-19-1"><label>[19]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.19" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-19">“<article-title hwp:id="article-title-20">Apache license 2.0</article-title>.” <ext-link l:rel="related" l:ref-type="uri" l:ref="http://apache.org/licenses/LICENSE-2.0" ext-link-type="uri" xlink:href="http://apache.org/licenses/LICENSE-2.0" hwp:id="ext-link-19">http://apache.org/licenses/LICENSE-2.0</ext-link>, <year>2016</year>.</citation></ref><ref id="c20" hwp:id="ref-20" hwp:rev-id="xref-ref-20-1 xref-ref-20-2"><label>[20]</label><citation publication-type="journal" citation-type="journal" ref:id="213884v1.20" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-20"><string-name name-style="western" hwp:sortable="Leroy X."><given-names>X.</given-names> <surname>Leroy</surname></string-name>, “<article-title hwp:id="article-title-21">A modular module system</article-title>,” <source hwp:id="source-6">J. Funct. Program.</source>, vol. <volume>10</volume>, no. <issue>3</issue>, pp. <fpage>269</fpage>–<lpage>303</lpage>, May 2000.</citation></ref><ref id="c21" hwp:id="ref-21" hwp:rev-id="xref-ref-21-1"><label>[21]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.21" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-21"><string-name name-style="western" hwp:sortable="Fisher K."><given-names>K.</given-names> <surname>Fisher</surname></string-name>, “<article-title hwp:id="article-title-22">High assurance cyber military systems proposers’ day presentation (dARPA)</article-title>.” <ext-link l:rel="related" l:ref-type="uri" l:ref="http://www.cyber.umd.edu/sites/default/files/documents/symposium/fisher-HACMS-MD.pdf" ext-link-type="uri" xlink:href="http://www.cyber.umd.edu/sites/default/files/documents/symposium/fisher-HACMS-MD.pdf" hwp:id="ext-link-20">http://www.cyber.umd.edu/sites/default/files/documents/symposium/fisher-HACMS-MD.pdf</ext-link>, <year>2013</year>.</citation></ref><ref id="c22" hwp:id="ref-22" hwp:rev-id="xref-ref-22-1"><label>[22]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.22" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-22">“<article-title hwp:id="article-title-23">Scientists hack a computer using dNA</article-title>.” MIT Technology Review <ext-link l:rel="related" l:ref-type="uri" l:ref="https://www.technologyreview.com/s/608596/scientists-hack-a-computer-using-dna/" ext-link-type="uri" xlink:href="https://www.technologyreview.com/s/608596/scientists-hack-a-computer-using-dna/" hwp:id="ext-link-21">https://www.technologyreview.com/s/608596/scientists-hack-a-computer-using-dna/</ext-link>, <year>2017</year>.</citation></ref><ref id="c23" hwp:id="ref-23" hwp:rev-id="xref-ref-23-1"><label>[23]</label><citation publication-type="journal" citation-type="journal" ref:id="213884v1.23" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-23"><string-name name-style="western" hwp:sortable="Garrigue J."><given-names>J.</given-names> <surname>Garrigue</surname></string-name>, “<article-title hwp:id="article-title-24">Code reuse through polymorphic variants</article-title>,” in <source hwp:id="source-7">In workshop on foundations of software engineering</source>, <year>2000</year>.</citation></ref><ref id="c24" hwp:id="ref-24" hwp:rev-id="xref-ref-24-1"><label>[24]</label><citation publication-type="journal" citation-type="journal" ref:id="213884v1.24" ref:linkable="yes" ref:use-reference-as-is="yes" hwp:id="citation-24"><string-name name-style="western" hwp:sortable="Minsky Y."><given-names>Y.</given-names> <surname>Minsky</surname></string-name>, “<article-title hwp:id="article-title-25">OCaml for the masses</article-title>,” <source hwp:id="source-8">Queue</source>, vol. <volume>9</volume>, no. <issue>9</issue>, pp. <fpage>44:40</fpage>–<lpage>44:49</lpage>, <month>Sep</month>. <year>2011</year>.</citation></ref><ref id="c25" hwp:id="ref-25" hwp:rev-id="xref-ref-25-1"><label>[25]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.25" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-25">“<article-title hwp:id="article-title-26">Companies using oCaml</article-title>.” <ext-link l:rel="related" l:ref-type="uri" l:ref="https://ocaml.org/learn/companies.html" ext-link-type="uri" xlink:href="https://ocaml.org/learn/companies.html" hwp:id="ext-link-22">https://ocaml.org/learn/companies.html</ext-link>, <year>2016</year>.</citation></ref><ref id="c26" hwp:id="ref-26" hwp:rev-id="xref-ref-26-1 xref-ref-26-2"><label>[26]</label><citation publication-type="other" citation-type="journal" ref:id="213884v1.26" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-26"><string-name name-style="western" hwp:sortable="Coq A."><given-names>A.</given-names> <surname>Coq</surname></string-name>, <source hwp:id="source-9">The coq proof assistant reference manual</source>. INRIA, <year>2015</year>.</citation></ref><ref id="c27" hwp:id="ref-27" hwp:rev-id="xref-ref-27-1"><label>[27]</label><citation publication-type="journal" citation-type="journal" ref:id="213884v1.27" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-27"><string-name name-style="western" hwp:sortable="Swamy N."><given-names>N.</given-names> <surname>Swamy</surname></string-name>, <string-name name-style="western" hwp:sortable="Hriţcu C."><given-names>C.</given-names> <surname>Hriţcu</surname></string-name>, <string-name name-style="western" hwp:sortable="Keller C."><given-names>C.</given-names> <surname>Keller</surname></string-name>, <string-name name-style="western" hwp:sortable="Rastogi A."><given-names>A.</given-names> <surname>Rastogi</surname></string-name>, <string-name name-style="western" hwp:sortable="Delignat-Lavaud A."><given-names>A.</given-names> <surname>Delignat-Lavaud</surname></string-name>, <string-name name-style="western" hwp:sortable="Forest S."><given-names>S.</given-names> <surname>Forest</surname></string-name>, <string-name name-style="western" hwp:sortable="Bhargavan K."><given-names>K.</given-names> <surname>Bhargavan</surname></string-name>, <string-name name-style="western" hwp:sortable="Fournet C."><given-names>C.</given-names> <surname>Fournet</surname></string-name>, <string-name name-style="western" hwp:sortable="Strub P.-Y."><given-names>P.-Y.</given-names> <surname>Strub</surname></string-name>, <string-name name-style="western" hwp:sortable="Kohlweiss M."><given-names>M.</given-names> <surname>Kohlweiss</surname></string-name>, <string-name name-style="western" hwp:sortable="Zinzindohoue J.-K."><given-names>J.-K.</given-names> <surname>Zinzindohoue</surname></string-name>, and <string-name name-style="western" hwp:sortable="Zanella-Béguelin S."><given-names>S.</given-names> <surname>Zanella-Béguelin</surname></string-name>, “<article-title hwp:id="article-title-27">Dependent types and multi-monadic effects in F*</article-title>,” in <source hwp:id="source-10">43nd aCM sIGPLAN-sIGACT symposium on principles of programming languages (pOPL)</source>, <year>2016</year>, pp. <fpage>256</fpage>–<lpage>270</lpage>.</citation></ref><ref id="c28" hwp:id="ref-28" hwp:rev-id="xref-ref-28-1 xref-ref-28-2"><label>[28]</label><citation publication-type="other" citation-type="journal" ref:id="213884v1.28" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-28">“<article-title hwp:id="article-title-28">Luigi</article-title>.”.</citation></ref><ref id="c29" hwp:id="ref-29" hwp:rev-id="xref-ref-29-1"><label>[29]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.29" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-29">“<article-title hwp:id="article-title-29">Sqlite fAQ: ‘Can multiple applications or multiple instances of the same application access a single database file at the same time?</article-title>”’ <ext-link l:rel="related" l:ref-type="uri" l:ref="https://sqlite.org/faq.html#q5" ext-link-type="uri" xlink:href="https://sqlite.org/faq.html#q5" hwp:id="ext-link-23">https://sqlite.org/faq.html#q5</ext-link>, <year>2016</year>.</citation></ref><ref id="c30" hwp:id="ref-30" hwp:rev-id="xref-ref-30-1"><label>[30]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.30" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-30">“<article-title hwp:id="article-title-30">Wobidisco tutorial: Running on a single machine</article-title>.” <ext-link l:rel="related" l:ref-type="uri" l:ref="https://github.com/hammerlab/wobidisco/blob/master/doc/running-local.md" ext-link-type="uri" xlink:href="https://github.com/hammerlab/wobidisco/blob/master/doc/running-local.md" hwp:id="ext-link-24">https://github.com/hammerlab/wobidisco/blob/master/doc/running-local.md</ext-link>, <year>2017</year>.</citation></ref><ref id="c31" hwp:id="ref-31" hwp:rev-id="xref-ref-31-1"><label>[31]</label><citation publication-type="journal" citation-type="journal" ref:id="213884v1.31" ref:linkable="yes" ref:use-reference-as-is="yes" hwp:id="citation-31"><string-name name-style="western" hwp:sortable="Vouillon J."><given-names>J.</given-names> <surname>Vouillon</surname></string-name> and <string-name name-style="western" hwp:sortable="Balat V."><given-names>V.</given-names> <surname>Balat</surname></string-name>, “<article-title hwp:id="article-title-31">From bytecode to javaScript: The js_of_ocaml compiler</article-title>,” <source hwp:id="source-11">Software: Practice and Experience</source>, vol. <volume>44</volume>, no. <issue>8</issue>, pp. <fpage>951</fpage>–<lpage>972</lpage>, <year>2014</year>.</citation></ref><ref id="c32" hwp:id="ref-32" hwp:rev-id="xref-ref-32-1"><label>[32]</label><citation publication-type="journal" citation-type="journal" ref:id="213884v1.32" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-32"><string-name name-style="western" hwp:sortable="Kaloper-Meršinjak D."><given-names>D.</given-names> <surname>Kaloper-Meršinjak</surname></string-name>, <string-name name-style="western" hwp:sortable="Mehnert H."><given-names>H.</given-names> <surname>Mehnert</surname></string-name>, <string-name name-style="western" hwp:sortable="Madhavapeddy A."><given-names>A.</given-names> <surname>Madhavapeddy</surname></string-name>, and <string-name name-style="western" hwp:sortable="Sewell P."><given-names>P.</given-names> <surname>Sewell</surname></string-name>, “<article-title hwp:id="article-title-32">Not-quite-so-broken tLS: Lessons in re-engineering a security protocol specification and implementation</article-title>,” in <source hwp:id="source-12">Proceedings of the 24th uSENIX conference on security symposium</source>, <year>2015</year>, pp. <fpage>223</fpage>–<lpage>238</lpage>.</citation></ref><ref id="c33" hwp:id="ref-33" hwp:rev-id="xref-ref-33-1"><label>[33]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.33" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-33">“<article-title hwp:id="article-title-33">Wikipedia: Platform lSF</article-title>.” <ext-link l:rel="related" l:ref-type="uri" l:ref="https://en.wikipedia.org/wiki/Platform_LSF" ext-link-type="uri" xlink:href="https://en.wikipedia.org/wiki/Platform_LSF" hwp:id="ext-link-25">https://en.wikipedia.org/wiki/Platform_LSF</ext-link>, <year>2016</year>.</citation></ref><ref id="c34" hwp:id="ref-34" hwp:rev-id="xref-ref-34-1 xref-ref-34-2"><label>[34]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.34" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-34">“<article-title hwp:id="article-title-34">Wikipedia: Portable batch system</article-title>.” <ext-link l:rel="related" l:ref-type="uri" l:ref="https://en.wikipedia.org/wiki/Portable_Batch_System" ext-link-type="uri" xlink:href="https://en.wikipedia.org/wiki/Portable_Batch_System" hwp:id="ext-link-26">https://en.wikipedia.org/wiki/Portable_Batch_System</ext-link>, <year>2016</year>.</citation></ref><ref id="c35" hwp:id="ref-35" hwp:rev-id="xref-ref-35-1"><label>[35]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.35" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-35">“<article-title hwp:id="article-title-35">Apache hadoop yARN</article-title>.” <ext-link l:rel="related" l:ref-type="uri" l:ref="https://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-site/YARN.html" ext-link-type="uri" xlink:href="https://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-site/YARN.html" hwp:id="ext-link-27">https://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-site/YARN.html</ext-link>, <year>2016</year>.</citation></ref><ref id="c36" hwp:id="ref-36" hwp:rev-id="xref-ref-36-1"><label>[36]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.36" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-36">“<article-title hwp:id="article-title-36">OpenSSH cookbook: Multiplexing</article-title>.” <ext-link l:rel="related" l:ref-type="uri" l:ref="https://en.wikibooks.org/wiki/OpenSSH/Cookbook/Multiplexing" ext-link-type="uri" xlink:href="https://en.wikibooks.org/wiki/OpenSSH/Cookbook/Multiplexing" hwp:id="ext-link-28">https://en.wikibooks.org/wiki/OpenSSH/Cookbook/Multiplexing</ext-link>, <year>2017</year>.</citation></ref><ref id="c37" hwp:id="ref-37" hwp:rev-id="xref-ref-37-1"><label>[37]</label><citation publication-type="other" citation-type="journal" ref:id="213884v1.37" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-37">“<article-title hwp:id="article-title-37">The JavaScript Object Notation (JSON) Data Interchange Format</article-title>.” RFC 7159; RFC Editor, <month>Mar</month>-<year>2014</year>.</citation></ref><ref id="c38" hwp:id="ref-38" hwp:rev-id="xref-ref-38-1"><label>[38]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.38" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-38">“<article-title hwp:id="article-title-38">Wikipedia: Parametric polymorphism</article-title>.” <ext-link l:rel="related" l:ref-type="uri" l:ref="https://en.wikipedia.org/wiki/Parametric_polymorphism" ext-link-type="uri" xlink:href="https://en.wikipedia.org/wiki/Parametric_polymorphism" hwp:id="ext-link-29">https://en.wikipedia.org/wiki/Parametric_polymorphism</ext-link>, <year>2016</year>.</citation></ref><ref id="c39" hwp:id="ref-39" hwp:rev-id="xref-ref-39-1"><label>[39]</label><citation publication-type="book" citation-type="book" ref:id="213884v1.39" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-39"><string-name name-style="western" hwp:sortable="Garrigue J."><given-names>J.</given-names> <surname>Garrigue</surname></string-name> and <string-name name-style="western" hwp:sortable="Normand J. L."><given-names>J. L.</given-names> <surname>Normand</surname></string-name>, “<source hwp:id="source-13">Adding gADTs to oCaml: A direct approach</source>.” <publisher-name>ML Workshop</publisher-name>, <publisher-loc>Tokyo</publisher-loc>, <year>2011</year>.</citation></ref><ref id="c40" hwp:id="ref-40" hwp:rev-id="xref-ref-40-1"><label>[40]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.40" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-40">“<article-title hwp:id="article-title-39">The elasticluster project</article-title>.” <ext-link l:rel="related" l:ref-type="uri" l:ref="http://gc3-uzh-ch.github.io/elasticluster/" ext-link-type="uri" xlink:href="http://gc3-uzh-ch.github.io/elasticluster/" hwp:id="ext-link-30">http://gc3-uzh-ch.github.io/elasticluster/</ext-link>, <year>2016</year>.</citation></ref><ref id="c41" hwp:id="ref-41" hwp:rev-id="xref-ref-41-1 xref-ref-41-2"><label>[41]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.41" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-41">“<article-title hwp:id="article-title-40">Github project <monospace>hammerlab/stratocumulus</monospace></article-title>.” <ext-link l:rel="related" l:ref-type="uri" l:ref="https://github.com/hammerlab/stratocumulus" ext-link-type="uri" xlink:href="https://github.com/hammerlab/stratocumulus" hwp:id="ext-link-31">https://github.com/hammerlab/stratocumulus</ext-link>, <year>2016</year>.</citation></ref><ref id="c42" hwp:id="ref-42" hwp:rev-id="xref-ref-42-1"><label>[42]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.42" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-42">“<article-title hwp:id="article-title-41">Wikipedia: FASTQ format</article-title>.” <ext-link l:rel="related" l:ref-type="uri" l:ref="https://en.wikipedia.org/wiki/FASTQ_format" ext-link-type="uri" xlink:href="https://en.wikipedia.org/wiki/FASTQ_format" hwp:id="ext-link-32">https://en.wikipedia.org/wiki/FASTQ_format</ext-link>, <year>2016</year>.</citation></ref><ref id="c43" hwp:id="ref-43" hwp:rev-id="xref-ref-43-1"><label>[43]</label><citation publication-type="journal" citation-type="journal" ref:id="213884v1.43" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-43"><string-name name-style="western" hwp:sortable="Xi H."><given-names>H.</given-names> <surname>Xi</surname></string-name>, <string-name name-style="western" hwp:sortable="Chen C."><given-names>C.</given-names> <surname>Chen</surname></string-name>, and <string-name name-style="western" hwp:sortable="Chen G."><given-names>G.</given-names> <surname>Chen</surname></string-name>, “<article-title hwp:id="article-title-42">Guarded recursive datatype constructors</article-title>,” in <source hwp:id="source-14">Proceedings of the 30th aCM sIGPLAN-sIGACT symposium on principles of programming languages</source>, <year>2003</year>, pp. <fpage>224</fpage>–<lpage>235</lpage>.</citation></ref><ref id="c44" hwp:id="ref-44" hwp:rev-id="xref-ref-44-1"><label>[44]</label><citation publication-type="book" citation-type="book" ref:id="213884v1.44" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-44"><string-name name-style="western" hwp:sortable="Kiselyov O."><given-names>O.</given-names> <surname>Kiselyov</surname></string-name>, “<chapter-title>Typed tagless final interpreters</chapter-title>,” in <source hwp:id="source-15">Generic and indexed programming: International spring school, sSGIP 2010, oxford, uK, march 22-26, 2010, revised lectures</source>, <person-group person-group-type="editor" hwp:id="person-group-1"><string-name name-style="western" hwp:sortable="Gibbons J."><given-names>J.</given-names> <surname>Gibbons</surname></string-name></person-group>, Ed. <publisher-loc>Berlin, Heidelberg</publisher-loc>: <publisher-name>Springer Berlin Heidelberg</publisher-name>, <year>2012</year>, pp. <fpage>130</fpage>–<lpage>174</lpage>.</citation></ref><ref id="c45" hwp:id="ref-45" hwp:rev-id="xref-ref-45-1"><label>[45]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.45" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-45">“<article-title hwp:id="article-title-43">PR #119: Filter spliced reads for indel-realignment</article-title>.” <ext-link l:rel="related" l:ref-type="uri" l:ref="https://github.com/hammerlab/epidisco/pull/119" ext-link-type="uri" xlink:href="https://github.com/hammerlab/epidisco/pull/119" hwp:id="ext-link-33">https://github.com/hammerlab/epidisco/pull/119</ext-link>, <year>2016</year>.</citation></ref><ref id="c46" hwp:id="ref-46" hwp:rev-id="xref-ref-46-1"><label>[46]</label><citation publication-type="journal" citation-type="journal" ref:id="213884v1.46" ref:linkable="yes" ref:use-reference-as-is="yes" hwp:id="citation-46"><string-name name-style="western" hwp:sortable="Spjuth O."><given-names>O.</given-names> <surname>Spjuth</surname></string-name>, <string-name name-style="western" hwp:sortable="Bongcam-Rudloff E."><given-names>E.</given-names> <surname>Bongcam-Rudloff</surname></string-name>, <string-name name-style="western" hwp:sortable="Hernández G. C."><given-names>G. C.</given-names> <surname>Hernández</surname></string-name>, <string-name name-style="western" hwp:sortable="Forer L."><given-names>L.</given-names> <surname>Forer</surname></string-name>, <string-name name-style="western" hwp:sortable="Giovacchini M."><given-names>M.</given-names> <surname>Giovacchini</surname></string-name>, <string-name name-style="western" hwp:sortable="Guimera R. V."><given-names>R. V.</given-names> <surname>Guimera</surname></string-name>, <string-name name-style="western" hwp:sortable="Kallio A."><given-names>A.</given-names> <surname>Kallio</surname></string-name>, <string-name name-style="western" hwp:sortable="Korpelainen E."><given-names>E.</given-names> <surname>Korpelainen</surname></string-name>, <string-name name-style="western" hwp:sortable="Kańduła M. M."><given-names>M. M.</given-names> <surname>Kańduła</surname></string-name>, <string-name name-style="western" hwp:sortable="Krachunov M."><given-names>M.</given-names> <surname>Krachunov</surname></string-name>, <string-name name-style="western" hwp:sortable="Kreil D. P."><given-names>D. P.</given-names> <surname>Kreil</surname></string-name>, <string-name name-style="western" hwp:sortable="Kulev O."><given-names>O.</given-names> <surname>Kulev</surname></string-name>, <string-name name-style="western" hwp:sortable="Łabaj P. P."><given-names>P. P.</given-names> <surname>Łabaj</surname></string-name>, <string-name name-style="western" hwp:sortable="Lampa S."><given-names>S.</given-names> <surname>Lampa</surname></string-name>, <string-name name-style="western" hwp:sortable="Pireddu L."><given-names>L.</given-names> <surname>Pireddu</surname></string-name>, <string-name name-style="western" hwp:sortable="Schönherr S."><given-names>S.</given-names> <surname>Schönherr</surname></string-name>, <string-name name-style="western" hwp:sortable="Siretskiy A."><given-names>A.</given-names> <surname>Siretskiy</surname></string-name>, and <string-name name-style="western" hwp:sortable="Vassilev D."><given-names>D.</given-names> <surname>Vassilev</surname></string-name>, “<article-title hwp:id="article-title-44">Experiences with workflows for automating data-intensive bioinformatics</article-title>.” <source hwp:id="source-16">Biology direct</source>, vol. <volume>10</volume>, no. <issue>1</issue>, p. <fpage>43</fpage>, <month>Jan</month>. <year>2015</year>.</citation></ref><ref id="c47" hwp:id="ref-47" hwp:rev-id="xref-ref-47-1"><label>[47]</label><citation publication-type="journal" citation-type="journal" ref:id="213884v1.47" ref:linkable="yes" ref:use-reference-as-is="yes" hwp:id="citation-47"><string-name name-style="western" hwp:sortable="Goecks J."><given-names>J.</given-names> <surname>Goecks</surname></string-name>, <string-name name-style="western" hwp:sortable="Nekrutenko A."><given-names>A.</given-names> <surname>Nekrutenko</surname></string-name>, and <string-name name-style="western" hwp:sortable="Taylor J."><given-names>J.</given-names> <surname>Taylor</surname></string-name>, “<article-title hwp:id="article-title-45">Galaxy: a comprehensive approach for supporting accessible, reproducible, and transparent computational research in the life sciences</article-title>.” <source hwp:id="source-17">Genome biology</source>, vol. <volume>11</volume>, no. <issue>8</issue>, p. <fpage>R86</fpage>, <month>Jan</month>. <year>2010</year>.</citation></ref><ref id="c48" hwp:id="ref-48" hwp:rev-id="xref-ref-48-1"><label>[48]</label><citation publication-type="journal" citation-type="journal" ref:id="213884v1.48" ref:linkable="yes" ref:use-reference-as-is="yes" hwp:id="citation-48"><string-name name-style="western" hwp:sortable="Wagle P."><given-names>P.</given-names> <surname>Wagle</surname></string-name>, <string-name name-style="western" hwp:sortable="Nikolić M."><given-names>M.</given-names> <surname>Nikolić</surname></string-name>, and <string-name name-style="western" hwp:sortable="Frommolt P."><given-names>P.</given-names> <surname>Frommolt</surname></string-name>, “<article-title hwp:id="article-title-46">QuickNGS elevates Next-Generation Sequencing data analysis to a new level of automation</article-title>.” <source hwp:id="source-18">BMC genomics</source>, vol. <volume>16</volume>, no. <issue>1</issue>, p. <fpage>487</fpage>, <month>Jan</month>. <year>2015</year>.</citation></ref><ref id="c49" hwp:id="ref-49" hwp:rev-id="xref-ref-49-1"><label>[49]</label><citation publication-type="journal" citation-type="journal" ref:id="213884v1.49" ref:linkable="yes" ref:use-reference-as-is="yes" hwp:id="citation-49"><string-name name-style="western" hwp:sortable="Bao R."><given-names>R.</given-names> <surname>Bao</surname></string-name>, <string-name name-style="western" hwp:sortable="Hernandez K."><given-names>K.</given-names> <surname>Hernandez</surname></string-name>, <string-name name-style="western" hwp:sortable="Huang L."><given-names>L.</given-names> <surname>Huang</surname></string-name>, <string-name name-style="western" hwp:sortable="Kang W."><given-names>W.</given-names> <surname>Kang</surname></string-name>, <string-name name-style="western" hwp:sortable="Bartom E."><given-names>E.</given-names> <surname>Bartom</surname></string-name>, <string-name name-style="western" hwp:sortable="Onel K."><given-names>K.</given-names> <surname>Onel</surname></string-name>, <string-name name-style="western" hwp:sortable="Volchenboum S."><given-names>S.</given-names> <surname>Volchenboum</surname></string-name>, and <string-name name-style="western" hwp:sortable="Andrade J."><given-names>J.</given-names> <surname>Andrade</surname></string-name>, “ExScalibur: <string-name name-style="western" hwp:sortable="A HighBao R."><surname>A HighBao</surname>, <given-names>R.</given-names></string-name>, <string-name name-style="western" hwp:sortable="Hernandez K."><surname>Hernandez</surname>, <given-names>K.</given-names></string-name>, <string-name name-style="western" hwp:sortable="Huang L."><surname>Huang</surname>, <given-names>L.</given-names></string-name>, <string-name name-style="western" hwp:sortable="Kang W."><surname>Kang</surname>, <given-names>W.</given-names></string-name>, <string-name name-style="western" hwp:sortable="Bartom E."><surname>Bartom</surname>, <given-names>E.</given-names></string-name>, <string-name name-style="western" hwp:sortable="Onel K."><surname>Onel</surname>, <given-names>K.</given-names></string-name>, … <string-name name-style="western" hwp:sortable="Andrade J."><surname>Andrade</surname>, <given-names>J.</given-names></string-name> (<year>2015</year>). <article-title hwp:id="article-title-47">ExScalibur: A High-Performance Cloud-Enabled Suite for Whole Exome Germline and Somatic Mutation Identification. PloS One, 10(8), e0135800. Retrieve</article-title>,” <source hwp:id="source-19">PloS one</source>, vol. <volume>10</volume>, no. <issue>8</issue>, p. <fpage>e0135800</fpage>, <month>Jan</month>. 2015.</citation></ref><ref id="c50" hwp:id="ref-50" hwp:rev-id="xref-ref-50-1"><label>[50]</label><citation publication-type="journal" citation-type="journal" ref:id="213884v1.50" ref:linkable="yes" ref:use-reference-as-is="yes" hwp:id="citation-50"><string-name name-style="western" hwp:sortable="Gafni E."><given-names>E.</given-names> <surname>Gafni</surname></string-name>, <string-name name-style="western" hwp:sortable="Luquette L. J."><given-names>L. J.</given-names> <surname>Luquette</surname></string-name>, <string-name name-style="western" hwp:sortable="Lancaster A. K."><given-names>A. K.</given-names> <surname>Lancaster</surname></string-name>, <string-name name-style="western" hwp:sortable="Hawkins J. B."><given-names>J. B.</given-names> <surname>Hawkins</surname></string-name>, <string-name name-style="western" hwp:sortable="Jung J.-Y."><given-names>J.-Y.</given-names> <surname>Jung</surname></string-name>, <string-name name-style="western" hwp:sortable="Souilmi Y."><given-names>Y.</given-names> <surname>Souilmi</surname></string-name>, <string-name name-style="western" hwp:sortable="Wall D. P."><given-names>D. P.</given-names> <surname>Wall</surname></string-name>, and <string-name name-style="western" hwp:sortable="Tonellato P. J."><given-names>P. J.</given-names> <surname>Tonellato</surname></string-name>, “<article-title hwp:id="article-title-48">COSMOS: Python library for massively parallel workflows</article-title>.” <source hwp:id="source-20">Bioinformatics (Oxford, England)</source>, vol. <volume>30</volume>, no. <issue>20</issue>, pp. <fpage>2956</fpage>–<lpage>8</lpage>, Oct. <year>2014</year>.</citation></ref><ref id="c51" hwp:id="ref-51" hwp:rev-id="xref-ref-51-1"><label>[51]</label><citation publication-type="other" citation-type="journal" ref:id="213884v1.51" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-51">“<article-title hwp:id="article-title-49">Azkaban workflow manager</article-title>.”.</citation></ref><ref id="c52" hwp:id="ref-52" hwp:rev-id="xref-ref-52-1"><label>[52]</label><citation publication-type="journal" citation-type="journal" ref:id="213884v1.52" ref:linkable="yes" ref:use-reference-as-is="yes" hwp:id="citation-52"><string-name name-style="western" hwp:sortable="Yu L."><given-names>L.</given-names> <surname>Yu</surname></string-name>, <string-name name-style="western" hwp:sortable="Moretti C."><given-names>C.</given-names> <surname>Moretti</surname></string-name>, <string-name name-style="western" hwp:sortable="Thrasher A."><given-names>A.</given-names> <surname>Thrasher</surname></string-name>, <string-name name-style="western" hwp:sortable="Emrich S."><given-names>S.</given-names> <surname>Emrich</surname></string-name>, <string-name name-style="western" hwp:sortable="Judd K."><given-names>K.</given-names> <surname>Judd</surname></string-name>, and <string-name name-style="western" hwp:sortable="Thain D."><given-names>D.</given-names> <surname>Thain</surname></string-name>, “<article-title hwp:id="article-title-50">Harnessing parallelism in multicore clusters with the All-Pairs, Wavefront, and Makeflow abstractions</article-title>,” <source hwp:id="source-21">Cluster Computing</source>, vol. <volume>13</volume>, no. <issue>3</issue>, pp. <fpage>243</fpage>–<lpage>256</lpage>, <month>Apr</month>. <year>2010</year>.</citation></ref><ref id="c53" hwp:id="ref-53" hwp:rev-id="xref-ref-53-1"><label>[53]</label><citation publication-type="journal" citation-type="journal" ref:id="213884v1.53" ref:linkable="yes" ref:use-reference-as-is="yes" hwp:id="citation-53"><string-name name-style="western" hwp:sortable="Taura K."><given-names>K.</given-names> <surname>Taura</surname></string-name>, <string-name name-style="western" hwp:sortable="Matsuzaki T."><given-names>T.</given-names> <surname>Matsuzaki</surname></string-name>, <string-name name-style="western" hwp:sortable="Miwa M."><given-names>M.</given-names> <surname>Miwa</surname></string-name>, <string-name name-style="western" hwp:sortable="Kamoshida Y."><given-names>Y.</given-names> <surname>Kamoshida</surname></string-name>, <string-name name-style="western" hwp:sortable="Yokoyama D."><given-names>D.</given-names> <surname>Yokoyama</surname></string-name>, <string-name name-style="western" hwp:sortable="Dun N."><given-names>N.</given-names> <surname>Dun</surname></string-name>, <string-name name-style="western" hwp:sortable="Shibata T."><given-names>T.</given-names> <surname>Shibata</surname></string-name>, <string-name name-style="western" hwp:sortable="Jun C. S."><given-names>C. S.</given-names> <surname>Jun</surname></string-name>, and <string-name name-style="western" hwp:sortable="Tsujii J."><given-names>J.</given-names> <surname>Tsujii</surname></string-name>, “<article-title hwp:id="article-title-51">Design and implementation of GXP make — A workflow system based on make</article-title>,” <source hwp:id="source-22">Future Generation Computer Systems</source>, vol. <volume>29</volume>, no. <issue>2</issue>, pp. <fpage>662</fpage>–<lpage>672</lpage>, <month>Feb</month>. <year>2013</year>.</citation></ref><ref id="c54" hwp:id="ref-54" hwp:rev-id="xref-ref-54-1"><label>[54]</label><citation publication-type="journal" citation-type="journal" ref:id="213884v1.54" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-54"><string-name name-style="western" hwp:sortable="Taura K."><given-names>K.</given-names> <surname>Taura</surname></string-name>, “<article-title hwp:id="article-title-52">GXP: An Interactive Shell for the Grid Environment</article-title>,” in <source hwp:id="source-23">Innovative architecture for future generation high-performance processors and systems (iWIA’04)</source>, pp. <fpage>59</fpage>–<lpage>67</lpage>.</citation></ref><ref id="c55" hwp:id="ref-55" hwp:rev-id="xref-ref-55-1"><label>[55]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.55" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-55">“<article-title hwp:id="article-title-53">Project <monospace>evoldoers/biomake</monospace></article-title>.” <ext-link l:rel="related" l:ref-type="uri" l:ref="https://github.com/evoldoers/biomake" ext-link-type="uri" xlink:href="https://github.com/evoldoers/biomake" hwp:id="ext-link-34">https://github.com/evoldoers/biomake</ext-link>, <year>2016</year>.</citation></ref><ref id="c56" hwp:id="ref-56" hwp:rev-id="xref-ref-56-1"><label>[56]</label><citation publication-type="journal" citation-type="journal" ref:id="213884v1.56" ref:linkable="yes" ref:use-reference-as-is="yes" hwp:id="citation-56"><string-name name-style="western" hwp:sortable="Wilde M."><given-names>M.</given-names> <surname>Wilde</surname></string-name>, <string-name name-style="western" hwp:sortable="Hategan M."><given-names>M.</given-names> <surname>Hategan</surname></string-name>, <string-name name-style="western" hwp:sortable="Wozniak J. M."><given-names>J. M.</given-names> <surname>Wozniak</surname></string-name>, <string-name name-style="western" hwp:sortable="Clifford B."><given-names>B.</given-names> <surname>Clifford</surname></string-name>, <string-name name-style="western" hwp:sortable="Katz D. S."><given-names>D. S.</given-names> <surname>Katz</surname></string-name>, and <string-name name-style="western" hwp:sortable="Foster I."><given-names>I.</given-names> <surname>Foster</surname></string-name>, “<article-title hwp:id="article-title-54">Swift: A language for distributed parallel scripting</article-title>,” <source hwp:id="source-24">Parallel Computing</source>, vol. <volume>37</volume>, no. <issue>9</issue>, pp. <fpage>633</fpage>–<lpage>652</lpage>, <month>Sep</month>. <year>2011</year>.</citation></ref><ref id="c57" hwp:id="ref-57" hwp:rev-id="xref-ref-57-1"><label>[57]</label><citation publication-type="journal" citation-type="journal" ref:id="213884v1.57" ref:linkable="yes" ref:use-reference-as-is="yes" hwp:id="citation-57"><string-name name-style="western" hwp:sortable="Tan W."><given-names>W.</given-names> <surname>Tan</surname></string-name>, <string-name name-style="western" hwp:sortable="Foster I."><given-names>I.</given-names> <surname>Foster</surname></string-name>, and <string-name name-style="western" hwp:sortable="Madduri R."><given-names>R.</given-names> <surname>Madduri</surname></string-name>, “<article-title hwp:id="article-title-55">Combining the Power of Taverna and caGrid: Scientific Workflows that Enable Web-Scale Collaboration</article-title>,” <source hwp:id="source-25">IEEE Internet Computing</source>, vol. <volume>12</volume>, no. <issue>6</issue>, pp. <fpage>61</fpage>–<lpage>68</lpage>, <month>Nov</month>. <year>2008</year>.</citation></ref><ref id="c58" hwp:id="ref-58" hwp:rev-id="xref-ref-58-1"><label>[58]</label><citation publication-type="journal" citation-type="journal" ref:id="213884v1.58" ref:linkable="yes" ref:use-reference-as-is="yes" hwp:id="citation-58"><string-name name-style="western" hwp:sortable="Sadedin S. P."><given-names>S. P.</given-names> <surname>Sadedin</surname></string-name>, <string-name name-style="western" hwp:sortable="Pope B."><given-names>B.</given-names> <surname>Pope</surname></string-name>, and <string-name name-style="western" hwp:sortable="Oshlack A."><given-names>A.</given-names> <surname>Oshlack</surname></string-name>, “<article-title hwp:id="article-title-56">Bpipe: a tool for running and managing bioinformatics pipelines</article-title>.” <source hwp:id="source-26">Bioinformatics (Oxford, England)</source>, vol. <volume>28</volume>, no. <issue>11</issue>, pp. <fpage>1525</fpage>–<lpage>6</lpage>, <month>Jun</month>. <year>2012</year>.</citation></ref><ref id="c59" hwp:id="ref-59" hwp:rev-id="xref-ref-59-1"><label>[59]</label><citation publication-type="journal" citation-type="journal" ref:id="213884v1.59" ref:linkable="yes" ref:use-reference-as-is="yes" hwp:id="citation-59"><string-name name-style="western" hwp:sortable="Köster J."><given-names>J.</given-names> <surname>Köster</surname></string-name> and <string-name name-style="western" hwp:sortable="Rahmann S."><given-names>S.</given-names> <surname>Rahmann</surname></string-name>, “<article-title hwp:id="article-title-57">Snakemake–a scalable bioinformatics workflow engine</article-title>.” <source hwp:id="source-27">Bioinformatics (Oxford, England)</source>, vol. <volume>28</volume>, no. <issue>19</issue>, pp. <fpage>2520</fpage>–<lpage>2</lpage>, <month>Oct</month>. <year>2012</year>.</citation></ref><ref id="c60" hwp:id="ref-60" hwp:rev-id="xref-ref-60-1"><label>[60]</label><citation publication-type="journal" citation-type="journal" ref:id="213884v1.60" ref:linkable="yes" ref:use-reference-as-is="yes" hwp:id="citation-60"><string-name name-style="western" hwp:sortable="Goodstadt L."><given-names>L.</given-names> <surname>Goodstadt</surname></string-name>, “<article-title hwp:id="article-title-58">Ruffus: a lightweight Python library for computational pipelines</article-title>,” <source hwp:id="source-28">Bioinformatics</source>, vol. <volume>26</volume>, no. <issue>21</issue>, pp. <fpage>2778</fpage>–<lpage>2779</lpage>, <month>Sep</month>. <year>2010</year>.</citation></ref><ref id="c61" hwp:id="ref-61" hwp:rev-id="xref-ref-61-1"><label>[61]</label><citation publication-type="journal" citation-type="journal" ref:id="213884v1.61" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-61"><string-name name-style="western" hwp:sortable="Tanaka M."><given-names>M.</given-names> <surname>Tanaka</surname></string-name> and <string-name name-style="western" hwp:sortable="Tatebe O."><given-names>O.</given-names> <surname>Tatebe</surname></string-name>, “<article-title hwp:id="article-title-59">Pwrake</article-title>,” in <source hwp:id="source-29">Proceedings of the 19th aCM international symposium on high performance distributed computing – hPDC ’10</source>, <year>2010</year>, p. <fpage>356</fpage>.</citation></ref><ref id="c62" hwp:id="ref-62" hwp:rev-id="xref-ref-62-1"><label>[62]</label><citation publication-type="book" citation-type="book" ref:id="213884v1.62" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-62"><string-name name-style="western" hwp:sortable="Auwera G. A."><given-names>G. A.</given-names> <surname>Auwera</surname></string-name>, <string-name name-style="western" hwp:sortable="Carneiro M. O."><given-names>M. O.</given-names> <surname>Carneiro</surname></string-name>, <string-name name-style="western" hwp:sortable="Hartl C."><given-names>C.</given-names> <surname>Hartl</surname></string-name>, <string-name name-style="western" hwp:sortable="Poplin R."><given-names>R.</given-names> <surname>Poplin</surname></string-name>, <string-name name-style="western" hwp:sortable="del Angel G."><given-names>G.</given-names> <surname>del Angel</surname></string-name>, <string-name name-style="western" hwp:sortable="Levy-Moonshine A."><given-names>A.</given-names> <surname>Levy-Moonshine</surname></string-name>, <string-name name-style="western" hwp:sortable="Jordan T."><given-names>T.</given-names> <surname>Jordan</surname></string-name>, <string-name name-style="western" hwp:sortable="Shakir K."><given-names>K.</given-names> <surname>Shakir</surname></string-name>, <string-name name-style="western" hwp:sortable="Roazen D."><given-names>D.</given-names> <surname>Roazen</surname></string-name>, <string-name name-style="western" hwp:sortable="Thibault J."><given-names>J.</given-names> <surname>Thibault</surname></string-name>, <string-name name-style="western" hwp:sortable="Banks E."><given-names>E.</given-names> <surname>Banks</surname></string-name>, <string-name name-style="western" hwp:sortable="Garimella K. V."><given-names>K. V.</given-names> <surname>Garimella</surname></string-name>, <string-name name-style="western" hwp:sortable="Altshuler D."><given-names>D.</given-names> <surname>Altshuler</surname></string-name>, <string-name name-style="western" hwp:sortable="Gabriel S."><given-names>S.</given-names> <surname>Gabriel</surname></string-name>, and <string-name name-style="western" hwp:sortable="DePristo M. A."><given-names>M. A.</given-names> <surname>DePristo</surname></string-name>, <source hwp:id="source-30">Current Protocols in Bioinformatics</source>. <publisher-loc>Hoboken, NJ, USA</publisher-loc>: <publisher-name>John Wiley &amp; Sons, Inc</publisher-name>., <year>2002</year>, pp. <fpage>11.10.1</fpage>–<lpage>11.10.33</lpage>.</citation></ref><ref id="c63" hwp:id="ref-63" hwp:rev-id="xref-ref-63-1"><label>[63]</label><citation publication-type="website" citation-type="web" ref:id="213884v1.63" ref:linkable="no" ref:use-reference-as-is="yes" hwp:id="citation-63">“<article-title hwp:id="article-title-60">Github project <monospace>hammerlab/genspio</monospace></article-title>.” <ext-link l:rel="related" l:ref-type="uri" l:ref="https://github.com/hammerlab/genspio" ext-link-type="uri" xlink:href="https://github.com/hammerlab/genspio" hwp:id="ext-link-35">https://github.com/hammerlab/genspio</ext-link>, <year>2016</year>.</citation></ref></ref-list></back></article>
