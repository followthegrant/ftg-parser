<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.0 20120330//EN" "JATS-archivearticle1.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:mml="http://www.w3.org/1998/Math/MathML" article-type="research-article"><?properties open_access?><front><journal-meta><journal-id journal-id-type="nlm-ta">ScientificWorldJournal</journal-id><journal-id journal-id-type="iso-abbrev">ScientificWorldJournal</journal-id><journal-id journal-id-type="publisher-id">TSWJ</journal-id><journal-title-group><journal-title>The Scientific World Journal</journal-title></journal-title-group><issn pub-type="ppub">2356-6140</issn><issn pub-type="epub">1537-744X</issn><publisher><publisher-name>Hindawi Publishing Corporation</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="pmid">24688404</article-id><article-id pub-id-type="pmc">3932236</article-id><article-id pub-id-type="doi">10.1155/2014/549398</article-id><article-categories><subj-group subj-group-type="heading"><subject>Review Article</subject></subj-group></article-categories><title-group><article-title>Experiments in Computing: A Survey</article-title></title-group><contrib-group><contrib contrib-type="author"><contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0003-1037-3313</contrib-id><name><surname>Tedre</surname><given-names>Matti</given-names></name><xref ref-type="aff" rid="I1">
<sup>1</sup>
</xref><xref ref-type="corresp" rid="cor1">*</xref></contrib><contrib contrib-type="author"><name><surname>Moisseinen</surname><given-names>Nella</given-names></name><xref ref-type="aff" rid="I2">
<sup>2</sup>
</xref></contrib></contrib-group><aff id="I1">
<sup>1</sup>Department of Computer and Systems Sciences, Stockholm University, 16440 Kista, Sweden</aff><aff id="I2">
<sup>2</sup>Faculty of Behavioural Sciences, University of Helsinki, 00014 Helsinki, Finland</aff><author-notes><corresp id="cor1">*Matti Tedre: <email>matti.tedre@acm.org</email></corresp><fn fn-type="other"><p>Academic Editors: Y. Deng and G. Pajares</p></fn></author-notes><pub-date pub-type="collection"><year>2014</year></pub-date><pub-date pub-type="epub"><day>4</day><month>2</month><year>2014</year></pub-date><volume>2014</volume><elocation-id>549398</elocation-id><history><date date-type="received"><day>13</day><month>8</month><year>2013</year></date><date date-type="accepted"><day>15</day><month>12</month><year>2013</year></date></history><permissions><copyright-statement>Copyright &#x000a9; 2014 M. Tedre and N. Moisseinen.</copyright-statement><copyright-year>2014</copyright-year><license xlink:href="https://creativecommons.org/licenses/by/3.0/"><license-p>This is an open access article distributed under the Creative Commons Attribution License, which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p></license></permissions><abstract><p>Experiments play a central role in science. The role of experiments
in computing is, however, unclear. Questions about the relevance of experiments in computing attracted little attention until the 1980s. As the
discipline then saw a push towards experimental computer science, a variety of technically, theoretically, and empirically oriented views on experiments emerged. As a consequence of those debates, today's computing
fields use experiments and experiment terminology in a variety of ways. 
This paper analyzes experimentation debates in computing. It presents
five ways in which debaters have conceptualized experiments in computing: feasibility experiment, trial experiment, field experiment, comparison
experiment, and controlled experiment. This paper has three aims: to
clarify experiment terminology in computing; to contribute to disciplinary
self-understanding of computing; and, due to computing's centrality in
other fields, to promote understanding of experiments in modern science
in general.</p></abstract></article-meta></front><body><sec id="sec1"><title>1. Introduction</title><p>After the birth of the stored-program paradigm in the mid-1940s, computing as a discipline started to form up. The first step in the discipline creation was to separate it from the fields that gave birth to it, especially from mathematics and electrical engineering. In the 1960s and the 1970s the field was divided over a debate concerning the mathematical nature of computing (e.g., [<xref rid="B25" ref-type="bibr">1</xref>&#x02013;<xref rid="B90" ref-type="bibr">6</xref>]). There were a variety of formal, theory-oriented views of computing as a discipline. Some theoretically proficient computer scientists emphasized the mathematical analysis of algorithms for the general conclusions such analysis could provide [<xref rid="B15" ref-type="bibr">7</xref>&#x02013;<xref rid="B65" ref-type="bibr">12</xref>]. Another group focused on developing a mathematical theory of program construction [<xref rid="B23" ref-type="bibr">13</xref>&#x02013;<xref rid="B107" ref-type="bibr">18</xref>]. The most vehement advocates of a mathematical theory of computing went as far as to suggest that programming as an activity is fully reducible to mathematics [<xref rid="B62" ref-type="bibr">19</xref>]. In the theoretical advocates' visions of the discipline, the role of empirical work and experimentation was often ambiguous, as it was rarely, if ever, discussed in detail.</p><p>Another debate that characterized the development of computing as a discipline was concerned with the field's engineering character. Engineering aspects of computing were, for several decades, effectively kept out of the academic debate about computing as a discipline; despite the fact that the first computers were built in universities, they were used for applied sciences, and the development of early computing in universities had a strong engineering character [<xref rid="B4" ref-type="bibr">20</xref>&#x02013;<xref rid="B105" ref-type="bibr">23</xref>]. The late 1960s, however, saw a new turn in these debates when software engineering was brought to limelight [<xref rid="B80" ref-type="bibr">24</xref>]&#x02014;and harshly criticized [<xref rid="B72" ref-type="bibr">25</xref>]. For decades, software engineering remained a target of sustained criticism. Software engineers were accused of basing their work on a combination of anecdotal evidence and human authority [<xref rid="B63" ref-type="bibr">26</xref>]. What is more, meta-analyses of literature found that a large portion of software engineering articles failed to experimentally validate their results [<xref rid="B99" ref-type="bibr">27</xref>&#x02013;<xref rid="B109" ref-type="bibr">29</xref>]. Lacking experimentation was one of the commonly criticized aspects of software engineering.</p><p>A third debate about the essence of computing as a discipline was concerned with the scientific character of computing. There were arguments over whether computing is a science or not, and there were arguments over what might computing be a science of [<xref rid="B91" ref-type="bibr">30</xref>]. In one of the influential early defenses of the scientific nature of computer science it was argued that computer science is the study of computers and phenomena surrounding them [<xref rid="B81" ref-type="bibr">31</xref>]. Other proposals for the subject matter of computing included, for instance, information, algorithms, classes of computations, programming, complexity, and procedures [<xref rid="B69" ref-type="bibr">5</xref>, <xref rid="B24" ref-type="bibr">32</xref>&#x02013;<xref rid="B94" ref-type="bibr">37</xref>].</p><p>Arguments that looked at the subject matter of computing never managed to settle the debate over the scientific character of computing. But over the course of time, the focus of the &#x0201c;science&#x0201d; debates shifted from subjects to activities. It became increasingly common to argue that computing is indeed science&#x02014;not by virtue of its subject matter but by virtue of its <italic>method of inquiry</italic>.</p><p>The methodology question entered computing debates gradually. Many early arguments for computing as a science glossed over methodological questions. Although some descriptions of the &#x0201c;axiomatic&#x0201d; or &#x0201c;mathematical&#x0201d; sciences of computation compared computing with natural sciences (e.g., [<xref rid="B73" ref-type="bibr">16</xref>]), they rarely discussed either the relevance of the scientific method to computing or the role of experiments in the field. Similarly, one of the first descriptions of computing as an empirical science, by Newell et al. [<xref rid="B81" ref-type="bibr">31</xref>], was vague about methods and empirical approaches in the science of computing. The methodology question was finally brought into limelight by the <italic>experimental computer science</italic> debate, when a campaign for &#x0201c;rejuvenating experimental computer science&#x0201d; started at the turn of the 1980s [<xref rid="B18" ref-type="bibr">38</xref>&#x02013;<xref rid="B74" ref-type="bibr">41</xref>].</p><p>The view that computing is an inseparable combination of three very different intellectual traditions&#x02014;theory, engineering, and empirical science [<xref rid="B22" ref-type="bibr">42</xref>]&#x02014;complicates many debates about computing. One such debate is the &#x0201c;experimental computer science&#x0201d; debate. The words &#x0201c;experiment&#x0201d; and &#x0201c;experimental&#x0201d; are understood very differently between the traditions, which makes it difficult to grasp the intent of each argument on experimental computer science. This paper presents a survey of arguments about experimental computer science and presents that at least five different uses of the terms &#x0201c;experiment&#x0201d; and &#x0201c;experimental&#x0201d; can be found in the computing literature. This paper is a survey of how terminology is <italic>actually</italic> used and not of how it <italic>should</italic> be used. For instance, in the engineering tradition experimentation terminology is used much more loosely than in the tradition of experiment-based science. In short, the paper seeks an answer to the question, &#x0201c;<italic>What do computer scientists mean when they talk about experiments in computer science</italic>?&#x0201d;</p></sec><sec id="sec2"><title>2. Experimentation in Computing</title><p>Among researchers in computing disciplines there is wide support for views of computing as an empirical or experimental science. However, the terms <italic>empirical</italic> and <italic>experimental</italic> are not always used coherently. In sciences in general, it is relatively common to see the term &#x0201c;empirical&#x0201d; used to refer to research that relies on observation-based collection of primary data. The term &#x0201c;empirical research&#x0201d; stands in contrast with theoretical and analytical research. In many fields of science the term &#x0201c;experimental&#x0201d; goes deeper than &#x0201c;empirical&#x0201d; and refers to a specific kind of research, where controlled experiments are used for testing hypotheses. However, in the field of computing the term &#x0201c;experimental&#x0201d; has been used in a much more wider range of meanings.</p><p>The role of experimentation in computing became a hot topic when Feldman and Sutherland [<xref rid="B34" ref-type="bibr">40</xref>] published their report entitled &#x0201c;Rejuvenating Experimental Computer Science.&#x0201d; That report recommended that universities and the U.S. government should recognize and support experimental computer science. Denning [<xref rid="B18" ref-type="bibr">38</xref>] joined ranks with the Feldman committee and wrote that no scientific discipline can be productive in the long term if its experimenters merely build components. Also the ACM Executive Committee, which included Denning, agreed with the Feldman committee in that experimental computer science was undervalued at the time [<xref rid="B74" ref-type="bibr">41</xref>].</p><p>The &#x0201c;rejuvenating&#x0201d; report marked a shift of focus in methodology debates from the roles of theory and subject matter to the amount and methodological quality of empirical work in computing. The following decades saw numerous descriptive and normative arguments on the role of empirical and experimental research in computing. While some described how computer scientists actually work, others prescribed how they should work. Several studies compared research reports in computing with those in other fields&#x02014;usually natural sciences or established branches of engineering [<xref rid="B108" ref-type="bibr">28</xref>, <xref rid="B100" ref-type="bibr">45</xref>]. In those studies, it was a common finding that research in computing fields experiment significantly less than researchers in many other disciplines do [<xref rid="B108" ref-type="bibr">28</xref>, <xref rid="B100" ref-type="bibr">45</xref>].</p><p>Over the course of time, many authority figures in computing advised computer scientists to experiment more [<xref rid="B21" ref-type="bibr">46</xref>, <xref rid="B47" ref-type="bibr">47</xref>]. Given that much of that encouragement was due to inspiration from other fields, it is interesting to look at the computing side of the story. In particular, what do computer scientists from different backgrounds mean by &#x0201c;experimental computer science?&#x0201d; This section presents, firstly, the context of the experimental science debate through four viewpoints: empirical dimensions of computing, subjects of experimentation, experimental activities, and various terminological and classification viewpoints. Secondly, this section outlines critical viewpoints to experiments in computing, as presented in computing literature.</p><sec id="sec2.1"><title>2.1. Experimentation in Computing Context</title><sec id="sec2.1.1"><title>2.1.1. Empirical Dimensions of Computing</title><p>All the different accounts of experiments in computing&#x02014;from controlled experiments to experimental algorithmics&#x02014;fall into the broader category of <italic>empirical</italic> work. Computing and empirical research have been coupled in the literature in various ways, of which one particular perspective is discussed below. Computing and computers are, for one thing, <italic>subjects</italic> of research. Second, they are <italic>instruments</italic> of research. Third, they may be both at once.</p><p>One popular way of discussing computing and experimentation is to see computers and phenomena around them as a <italic>subject of research</italic> (e.g., [<xref rid="B81" ref-type="bibr">31</xref>]). There is a rich body of experimental work on computers, programming languages, interfaces, users, and algorithms, just to name a few. Some experiments are done in a very controlled manner, while some authors refer to their exploratory work as &#x0201c;experimental.&#x0201d; Viewing computing, computers, and phenomena surrounding them as a subject of inquiry opens doors for a variety of views on experimentation, and this paper looks at that aspect of experiments in computing.</p><p>Another popular way of discussing experimentation in computing is through seeing computers as <italic>research instruments</italic> in other fields. The history of computing and computers as instruments for experiments (simulations) in other fields is a long-established one. In his introduction to the famous 1946 Moore School lectures, Stibitz [<xref rid="B97" ref-type="bibr">48</xref>] argued that digital computers are an incredible laboratory where &#x0201c;<italic>the ingredients of every experiment are perfectly isolated</italic>.&#x0201d; Stibitz wrote that computers offer unlimited precision and an unlimited supply of instruments for research. Later on, the first modern computers were used for applied sciences, such as ballistics calculations, warfare [<xref rid="B48" ref-type="bibr">49</xref>, page 214], meteorology, astronomy [<xref rid="B3" ref-type="bibr">50</xref>, page 189], and quantum physics [<xref rid="B72" ref-type="bibr">25</xref>, page 122]. Progress in modern science is so heavily dependent on computing that different authors have called the increased dependence &#x0201c;algorithmization&#x0201d; of sciences [<xref rid="B29" ref-type="bibr">51</xref>], &#x0201c;the age of computer simulation&#x0201d; [<xref rid="B106" ref-type="bibr">52</xref>], and even an &#x0201c;info-computational&#x0201d; view of the world [<xref rid="B27" ref-type="bibr">53</xref>]. Computing has introduced a plethora of tools for other sciences&#x02014;take, for instance, virtual experiments, simulations, heuristic models, and neural networks [<xref rid="B106" ref-type="bibr">52</xref>]. Viewing computing as an instrument of research paints another image on experimentation, different from viewing computing as a subject of research.</p><p>Various kinds of models also pervade the field of computing. One can easily consider specifications, program texts, and programming languages to be certain kinds of models [<xref rid="B36" ref-type="bibr">54</xref>, <xref rid="B77" ref-type="bibr">55</xref>]. The experiment is a central part of validating models or testing the fit between the model and the world [<xref rid="B82" ref-type="bibr">56</xref>]. However, when computer models are used as tools, one should ask which discipline is actually being studied. Colburn [<xref rid="B14" ref-type="bibr">43</xref>] used computational models in genetics as an example. Is the programmer actually doing genetics or computer science? In many computational sciences joint work benefits both computing and the field where it is applied [<xref rid="B10" ref-type="bibr">57</xref>]. That is, computing can at once be a tool and a subject of study. This paper, however, does not focus on the instrumental aspect of computing but on research of computing for computing's sake.</p></sec><sec id="sec2.1.2"><title>2.1.2. Subjects and Topics</title><p>Another angle at describing the context of experimentation in computing is to look at its subjects and topics. As there is already a good number of arguments about experimental computer science, one can borrow examples directly from the literature. In his discussion on experiments in computer science, Denning [<xref rid="B19" ref-type="bibr">39</xref>] brought up research on memory policies in time sharing and research on queuing networks. Freeman [<xref rid="B45" ref-type="bibr">58</xref>] proposed examples of a robot competition, research of data-intensive supercomputing, and research of future network architectures. Feldman and Sutherland [<xref rid="B34" ref-type="bibr">40</xref>] included advanced applications of computers. Gustedt et al. [<xref rid="B50" ref-type="bibr">59</xref>] highlighted research on, for instance, grid computing, parallel computing, large-scale distributed systems, and various other projects in large-scale computing. Basili and Zelkowitz [<xref rid="B8" ref-type="bibr">60</xref>] mentioned software engineering and high-end computing. Various authors from Chaitin to Zuse have argued that nature itself calculates [<xref rid="B13" ref-type="bibr">61</xref>, <xref rid="B110" ref-type="bibr">62</xref>]. In the end, subject as such is not of importance [<xref rid="B11" ref-type="bibr">63</xref>]. Any subject can be studied scientifically, and many can be studied experimentally.</p></sec><sec id="sec2.1.3"><title>2.1.3. Activities</title><p>One can also take a look at what kind of activities the term &#x0201c;experimental computer science&#x0201d; might cover. In the original &#x0201c;rejuvenating&#x0201d; report [<xref rid="B34" ref-type="bibr">40</xref>], experimenting in computer science was characterized as exploration (page 498), construction and testing (page 499), hypothesis-testing, demonstration, and modeling (page 500). Denning listed modeling, simulation, measurement, validation, prototyping, testing, performance analysis, and comparisons [<xref rid="B20" ref-type="bibr">64</xref>]. Other participants of the debate mentioned, for example, measuring, testing, making hypotheses, observing, collecting data, classifying, and sustaining or refuting hypotheses [<xref rid="B19" ref-type="bibr">39</xref>, <xref rid="B74" ref-type="bibr">41</xref>]. As a prime example of experimental computer science, Denning [<xref rid="B19" ref-type="bibr">39</xref>] referred to performance analysis&#x02014;the construction, validation, and empirical evaluation of computer systems. Belady [<xref rid="B9" ref-type="bibr">65</xref>] wrote that his experimental computer science involved building prototypes, observing, organizing observations, and formalizing them into models. All the activities above are central to science, but they are central to different kinds of science.</p><p>At the end of the 1980s the famous report &#x0201c;Computing as a discipline&#x0201d; by Denning et al. [<xref rid="B22" ref-type="bibr">42</xref>] raised modeling as one of the three cornerstones of computing. In that report, experiments played a role similar to their role in natural sciences. Denning et al. described the cycle of work on the science side of computing through four steps, (1) Form a hypothesis, (2) construct a model and make a prediction, (3) design an experiment and collect data, and (4) analyze results. Freeman [<xref rid="B45" ref-type="bibr">58</xref>] dropped the hypothesis part and advocated a view of experimentation in computing based on a cycle of observation, measurement, and analysis of results. Gelernter [<xref rid="B46" ref-type="bibr">66</xref>, page 44] emphasized the generalizability of results, he explicitly noted the deductive and inductive phases of research, and he argued that computing is indeed a science insofar as its combination of theoretical foundations and experiments allows the making and proving of general statements.</p><p>One unique formulation of an experiment-like procedure in computing&#x02014;one with automated and repeatable experiments&#x02014;can be found in the cycle of test-driven development (<xref ref-type="fig" rid="fig1">Figure 1</xref>; see, e.g., [<xref rid="B31" ref-type="bibr">67</xref>]). In test-driven development, each cycle in software construction starts with writing a test for an added software feature. The procedure continues with running all the tests and seeing the previously added test fail, writing code that implements the wanted feature, and running the tests again to see if the newly written code really implements the desired functionality. In other words, the programmer starts from a certain functionality requirement, designs an automated experiment that is aimed at testing that functionality, and implements code that passes all the new and previous tests.</p><p>In the field of software engineering there is a rich history of discussions on experimental methods&#x02014;including highly influential accounts like that of Basili, Selby, and Hutchens [<xref rid="B7" ref-type="bibr">68</xref>]&#x02014;although terminology in those discussions is often used differently from what the stalwart proponents of experimental computer science advocated. Zelkowitz and Wallace [<xref rid="B108" ref-type="bibr">28</xref>, <xref rid="B109" ref-type="bibr">29</xref>] categorized &#x0201c;experimental approaches&#x0201d; in software engineering into three categories: <italic>observational</italic> methods, which collect data throughout the project; <italic>historical</italic> methods, which collect data from already completed projects; and <italic>controlled</italic> methods, which attempt to increase the statistical validity of results by providing multiple instances of observations. Of observational methods, they listed project monitoring, case study, assertion, and field study [<xref rid="B108" ref-type="bibr">28</xref>]. Of historical methods, they listed literature search, legacy data, lessons learned, and static analysis. Of controlled methods, they listed replicated experiment, synthetic environment experiments, dynamic analysis, and simulation. It is important to note that Zelkowitz and Wallace [<xref rid="B108" ref-type="bibr">28</xref>, <xref rid="B109" ref-type="bibr">29</xref>] did not call their lists &#x0201c;empirical&#x0201d; but &#x0201c;experimental&#x0201d; models and approaches. They argued that their categories cover the previously presented taxonomies, such as the nine variants of quantitative and qualitative experiments described by Kitchenham [<xref rid="B67" ref-type="bibr">69</xref>] as well as the six types identified by Basili [<xref rid="B6" ref-type="bibr">70</xref>]. Again, the descriptions of experimentation in software engineering are all central to science but to different kinds of science.</p><p>On the broader level, Morrison and Snodgrass [<xref rid="B78" ref-type="bibr">71</xref>] wrote that debugging is one aspect of the scientific method that computer scientists do well. Different from Dijkstra [<xref rid="B23" ref-type="bibr">13</xref>], who opposed debugging as &#x0201c;<italic>putting the cart before the horse</italic>,&#x0201d; Morrison and Snodgrass described debugging as &#x0201c;<italic>one of the purest forms of empirical investigation</italic>.&#x0201d; There are indeed various attempts to describe debugging as a &#x0201c;science of debugging&#x0201d; [<xref rid="B5" ref-type="bibr">44</xref>, <xref rid="B98" ref-type="bibr">72</xref>, <xref rid="B92" ref-type="bibr">73</xref>]. One of the pioneering works in the philosophy of experiment, by Hacking [<xref rid="B51" ref-type="bibr">74</xref>], named &#x0201c;debugging&#x0201d; as a central element in modern experimentation&#x02014;although its meaning in the context that Hacking discussed is different from its meaning in computing. Also other modern views of the scientific method include debugging, under different names, in the cycle of scientific research (e.g., [<xref rid="B86" ref-type="bibr">75</xref>]). The literature on the philosophy of engineering takes that aspect of research further through, for instance, <italic>parameter variation</italic>: the repeated measurement of a device's performance, while systematically adjusting the device's parameters of its conditions of operation [<xref rid="B101" ref-type="bibr">76</xref>, page 139].</p><p>Colburn [<xref rid="B14" ref-type="bibr">43</xref>] sketched another formulation of experiment-based work in computer science in the form of &#x0201c;solution engineering.&#x0201d; In various branches of computer science the usual scenario includes rigorous requirements, and the task of the computer scientist is to engineer an algorithmic solution. <xref ref-type="table" rid="tab1"> Table 1</xref> presents Bartley's [<xref rid="B5" ref-type="bibr">44</xref>] description of debugging, in parallel with Colburn's [<xref rid="B14" ref-type="bibr">43</xref>] &#x0201c;solution engineering&#x0201d; and a simplified three-step view of the scientific method.</p><p>In Colburn's analogy in <xref ref-type="table" rid="tab1">Table 1</xref>, what is being tested in the scientific method is not the experiment but the hypothesis. The experiment is a tool for testing the hypothesis. Similarly, in Colburn's analogy, what is being tested in problem solving in computer science is not the program but the algorithm. The program is written in order to test the algorithm. In this analogy, writing a program is analogous to constructing a test situation. Khalil and Levy [<xref rid="B66" ref-type="bibr">35</xref>] made a similar analogy as they wrote, &#x0201c;<italic>programming is to computer science what the laboratory is to the physical sciences</italic>.&#x0201d;</p><p>Although solution engineering presents another view of experimentation in computing disciplines, it has been argued that an experiment in science can never test an isolated hypothesis but the whole theoretical group: assumptions, auxiliary hypotheses, and indeed the whole test situation [<xref rid="B28" ref-type="bibr">77</xref>, <xref rid="B89" ref-type="bibr">78</xref>]. Similarly, running a program cannot accept or reject an algorithm alone, but it can only accept or reject the whole test system&#x02014;including, for example, the operating system, hardware, quality of data, and contingent environmental inference. It can never be ruled out that the algorithm and the corresponding program were fine but something else in the test system caused wrong results&#x02014;and it can not be ruled out that the program was incorrect but, due to a problem with the test system, it contingently yielded right results.</p></sec><sec id="sec2.1.4"><title>2.1.4. Terminology and Classifications</title><p>There have also been analyses of experimentation terminology in computing. Feitelson [<xref rid="B32" ref-type="bibr">79</xref>] distinguished between three uses of the term &#x0201c;experimental computer science.&#x0201d; He argued that the most prominent use of the term is to use it as a counterpart to theoretical computer science. The second use of the term, according to Feitelson [<xref rid="B32" ref-type="bibr">79</xref>], is as a part of a feedback loop for the development of models, systems, and various other elements of computer science. Feitelson's third notion referred to the adoption of scientific experimental methods for the evaluation of computer systems. Gustedt, Jeannot, and Quinson presented four examples from large-scale systems: <italic>in situ</italic> experiments, emulation, benchmarking, and simulation [<xref rid="B50" ref-type="bibr">59</xref>].</p><p>Amigoni et al. [<xref rid="B1" ref-type="bibr">80</xref>] analyzed experimental activities in mobile robotics and classified them according to their purposes, the data sets they employ, and their measured quantities, be they intrinsic or extrinsic. Regarding <italic>purposes</italic>, they found demonstrations, gathering insight into a system's behavior, assessing limits of applicability, and comparing systems. Regarding <italic>data sets</italic>, they found publicly available instances, as well as uses of different environments. Regarding <italic>measured quantities</italic>, they found a number of measures, ranging from analytical (in fact nonmeasured, such as time complexity) to empirical (such as accuracy and robustness).</p><p>To summarize, the context in which experimental approaches in computing are discussed is extremely broad. Right or wrong, experimentation terminology is by no means used in the same way it is used in, for instance, physics [<xref rid="B42" ref-type="bibr">81</xref>&#x02013;<xref rid="B44" ref-type="bibr">83</xref>], biology [<xref rid="B103" ref-type="bibr">84</xref>], or chemistry. There are various views on the role of computing regarding experiments, there is a diversity of opinions on methods applicable, there are various examples of appropriate subjects and topics, and there are many existing analyses of experimentation in computing. However, although there are many advocates of experimentation in computing, various critical viewpoints can also be found in the literature.</p></sec></sec><sec id="sec2.2"><title>2.2. Critique of Experimentation</title><p>Although the general atmosphere in disciplinary debates of computing has become positive towards experimental computer science, the identity of the field is still in a state of flux, and there is a notable history of critical views towards experiments and experimentation language in computing. Some critics argued that the role or the nature of experiments differs between computing and natural sciences [<xref rid="B58" ref-type="bibr">85</xref>, <xref rid="B59" ref-type="bibr">86</xref>]. Others disputed the centrality of experiments in computing [<xref rid="B37" ref-type="bibr">87</xref>]. Yet others claimed that in computing experiments are not done right or are not articulated right [<xref rid="B108" ref-type="bibr">28</xref>, <xref rid="B109" ref-type="bibr">29</xref>].</p><p>The mathematical reductionists, for one, had reservations about experimentation in computing. In his famous argument for programming as a mathematical activity, Hoare [<xref rid="B62" ref-type="bibr">19</xref>] complained that, because computers and programs are not constructed with mathematical rigor, the only way of finding out what they do is by experiment. He wrote that such experiments in computing certainly are not mathematics, and that because their findings often can not be generalized, &#x0201c;<italic>unfortunately, they are not even science</italic>&#x0201d; [<xref rid="B62" ref-type="bibr">19</xref>]. Hoare's answer at the time was to rigorously prove that a system will work as planned. Fletcher [<xref rid="B37" ref-type="bibr">87</xref>] criticized some authors' preoccupation with experimentation and noted that without the theoretical idea of Turing equivalence of all computers there would be no academic discipline of computing but just eclectic knowledge about particular machines. Many others who advocated variants of &#x0201c;mathematical&#x0201d; or &#x0201c;axiomatic&#x0201d; approaches to computing never made their stance towards experiments clear (e.g., [<xref rid="B73" ref-type="bibr">16</xref>]).</p><p>The second source of objections was concerned with the differences between experiment in natural sciences and in computing. Emphasizing the view that computing is a constructive discipline, Hartmanis [<xref rid="B58" ref-type="bibr">85</xref>] argued that experimentation in computer science is different from the natural sciences, as it focuses &#x0201c;<italic>more on the how than the what</italic>.&#x0201d; He wrote that whereas advancements in natural sciences are documented by dramatic experiments, in computer science&#x02014;which Hartmanis [<xref rid="B56" ref-type="bibr">88</xref>] called the &#x0201c;<italic>engineering of mathematics</italic>&#x0201d;&#x02014;advancements are documented by dramatic demonstrations. The role of experiments in computing, according to Hartmanis and Lin [<xref rid="B59" ref-type="bibr">86</xref>], is to uncover practical issues with theoretical work instead of proving those theories wrong&#x02014;quite a different view compared to an idealized view of the role of experiments in science (as described in, for instance, the old falsificationist, hypothetico-deductive, and deductive-nomological models of science [<xref rid="B61" ref-type="bibr">89</xref>&#x02013;<xref rid="B104" ref-type="bibr">91</xref>].)</p><p>Hartmanis [<xref rid="B57" ref-type="bibr">92</xref>] claimed that there are three differences between natural sciences and computing: in computing theories do not compete with each other as explanations of the fundamental nature of information; in computing anomalies in experimental results do not lead to revision of theories, and in computing there is no history of critical experiments that decide between the validity of competing theories. Hartmanis' [<xref rid="B59" ref-type="bibr">86</xref>, <xref rid="B57" ref-type="bibr">92</xref>] views faced immediate criticism. Loui [<xref rid="B70" ref-type="bibr">93</xref>] responded that, instead of calling computing a new species among sciences, it would be more appropriate to call computer science a new species of engineering. Stewart [<xref rid="B96" ref-type="bibr">94</xref>] responded by writing that computer scientists should strive to make computer science similar to the natural sciences. Dijkstra [<xref rid="B26" ref-type="bibr">95</xref>] responded that it is ridiculous to support computer science and engineering as a &#x0201c;<italic>laboratory discipline</italic> (<italic>i.e., with both theoretical and experimental components</italic>)&#x0201d; if the material taught in computing has a half-life of five years. Finally, even if one accepted the controversial claim that computing has no history of critical experiments that decide between theories, there surely is a history of critical demonstrations that have decided between competing techniques and guided technical development efforts.</p><p>The third common type of objection was concerned with the artificial nature of data and subject matter of computing. McKee [<xref rid="B75" ref-type="bibr">96</xref>] noted that in natural sciences research is based on observations (data), which scientists can explain, predict, and replicate. In the field of computing, McKee continued that there is no data beyond the computer and programs, which behave exactly as they were designed to behave. In a similar manner, also Brooks [<xref rid="B10" ref-type="bibr">57</xref>] argued that computer science is not a science but a synthetic, engineering discipline. The role of experimentation in a synthetic discipline is different from its role in natural sciences (see [<xref rid="B59" ref-type="bibr">86</xref>, <xref rid="B95" ref-type="bibr">97</xref>]).</p><p>The fourth common objection was concerned with terminology. The careless use of experimental terminology&#x02014;not experiments per se&#x02014;has been criticized by various authors (e.g., [<xref rid="B8" ref-type="bibr">60</xref>, <xref rid="B32" ref-type="bibr">79</xref>]). A meta-analysis by Zelkowitz and Wallace [<xref rid="B108" ref-type="bibr">28</xref>, <xref rid="B109" ref-type="bibr">29</xref>] revealed that terms &#x0201c;experiment&#x0201d; and &#x0201c;effective&#x0201d; were often used loosely or ambiguously. The authors wrote, &#x0201c;<italic>Researchers write papers that explain some new technology; then they perform &#x0201c;experiments&#x0201d; to show how effective the technology is</italic>.&#x0201d; Zelkowitz and Wallace's central concern was the same as Denning's [<xref rid="B18" ref-type="bibr">38</xref>]. It is not science to develop something and say that it seemed to work well.</p><p>One could add a fifth objection related to the normative claims that advocates of experimentation sometimes made. Many of those authors who urged computer scientists to experiment more failed to justify <italic>why</italic> computer scientists should aspire to work like scientists or engineers in other fields do. One might justly ask, &#x0201c;If the subject matter of computer science is different from the other sciences, on what grounds should its methods be the same?&#x0201d; Computing is a unique field that introduces an array of novel techniques, so perhaps some room should be left for uniqueness in methodological sense, too.</p><p>In addition to the objections, Gustedt et al. [<xref rid="B50" ref-type="bibr">59</xref>] proposed various assumptions that may explain the lack of experimenting in computing: insufficient funding for experimenting, &#x0201c;missing disposability of dedicated experimental environments,&#x0201d; lack of appreciation of work-intensive experimental results, and lack of methods and tools. Similarly, Tichy [<xref rid="B99" ref-type="bibr">27</xref>] suggested eight (mis)beliefs that he believed to explain why experiments are not more popular: &#x0201c;Traditional scientific method is not applicable,&#x0201d; &#x0201c;The current level of experimentation is good enough,&#x0201d; &#x0201c;Experiments cost too much,&#x0201d; &#x0201c;Demonstrations will suffice,&#x0201d; &#x0201c;There's too much noise in the way,&#x0201d; &#x0201c;Experimentation will slow progress,&#x0201d; &#x0201c;Technology changes too fast,&#x0201d; and &#x0201c;You'll never get it published.&#x0201d; Also Denning [<xref rid="B18" ref-type="bibr">38</xref>] objected against three hypothetical misconceptions about experimental computer science: &#x0201c;It is not novel to repeat an experiment,&#x0201d; &#x0201c;mathematics is the antithesis of experiment,&#x0201d; and &#x0201c;tinkering is experimental science.&#x0201d;</p></sec></sec><sec id="sec3"><title>3. Five Views on Experimental Computer Science</title><p>Discussions about experimental computer science, as presented in the section above, are complicated by the various uses of the terms &#x0201c;to experiment&#x0201d; (the verb), &#x0201c;an experiment&#x0201d; (the noun), &#x0201c;experimentation&#x0201d; (the noun), &#x0201c;experimental&#x0201d; (the adjective), and the myriad derivatives of those words. The confusion was visible already in the &#x0201c;rejuvenating&#x0201d; report, and, while a lot of effort has been spent on clarifying the concepts (e.g., [<xref rid="B108" ref-type="bibr">28</xref>, <xref rid="B19" ref-type="bibr">39</xref>, <xref rid="B100" ref-type="bibr">45</xref>, <xref rid="B17" ref-type="bibr">98</xref>]), there is still no agreement on experimentation terminology. This chapter presents five different uses of the term &#x0201c;experiment,&#x0201d; each relatively common in the computing literature. It should be noted that this chapter passes no judgment on &#x0201c;correct&#x0201d; uses of experimentation terminology; it only describes how it has been used in the literature.</p><sec id="sec3.1"><title>3.1. Feasibility Experiment</title><p>The first and loosest use of the term &#x0201c;experiment&#x0201d; can be found in many texts that report and describe new techniques and tools. Typically, in those texts, it is not known if task <italic>t</italic> can be automated efficiently, reliably, feasibly, cost-efficiently, or by meeting some other simple criterion. A demonstration of experimental (novel, untested, and newly implemented) technology shows that it can indeed be done. Including the terms &#x0201c;demonstration&#x0201d; and &#x0201c;experimental&#x0201d; in the same sentence may sound like a forced marriage of two incompatible concepts, but in the computing literature &#x0201c;experiment&#x0201d; is indeed sometimes used nearly synonymously with &#x0201c;demonstration,&#x0201d; &#x0201c;proof of concept,&#x0201d; or &#x0201c;feasibility proof&#x0201d; as the following examples demonstrate.</p><p>Hartmanis and Lin [<xref rid="B59" ref-type="bibr">86</xref>, pages 213-214] wrote that in computer science and engineering theories develop over years of practice, with &#x0201c;<italic>experiments largely establishing the feasibility of new systems</italic>.&#x0201d; Plaice [<xref rid="B87" ref-type="bibr">99</xref>] wrote, in <italic>ACM Computing Surveys</italic>, that the development of large software systems exemplifies experimentation in computer science&#x02014;&#x0201c;<italic>and experimentation is the correct word, because we often have no idea what these tools will offer until they are actually used</italic>.&#x0201d; He continued to describe that what constitutes an experiment is that a scientist &#x0201c;<italic>carefully defines what must be done and then carefully sets out to do it</italic>.&#x0201d; Feitelson [<xref rid="B32" ref-type="bibr">79</xref>] identified the &#x0201c;demonstration of feasibility&#x0201d; view as one of the three common views to experimental computer science. Feitelson also noted that the &#x0201c;demonstration of feasibility&#x0201d; experiments in applied computer science are largely divorced from theoretical computer science [<xref rid="B32" ref-type="bibr">79</xref>].</p><p>The <italic>ACM FCRC Workshop on Experimental Computer Science</italic> (<ext-link ext-link-type="uri" xlink:href="http://people.csail.mit.edu/rudolph/expcs.pdf">http://people.csail.mit.edu/rudolph/expcs.pdf</ext-link> (retrieved January 30, 2013)) involved &#x0201c;experimental engineering&#x0201d; that produces new &#x0201c;<italic>techniques, insights, and understanding that come from building and using computer systems</italic>.&#x0201d; Hartmanis [<xref rid="B58" ref-type="bibr">85</xref>], though, wanted to make the difference between experiments and demonstrations explicit, calling for computing researchers to acknowledge the central role of demonstrations in the discipline. In their description of experimental computer science Basili and Zelkowitz [<xref rid="B8" ref-type="bibr">60</xref>], too, criticized the &#x0201c;demonstration&#x0201d; view of experimentation in computing: &#x0201c;<italic>experimentation generally means the ability to build a tool or system&#x02014;more an existence proof than experiment</italic>.&#x0201d;</p></sec><sec id="sec3.2"><title>3.2. Trial Experiment</title><p>The second use of the term &#x0201c;experiment&#x0201d; in computing goes further than demonstrations of feasibility. The <italic>trial experiment</italic> evaluates various aspects of the system using some predefined set of variables. Typically, in those studies, it is not known how well a new system <italic>s</italic> meets its specifications or how well it performs. A trial (or test, or experiment) is designed to evaluate (or test, or experiment with) the qualities of the system <italic>s</italic>. Those tests are often laboratory based but can also be conducted in the actual context of use with various limitations.</p><p>Of Gustedt et al.'s [<xref rid="B50" ref-type="bibr">59</xref>] four-way categorization of experiments (<italic>in situ</italic> experiments, emulation, benchmarking, and simulation), the ones that permit the most abstraction&#x02014;emulation, simulation, and benchmarking&#x02014;fall into the trial experiment category. Emulation runs a real application in a model environment, simulation runs a model (limited functionality) application in a model environment, and benchmarking evaluates a model application in a real environment [<xref rid="B50" ref-type="bibr">59</xref>]. Similar &#x0201c;toy-versus-real&#x0201d; distinctions are made in descriptions of experimentation in software engineering [<xref rid="B35" ref-type="bibr">100</xref>].</p><p>McCracken et al. [<xref rid="B74" ref-type="bibr">41</xref>] wrote that experimental research is about &#x0201c;<italic>not only the construction of new kinds of computers and software systems, but also the measurement and testing</italic>&#x0201d; of those systems. Furthermore, trial experiments are not a privilege of the applied side of computing. Glass [<xref rid="B47" ref-type="bibr">47</xref>] proposed that formal theory needs to be validated by experiments, and Fletcher [<xref rid="B37" ref-type="bibr">87</xref>] wrote that theoretical computer scientists may &#x0201c;<italic>resort to trial runs because the problem is mathematically intractable</italic>.&#x0201d; Many types of validation of computational models of phenomena fall under trial experiments.</p></sec><sec id="sec3.3"><title>3.3. Field Experiment</title><p>A third common use of the term &#x0201c;experiment&#x0201d; is similar to trial experiments in that it is also concerned with evaluating a system's performance against some set of measures. However, the <italic>field experiment</italic> takes the system out of the laboratory. Typically, in those studies, it is not known how well a system fulfills its intended purpose and requirements in its sociotechnical context of use. The system is tested in a live environment and measured for things such as performance, usability attributes, or robustness. The term &#x0201c;field experiment&#x0201d; is used in, for instance, information systems [<xref rid="B83" ref-type="bibr">101</xref>], while Gustedt et al. [<xref rid="B50" ref-type="bibr">59</xref>] used the term &#x0201c;<italic>in situ</italic> experiments&#x0201d;: real applications executed at the real scale using real hardware.</p><p>The experimental computer science debates involve various examples of field experiments. A robot car race is an oft-used example of a field experiment, or &#x0201c;<italic>experimentation under real-world conditions</italic>&#x0201d; [<xref rid="B45" ref-type="bibr">58</xref>]. In the DARPA Grand Challenge, driverless vehicles compete with each other in finding their way through various types of environments. A common downside to the field experiment is diminished reproducibility that is brought about by the large number of variables and limited control in live environments. Yet, as they are often quasi-experiments or limited-control experiments, field experiments offer more control than case studies or surveys do [<xref rid="B83" ref-type="bibr">101</xref>].</p></sec><sec id="sec3.4"><title>3.4. Comparison Experiment</title><p>A fourth common use of the term &#x0201c;experiment&#x0201d; refers to comparison between solutions. Many branches of computing research are concerned with looking for the &#x0201c;best&#x0201d; solution for a specific problem [<xref rid="B37" ref-type="bibr">87</xref>] or developing a new way of doing things &#x0201c;better&#x0201d; in one way or another. Typically, in reports of those studies, it is not known if (or rather, &#x0201c;not shown that&#x0201d;) system <italic>A</italic> outperforms system <italic>B</italic> with data set <italic>d</italic> and parameters <italic>p</italic>. An experiment is set up to measure and compare <italic>A</italic>(<italic>d</italic>, <italic>p</italic>) and <italic>B</italic>(<italic>d</italic>, <italic>p</italic>), and the report shows that the new system beats its predecessors in terms of a set of criteria <italic>C</italic>. Johnson [<xref rid="B64" ref-type="bibr">10</xref>] called that type of experimental analysis &#x0201c;horse race papers.&#x0201d; Fletcher [<xref rid="B37" ref-type="bibr">87</xref>] argued that many brands of experimental computer science are most applicable to that type of research (Fletcher referred to [<xref rid="B100" ref-type="bibr">45</xref>, <xref rid="B47" ref-type="bibr">47</xref>]).</p><p>However, although comparison experiments seem &#x0201c;objective&#x0201d; in many ways, they are, in fact, susceptible to bias in a number of ways [<xref rid="B32" ref-type="bibr">79</xref>, <xref rid="B12" ref-type="bibr">102</xref>]. It has been noted that often such experiments do not follow the standard precautions against experimenter bias, such as the blinding principle [<xref rid="B37" ref-type="bibr">87</xref>]. The researcher should not be able to choose <italic>B</italic>, <italic>d</italic>, <italic>C</italic>, or <italic>p</italic> favorably for his or her own system <italic>A</italic>. Zelkowitz and Wallace [<xref rid="B108" ref-type="bibr">28</xref>, <xref rid="B109" ref-type="bibr">29</xref>] argued that &#x0201c;<italic>All too often the experiment is a weak example favoring the proposed technology over alternatives</italic>.&#x0201d; There again, many fields of computing have introduced standard tests, input data, and expected outputs, against which competing solutions can be compared (e.g., [<xref rid="B102" ref-type="bibr">103</xref>]).</p></sec><sec id="sec3.5"><title>3.5. Controlled Experiment</title><p>A fifth common use of the term &#x0201c;experiment&#x0201d; refers to the <italic>controlled experiment</italic>. The controlled experiment is the gold standard of scientific research in many fields of science&#x02014;especially when researchers aim at eliminating confounding causes&#x02014;and it typically enables generalization and prediction. There are numerous uses for the controlled experiment setup; for instance, it is often used for situations where it is not known if two or more variables are associated, or if <italic>x</italic> causes <italic>y</italic>.</p><p>In many arguments for experimental computer science, by &#x0201c;experiment&#x0201d; the author explicitly or implicitly means &#x0201c;controlled experiment&#x0201d; but not always for the same reasons. Peisert [<xref rid="B84" ref-type="bibr">104</xref>] advocated controlled experiments for research on computer security, and their vision was that it promotes increased generalizability and better justified claims about products. Morrison and Snodgrass [<xref rid="B78" ref-type="bibr">71</xref>] wanted to see more generalizable results in software development. Schorr [<xref rid="B93" ref-type="bibr">105</xref>] argued that software and systems, with their increased user interaction, have grown too large for other kinds of methods but controlled experiments. Curtis [<xref rid="B16" ref-type="bibr">106</xref>] and Pfleeger [<xref rid="B85" ref-type="bibr">107</xref>] emphasized the role of controlled experiments in software engineering due to their potential for probabilistic knowledge about causality and increased confidence about what exactly in technical interventions caused the change. Feitelson [<xref rid="B33" ref-type="bibr">108</xref>] promoted evaluations under controlled conditions for all applied computer science.</p></sec></sec><sec id="sec4"><title>4. Discussion</title><p>Experiments played a central part in the development of modern science, and over the centuries experiments also evolved. In modern science experiments play many roles; often in relation to theory but also independent of theory [<xref rid="B51" ref-type="bibr">74</xref>]. In scientific practice, the relationship between theory and experiments has always been fluid, and the many faces of experiment benefit scientific investigation in different ways at different stages of research [<xref rid="B43" ref-type="bibr">82</xref>]. Different fields employ experiment in different ways, and the fit between experiment, apparatus, and theory varies between disciplines [<xref rid="B86" ref-type="bibr">75</xref>].</p><p>The spectrum of experiments is fully visible in computing fields. The breakthroughs in computing happened at a junction of various fields, such as mathematical logic, electrical engineering, and materials science. Since the birth of the stored-program paradigm, computing has adopted methods from an even broader variety of fields. As the disciplines that gave birth to computing each have reserved a very different role for experiments, it is unsurprising that the computing literature uses experimentation terminology in a variety of ways. Sometimes the term refers to empirical research in general, sometimes to evaluation strategies, sometimes to proofs of concept, and sometimes to controlled experiments. The philosophy of experiment reveals some diversity of experimental terminology in fields other than computing, too.</p><p>The role of experiments in computing disciplines has been highly debated since the &#x0201c;rejuvenating experimental computer science&#x0201d; report in 1979. A large number of viewpoints to experimental computer science have advocated a variety of views to experiments, each with their own aims, methods, and assumptions. Experiment terminology also played a key rhetorical role in debates about the future directions of computing as a discipline. As experiments are historically central to sciences, in visions of computing as a discipline it is less risky to adopt and redefine the term &#x0201c;experiment&#x0201d; than to ignore it. The ambiguity of methodology terminology in computing parallels the situation in the philosophy of science, where experiments remained an unopened black box until the 1980s [<xref rid="B2" ref-type="bibr">109</xref>].</p><p>The disciplinary understanding of computing requires a naturalistic view into experiments in the field. There surely is a place for the many normative arguments on experiments in computing that have been structured around idealized views of science and the experiment. But there are also good reasons to challenge the idealized and received views of experiments. How scientists experiment has changed greatly since the days of Galileo and Bacon, as has the role of experiments in the philosophy of science. The form and function of experiments have never been rigid. The experiment has never been a mere judge between right and wrong theories. Experiment is a multidimensional phenomenon, and it is important that those dimensions are appropriately analyzed and discussed in computing, too. Also, insofar as experimentation language in computing needs clarification, it is of great help to understand the different ways in which experiments have been conceived in computing.</p><p>Methodological surveys and meta-analyses of computing research have already revealed a great diversity of views concerning empirical methods in computing, as well as what is called &#x0201c;experiments&#x0201d; in computing. Many of those views are similar to the epistemological strategies of researchers identified in the philosophy of experiment [<xref rid="B42" ref-type="bibr">81</xref>, <xref rid="B43" ref-type="bibr">82</xref>]. Also representing and intervening&#x02014;the two new characteristics of experimentation in modern science [<xref rid="B52" ref-type="bibr">110</xref>]&#x02014;are at the very heart of modern computing, but their manifestations in computing deserve deeper analysis, especially with the age of simulation and virtual experiments.</p><p>Perhaps the use of experimentation terminology in computing should be made stricter and brought in line with some strict definitions of experimental science. Or perhaps our terminology needs to reflect what is really going on in computing and other disciplines. Either way, it is a matter of disciplinary self-understanding to take computing seriously, in its own right, and to study the discipline of computing from a nonidealized, naturalistic viewpoint. This short survey presents five faces of experiments in computing&#x02014;feasibility experiment, trial, field experiment, comparison, and controlled experiment. There is a lot more to experiments in computing than what meets the eye, and we believe that their study can benefit both computing as a discipline and our general understanding of experiments in science.</p></sec></body><back><ack><title>Acknowledgments</title><p>This text is based on an invited talk at European Computer Science Summit 2012, Workshop on the Role and Relevance of Experimentation in Informatics, coordinated by Viola Schiaffonati and chaired by Fabio A. Schreiber, Francesco Bruschi, Jan Van Leeuwen, and Letizia Tanca. The authors would like to thank the workshop organizers and participants, as well as the anonymous peer reviewers, for their ideas and input. This research received funding from the Academy of Finland grant no. 132572.</p></ack><sec sec-type="conflict"><title>Conflict of Interests</title><p>The authors declare that there are no conflict of interests regarding the publication of this paper.</p></sec><ref-list><ref id="B25"><label>1</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Dijkstra</surname><given-names>EW</given-names></name></person-group><article-title>Programming as a discipline of mathematical nature</article-title><source><italic>American Mathematical Monthly</italic></source><year>1974</year><volume>81</volume><issue>6</issue><fpage>608</fpage><lpage>612</lpage></element-citation></ref><ref id="B40"><label>2</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Forsythe</surname><given-names>GE</given-names></name></person-group><article-title>What to do till the computer scientist comes</article-title><source><italic>American Mathematical Monthly</italic></source><year>1968</year><volume>75</volume><fpage>454</fpage><lpage>461</lpage></element-citation></ref><ref id="B53"><label>3</label><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Hammer</surname><given-names>PC</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Scheepmaker</surname><given-names>B</given-names></name><name><surname>Zinn</surname><given-names>KL</given-names></name></person-group><article-title>Computer science and mathematics</article-title><conf-name>Proceedings of the 1st IFIP World Conference on Computer Education</conf-name><conf-date>1970</conf-date><conf-loc>Amsterdam, The Netherlands</conf-loc><publisher-name>International Federation for Information Processing</publisher-name><fpage>I/65</fpage><lpage>I/67</lpage></element-citation></ref><ref id="B54"><label>4</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hamming</surname><given-names>RW</given-names></name></person-group><article-title>Numerical analysis vs. mathematics</article-title><source><italic>Science</italic></source><year>1965</year><volume>148</volume><issue>3669</issue><fpage>473</fpage><lpage>475</lpage><pub-id pub-id-type="other">2-s2.0-37049246918</pub-id><pub-id pub-id-type="pmid">17842833</pub-id></element-citation></ref><ref id="B69"><label>5</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Knuth</surname><given-names>DE</given-names></name></person-group><article-title>Computer science and its relation to mathematics</article-title><source><italic>The American Mathematical Monthly</italic></source><year>1974</year><volume>81</volume><fpage>323</fpage><lpage>343</lpage></element-citation></ref><ref id="B90"><label>6</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ralston</surname><given-names>A</given-names></name><name><surname>Shaw</surname><given-names>M</given-names></name></person-group><article-title>Curriculum '78&#x02014;is computer science really that unmathematical?</article-title><source><italic>Communications of the ACM</italic></source><year>1980</year><volume>23</volume><issue>2</issue><fpage>67</fpage><lpage>70</lpage></element-citation></ref><ref id="B15"><label>7</label><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Cook</surname><given-names>SA</given-names></name></person-group><article-title>The complexity of theorem-proving procedures</article-title><conf-name>Proceedings of the 3rd Annual ACM Symposium on Theory of Computing (STOC '71)</conf-name><conf-date>1971</conf-date><conf-loc>New York, NY, USA</conf-loc><publisher-name>ACM</publisher-name><fpage>151</fpage><lpage>158</lpage></element-citation></ref><ref id="B41"><label>8</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Fortnow</surname><given-names>L</given-names></name><name><surname>Homer</surname><given-names>S</given-names></name></person-group><article-title>A short history of computational complexity</article-title><source><italic>Bulletin of the European Association for Theoretical Computer Science</italic></source><year>2003</year><volume>80</volume></element-citation></ref><ref id="B60"><label>9</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hartmanis</surname><given-names>J</given-names></name><name><surname>Stearns</surname><given-names>RE</given-names></name></person-group><article-title>On the computational complexity of algorithms</article-title><source><italic>Transactions of the American Mathematical Society</italic></source><year>1965</year><volume>117</volume><fpage>285</fpage><lpage>306</lpage></element-citation></ref><ref id="B64"><label>10</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Johnson</surname><given-names>DS</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Goldwasser</surname><given-names>MH</given-names></name><name><surname>Johnson</surname><given-names>DS</given-names></name><name><surname>McGeoch</surname><given-names>CC</given-names></name></person-group><article-title>A theoretician's guide to the experimental analysis of algorithms</article-title><source><italic>Data Structures, Near Neighbor Searches, and Methodology: Fifth and Sixth DIMACS Implementation Challenges</italic></source><year>2002</year><volume>59</volume><publisher-loc>Providence, RI, USA</publisher-loc><publisher-name>American Mathematical Society</publisher-name><fpage>215</fpage><lpage>250</lpage><series>DIMACS Series in Discrete Mathematics and Theoretical Computer Science</series></element-citation></ref><ref id="B68"><label>11</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Knuth</surname><given-names>DE</given-names></name></person-group><source><italic>The Art of Computer Programming</italic></source><year>1997</year><volume>1</volume><edition>1st edition</edition><publisher-loc>Reading, Mass, USA</publisher-loc><publisher-name>Addison-Wesley</publisher-name><series>Fundamental Algorithms</series></element-citation></ref><ref id="B65"><label>12</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Karp</surname><given-names>RM</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Miller</surname><given-names>RE</given-names></name><name><surname>Thatcher</surname><given-names>JW</given-names></name></person-group><article-title>Reducibility among combinatorial problems</article-title><source><italic>Complexity of Computer Computations</italic></source><year>1972</year><publisher-loc>New York, NY, USA</publisher-loc><publisher-name>Plenum Press</publisher-name><fpage>85</fpage><lpage>104</lpage></element-citation></ref><ref id="B23"><label>13</label><element-citation publication-type="other"><person-group person-group-type="author"><name><surname>Dijkstra</surname><given-names>EW</given-names></name></person-group><article-title>On the reliability of programs</article-title><comment>1971, <ext-link ext-link-type="uri" xlink:href="http://www.cs.utexas.edu/users/EWD/ewd03xx/EWD303.PDF">http://www.cs.utexas.edu/users/EWD/ewd03xx/EWD303.PDF</ext-link></comment></element-citation></ref><ref id="B38"><label>14</label><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Floyd</surname><given-names>RW</given-names></name></person-group><article-title>Assigning meanings to programs</article-title><volume>19</volume><conf-name>Proceedings of Symposia in Applied Mathematics</conf-name><conf-date>1967</conf-date><conf-loc>Providence, RI, USA</conf-loc><publisher-name>American Mathematical Society</publisher-name><fpage>19</fpage><lpage>32</lpage></element-citation></ref><ref id="B71"><label>15</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>MacKenzie</surname><given-names>D</given-names></name></person-group><source><italic>Mechanizing Proof: Computing, Risk, and Trust</italic></source><year>2001</year><publisher-loc>Cambridge, Mass, USA</publisher-loc><publisher-name>MIT Press</publisher-name></element-citation></ref><ref id="B73"><label>16</label><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>McCarthy</surname><given-names>J</given-names></name></person-group><article-title>Towards a mathematical science of computation</article-title><conf-name>Proceedings of IFIP Congress 62: Information Processing</conf-name><conf-date>1962</conf-date><conf-loc>Munich, Germany</conf-loc><fpage>21</fpage><lpage>28</lpage></element-citation></ref><ref id="B79"><label>17</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Naur</surname><given-names>P</given-names></name></person-group><article-title>Proof of algorithms by general snapshots</article-title><source><italic>BIT</italic></source><year>1966</year><volume>6</volume><issue>4</issue><fpage>310</fpage><lpage>316</lpage><pub-id pub-id-type="other">2-s2.0-0008849263</pub-id></element-citation></ref><ref id="B107"><label>18</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Wirth</surname><given-names>N</given-names></name></person-group><article-title>Program development by stepwise refinement</article-title><source><italic>Communications of the ACM</italic></source><year>1971</year><volume>14</volume><issue>4</issue><fpage>221</fpage><lpage>227</lpage></element-citation></ref><ref id="B62"><label>19</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Hoare</surname><given-names>CAR</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Maheshwari</surname><given-names>SN</given-names></name></person-group><article-title>The mathematics of programming</article-title><source><italic>Foundations of Software Technology and Theoretical Computer Science</italic></source><year>1985</year><volume>206</volume><publisher-loc>Heidelberg, Germany</publisher-loc><publisher-name>Springer</publisher-name><fpage>1</fpage><lpage>18</lpage><series>Lecture Notes in
Computer Science</series></element-citation></ref><ref id="B4"><label>20</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Aspray</surname><given-names>W</given-names></name></person-group><article-title>Was early entry a competitive advantage? US Universities that entered computing in the 1940s</article-title><source><italic>IEEE Annals of the History of Computing</italic></source><year>2000</year><volume>22</volume><issue>3</issue><fpage>42</fpage><lpage>87</lpage><pub-id pub-id-type="other">2-s2.0-0034225335</pub-id></element-citation></ref><ref id="B30"><label>21</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Ensmenger</surname><given-names>NL</given-names></name></person-group><source><italic>The Computer Boys Take Over: Computers, Programmers, and the Politics of Technical Expertise</italic></source><year>2010</year><publisher-loc>Cambridge, Mass, USA</publisher-loc><publisher-name>MIT Press</publisher-name></element-citation></ref><ref id="B49"><label>22</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Goldstine</surname><given-names>HH</given-names></name></person-group><source><italic>The Computer from Pascal to Von Neumann</italic></source><year>1993</year><publisher-loc>Princeton, NJ, USA</publisher-loc><publisher-name>Princeton University Press</publisher-name></element-citation></ref><ref id="B105"><label>23</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Williams</surname><given-names>MR</given-names></name></person-group><source><italic>A History of Computing Technology</italic></source><year>1997</year><edition>2nd edition</edition><publisher-loc>Los Alamitos, Calif, USA</publisher-loc><publisher-name>IEEE Computer Society Press</publisher-name></element-citation></ref><ref id="B80"><label>24</label><element-citation publication-type="book"><person-group person-group-type="editor"><name><surname>Naur</surname><given-names>P</given-names></name><name><surname>Randell</surname><given-names>B</given-names></name></person-group><source><italic>Software Engineering: Report on A Conference Sponsored
by the Nato Science Committee</italic></source><year>1969</year><publisher-loc>Brussels, Belgium</publisher-loc><publisher-name>NATO Scientific Affairs Division</publisher-name></element-citation></ref><ref id="B72"><label>25</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Mahoney</surname><given-names>MS</given-names></name></person-group><source><italic>Histories of Computing</italic></source><year>2011</year><publisher-loc>Cambridge, Mass, USA</publisher-loc><publisher-name>Harvard University Press</publisher-name></element-citation></ref><ref id="B63"><label>26</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Holloway</surname><given-names>CM</given-names></name></person-group><article-title>Software engineering and epistemology</article-title><source><italic>SIGSOFT Software Engineering Notes</italic></source><year>1995</year><volume>20</volume><issue>2</issue><fpage>20</fpage><lpage>21</lpage></element-citation></ref><ref id="B99"><label>27</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Tichy</surname><given-names>WF</given-names></name></person-group><article-title>Should computer scientists experiment more?</article-title><source><italic>Computer</italic></source><year>1998</year><volume>31</volume><issue>5</issue><fpage>32</fpage><lpage>40</lpage><pub-id pub-id-type="other">2-s2.0-0032070168</pub-id></element-citation></ref><ref id="B108"><label>28</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Zelkowitz</surname><given-names>MV</given-names></name><name><surname>Wallace</surname><given-names>D</given-names></name></person-group><article-title>Experimental validation in software engineering</article-title><source><italic>Information and Software Technology</italic></source><year>1997</year><volume>39</volume><issue>11</issue><fpage>735</fpage><lpage>743</lpage><pub-id pub-id-type="other">2-s2.0-0031337731</pub-id></element-citation></ref><ref id="B109"><label>29</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Zelkowitz</surname><given-names>MV</given-names></name><name><surname>Wallace</surname><given-names>DR</given-names></name></person-group><article-title>Experimental models for validating technology</article-title><source><italic>Computer</italic></source><year>1998</year><volume>31</volume><issue>5</issue><fpage>23</fpage><lpage>31</lpage><pub-id pub-id-type="other">2-s2.0-0032074438</pub-id></element-citation></ref><ref id="B91"><label>30</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Rapaport</surname><given-names>WJ</given-names></name></person-group><article-title>Philosophy of computer science: an introductory course</article-title><source><italic>Teaching Philosophy</italic></source><year>2005</year><volume>28</volume><issue>4</issue><fpage>319</fpage><lpage>341</lpage></element-citation></ref><ref id="B81"><label>31</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Newell</surname><given-names>A</given-names></name><name><surname>Perlis</surname><given-names>AJ</given-names></name><name><surname>Simon</surname><given-names>HA</given-names></name></person-group><article-title>Computer science</article-title><source><italic>Science</italic></source><year>1967</year><volume>157</volume><issue>3795</issue><fpage>1373</fpage><lpage>1374</lpage><pub-id pub-id-type="other">2-s2.0-0014214205</pub-id><pub-id pub-id-type="pmid">6037856</pub-id></element-citation></ref><ref id="B24"><label>32</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Dijkstra</surname><given-names>EW</given-names></name></person-group><article-title>The humble programmer</article-title><source><italic>Communications of the ACM</italic></source><year>1972</year><volume>15</volume><issue>10</issue><fpage>859</fpage><lpage>866</lpage></element-citation></ref><ref id="B39"><label>33</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Forsythe</surname><given-names>GE</given-names></name></person-group><article-title>A university's educational program in computer science</article-title><source><italic>Communications of the ACM</italic></source><year>1967</year><volume>10</volume><issue>1</issue><fpage>3</fpage><lpage>11</lpage></element-citation></ref><ref id="B55"><label>34</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hamming</surname><given-names>RW</given-names></name></person-group><article-title>One man's view of computer science</article-title><source><italic>Journal of the ACM</italic></source><year>1969</year><volume>16</volume><issue>1</issue><fpage>3</fpage><lpage>12</lpage></element-citation></ref><ref id="B66"><label>35</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Khalil</surname><given-names>H</given-names></name><name><surname>Levy</surname><given-names>LS</given-names></name></person-group><article-title>The academic image of computer science</article-title><source><italic>ACM SIGC SE Bulletin</italic></source><year>1978</year><volume>10</volume><issue>2</issue><fpage>31</fpage><lpage>33</lpage></element-citation></ref><ref id="B76"><label>36</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Minsky</surname><given-names>ML</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Der-touzos</surname><given-names>ML</given-names></name><name><surname>Moses</surname><given-names>J</given-names></name></person-group><article-title>Computer science and the representation of knowledge</article-title><source><italic>The Computer Age: A Twenty-Year View</italic></source><year>1979</year><publisher-loc>Cambridge, Mass., USA</publisher-loc><publisher-name>MIT Press</publisher-name><fpage>392</fpage><lpage>421</lpage></element-citation></ref><ref id="B94"><label>37</label><element-citation publication-type="other"><person-group person-group-type="author"><name><surname>Shapiro</surname><given-names>SC</given-names></name></person-group><article-title>Computer science: the study of procedures</article-title><comment>2001, <ext-link ext-link-type="uri" xlink:href="http://www.cse.buffalo.edu/~shapiro/Papers/whatiscs.pdf">http://www.cse.buffalo.edu/~shapiro/Papers/whatiscs.pdf</ext-link></comment></element-citation></ref><ref id="B18"><label>38</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Denning</surname><given-names>PJ</given-names></name></person-group><article-title>ACM president's letter: what is experimental computer science?</article-title><source><italic>Communications of the ACM</italic></source><year>1980</year><volume>23</volume><issue>10</issue><fpage>543</fpage><lpage>544</lpage></element-citation></ref><ref id="B19"><label>39</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Denning</surname><given-names>PJ</given-names></name></person-group><article-title>Performance analysis: wxperimental computer science as its best</article-title><source><italic>Communications of the ACM</italic></source><year>1981</year><volume>24</volume><issue>11</issue><fpage>725</fpage><lpage>727</lpage></element-citation></ref><ref id="B34"><label>40</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Feldman</surname><given-names>JA</given-names></name><name><surname>Sutherland</surname><given-names>WR</given-names></name></person-group><article-title>Rejuvenating experimental computer science: a report to the National Science Foundation and others</article-title><source><italic>Communications of the ACM</italic></source><year>1979</year><volume>22</volume><issue>9</issue><fpage>497</fpage><lpage>502</lpage></element-citation></ref><ref id="B74"><label>41</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>McCracken</surname><given-names>DD</given-names></name><name><surname>Denning</surname><given-names>PJ</given-names></name><name><surname>Brandin</surname><given-names>DH</given-names></name></person-group><article-title>An ACM executive committee position on the crisis in experimental computer science</article-title><source><italic>Communications of the ACM</italic></source><year>1979</year><volume>22</volume><issue>9</issue><fpage>503</fpage><lpage>504</lpage></element-citation></ref><ref id="B22"><label>42</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Denning</surname><given-names>PJ</given-names></name><name><surname>Comer</surname><given-names>DE</given-names></name><name><surname>Gries</surname><given-names>D</given-names></name><etal/></person-group><article-title>Computing as a discipline</article-title><source><italic>Communications of the ACM</italic></source><year>1989</year><volume>32</volume><issue>1</issue><fpage>9</fpage><lpage>23</lpage><pub-id pub-id-type="other">2-s2.0-0024305420</pub-id></element-citation></ref><ref id="B14"><label>43</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Colburn</surname><given-names>TR</given-names></name></person-group><source><italic>Philosophy and Computer Science</italic></source><year>2000</year><publisher-loc>Armonk, NY, USA</publisher-loc><publisher-name>M.E. Sharpe</publisher-name></element-citation></ref><ref id="B5"><label>44</label><element-citation publication-type="other"><person-group person-group-type="author"><name><surname>Bartley</surname><given-names>C</given-names></name></person-group><article-title>Debugging and the scientific method</article-title><comment>2005, <ext-link ext-link-type="uri" xlink:href="http://c2.com/cgi/wiki?DebuggingAndTheScientificMethod">http://c2.com/cgi/wiki?DebuggingAndTheScientificMethod</ext-link></comment></element-citation></ref><ref id="B100"><label>45</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Tichy</surname><given-names>WF</given-names></name><name><surname>Lukowicz</surname><given-names>P</given-names></name><name><surname>Prechelt</surname><given-names>L</given-names></name><name><surname>Heinz</surname><given-names>EA</given-names></name></person-group><article-title>Experimental evaluation in computer science: a quantitative study</article-title><source><italic>The Journal of Systems and Software</italic></source><year>1995</year><volume>28</volume><issue>1</issue><fpage>9</fpage><lpage>18</lpage><pub-id pub-id-type="other">2-s2.0-0029230328</pub-id></element-citation></ref><ref id="B21"><label>46</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Denning</surname><given-names>PJ</given-names></name></person-group><article-title>Is computer science science?</article-title><source><italic>Communications of the ACM</italic></source><year>2005</year><volume>48</volume><issue>4</issue><fpage>27</fpage><lpage>31</lpage><pub-id pub-id-type="other">2-s2.0-16444367583</pub-id></element-citation></ref><ref id="B47"><label>47</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Glass</surname><given-names>RL</given-names></name></person-group><article-title>A structure-based critique of contemporary computing research</article-title><source><italic>The Journal of Systems and Software</italic></source><year>1995</year><volume>28</volume><issue>1</issue><fpage>3</fpage><lpage>7</lpage><pub-id pub-id-type="other">2-s2.0-0029218934</pub-id></element-citation></ref><ref id="B97"><label>48</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Stibitz</surname><given-names>G</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Campbell-Kelly</surname><given-names>M</given-names></name><name><surname>Williams</surname><given-names>MR</given-names></name></person-group><article-title>Introduction to the course on electronic digital computers</article-title><source><italic>The Moore School Lectures</italic></source><year>1946</year><publisher-loc>Cambridge, Mass, USA</publisher-loc><publisher-name>MIT Press</publisher-name><fpage>6</fpage><lpage>18</lpage></element-citation></ref><ref id="B48"><label>49</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Goldstine</surname><given-names>HH</given-names></name></person-group><source><italic>The Computer from Pascal to Von Neumann</italic></source><year>1972</year><publisher-loc>Princeton, NJ, USA</publisher-loc><publisher-name>Princeton University Press</publisher-name></element-citation></ref><ref id="B3"><label>50</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Aspray</surname><given-names>W</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Rojas</surname><given-names>R</given-names></name><name><surname>Hashagen</surname><given-names>U</given-names></name></person-group><article-title>The institute for advanced study computer: a case study in the application of concepts from the history of technology</article-title><source><italic>The First Computers: History and Architectures</italic></source><year>2000</year><publisher-loc>Cambridge, Mass, USA</publisher-loc><publisher-name>MIT Press</publisher-name><fpage>179</fpage><lpage>194</lpage></element-citation></ref><ref id="B29"><label>51</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Easton</surname><given-names>TA</given-names></name></person-group><article-title>Beyond the algorithmization of the sciences</article-title><source><italic>Communications of the ACM</italic></source><year>2006</year><volume>49</volume><issue>5</issue><fpage>31</fpage><lpage>33</lpage><pub-id pub-id-type="other">2-s2.0-33745916460</pub-id></element-citation></ref><ref id="B106"><label>52</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Winsberg</surname><given-names>EB</given-names></name></person-group><source><italic>Science in the Age of Computer Simulation</italic></source><year>2010</year><publisher-loc>Chicago, Ill, USA</publisher-loc><publisher-name>The University of Chicago Press</publisher-name></element-citation></ref><ref id="B27"><label>53</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Dodig-Crnkovic</surname><given-names>G</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Dodig-Crnkovic</surname><given-names>G</given-names></name><name><surname>Giovagnoli</surname><given-names>R</given-names></name></person-group><article-title>Alan Turing's legacy: info-computational philosophy of nature</article-title><source><italic>Computing Nature, Studies in Applied Philosophy, Epistemology and Rational Ethics</italic></source><year>2013</year><volume>7</volume><publisher-loc> Heidelberg, Germany</publisher-loc><publisher-name>Springer</publisher-name><fpage>115</fpage><lpage>123</lpage></element-citation></ref><ref id="B36"><label>54</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Fetzer</surname><given-names>JH</given-names></name></person-group><article-title>The role of models in computer science</article-title><source><italic>Monist</italic></source><year>1999</year><volume>82</volume><issue>1</issue><fpage>20</fpage><lpage>36</lpage></element-citation></ref><ref id="B77"><label>55</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Moor</surname><given-names>JH</given-names></name></person-group><article-title>Three myths of computer science</article-title><source><italic>British Journal for the Philosophy of Science</italic></source><year>1978</year><volume>29</volume><issue>3</issue><fpage>213</fpage><lpage>222</lpage><pub-id pub-id-type="other">2-s2.0-0010859627</pub-id></element-citation></ref><ref id="B82"><label>56</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Oreskes</surname><given-names>N</given-names></name><name><surname>Shrader-Frechette</surname><given-names>K</given-names></name><name><surname>Belitz</surname><given-names>K</given-names></name></person-group><article-title>Verification, validation, and confirmation of numerical models in the earth sciences</article-title><source><italic>Science</italic></source><year>1994</year><volume>263</volume><issue>5147</issue><fpage>641</fpage><lpage>646</lpage><pub-id pub-id-type="other">2-s2.0-0028763687</pub-id><pub-id pub-id-type="pmid">17747657</pub-id></element-citation></ref><ref id="B10"><label>57</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Brooks</surname><given-names>FP</given-names><suffix>Jr.</suffix></name></person-group><article-title>The computer scientist as toolsmith II</article-title><source><italic>Communications of the ACM</italic></source><year>1996</year><volume>39</volume><issue>3</issue><fpage>61</fpage><lpage>68</lpage><pub-id pub-id-type="other">2-s2.0-0030104953</pub-id></element-citation></ref><ref id="B45"><label>58</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Freeman</surname><given-names>PA</given-names></name></person-group><article-title>Back to experimentation</article-title><source><italic>Communications of the ACM</italic></source><year>2008</year><volume>51</volume><issue>1</issue><fpage>21</fpage><lpage>22</lpage><pub-id pub-id-type="other">2-s2.0-37549070387</pub-id></element-citation></ref><ref id="B50"><label>59</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gustedt</surname><given-names>J</given-names></name><name><surname>Jeannot</surname><given-names>E</given-names></name><name><surname>Quinson</surname><given-names>M</given-names></name></person-group><article-title>Experimental methodologies for large-scale systems: a survey</article-title><source><italic>Parallel Processing Letters</italic></source><year>2009</year><volume>19</volume><issue>3</issue><fpage>399</fpage><lpage>418</lpage><pub-id pub-id-type="other">2-s2.0-68749109676</pub-id></element-citation></ref><ref id="B8"><label>60</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Basili</surname><given-names>VR</given-names></name><name><surname>Zelkowitz</surname><given-names>MV</given-names></name></person-group><article-title>Empirical studies to build a science of computer science</article-title><source><italic>Communications of the ACM</italic></source><year>2007</year><volume>50</volume><issue>11</issue><fpage>33</fpage><lpage>37</lpage><pub-id pub-id-type="other">2-s2.0-36048953816</pub-id></element-citation></ref><ref id="B13"><label>61</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Chaitin</surname><given-names>G</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Stuart</surname><given-names>SAJ</given-names></name><name><surname>Dodig-Crnkovic</surname><given-names>G</given-names></name></person-group><article-title>Epistemology as information theory: from Leibniz to &#x02126;</article-title><source><italic>Computation, Information, Cognition: The Nexus and the Liminal</italic></source><year>2006</year><publisher-loc>Newcastle, UK</publisher-loc><publisher-name>Cambridge Scholars</publisher-name><fpage>2</fpage><lpage>17</lpage></element-citation></ref><ref id="B110"><label>62</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Zuse</surname><given-names>K</given-names></name></person-group><source><italic>Calculating Space. Technical Translation AZT-70-164-GEMIT</italic></source><year>1970</year><publisher-loc>Cambridge, Mass, USA</publisher-loc><publisher-name>Massachusetts Institute of Technology</publisher-name></element-citation></ref><ref id="B11"><label>63</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Bunge</surname><given-names>M</given-names></name></person-group><source><italic>Philosophy of Science: From Problem to Theory</italic></source><year>1998</year><volume>1</volume><publisher-loc>New Brunswick, NJ, USA</publisher-loc><publisher-name>Transaction Publishers</publisher-name></element-citation></ref><ref id="B20"><label>64</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Denning</surname><given-names>PJ</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Ralston</surname><given-names>A</given-names></name><name><surname>Reilly</surname><given-names>ED</given-names></name><name><surname>Hemmendinger</surname><given-names>D</given-names></name></person-group><article-title>Computer science</article-title><source><italic>Encyclopedia of Computer Science</italic></source><year>2003</year><edition>4th edition</edition><publisher-loc>Chichester, UK</publisher-loc><publisher-name>John Wiley and Sons</publisher-name><fpage>405</fpage><lpage>419</lpage></element-citation></ref><ref id="B9"><label>65</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Belady</surname><given-names>LA</given-names></name></person-group><article-title>The disapperance of the &#x0201c;pure&#x0201d; software industry</article-title><source><italic>ACM Computing Surveys</italic></source><year>1995</year><volume>27</volume><issue>1</issue><fpage>17</fpage><lpage>18</lpage></element-citation></ref><ref id="B46"><label>66</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Gelernter</surname><given-names>D</given-names></name></person-group><source><italic>The Aesthetics of Computing</italic></source><year>1999</year><publisher-loc>London, UK</publisher-loc><publisher-name>Phoenix</publisher-name></element-citation></ref><ref id="B31"><label>67</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Erdogmus</surname><given-names>H</given-names></name><name><surname>Morisio</surname><given-names>M</given-names></name><name><surname>Torchiano</surname><given-names>M</given-names></name></person-group><article-title>On the effectiveness of the test-first approach to programming</article-title><source><italic>IEEE Transactions on Software Engineering</italic></source><year>2005</year><volume>31</volume><issue>3</issue><fpage>226</fpage><lpage>237</lpage><pub-id pub-id-type="other">2-s2.0-21244432456</pub-id></element-citation></ref><ref id="B7"><label>68</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Basili</surname><given-names>VR</given-names></name><name><surname>Selby</surname><given-names>RW</given-names></name><name><surname>Hutchens</surname><given-names>DH</given-names></name></person-group><article-title>Experimentation in software engineering</article-title><source><italic>IEEE Transactions on Software Engineering</italic></source><year>1986</year><volume>12</volume><issue>7</issue><fpage>733</fpage><lpage>743</lpage><pub-id pub-id-type="other">2-s2.0-0022757468</pub-id></element-citation></ref><ref id="B67"><label>69</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kitchenham</surname><given-names>BA</given-names></name></person-group><article-title>Evaluating software engineering methods and tool part 1: the evaluation context and evaluation methods</article-title><source><italic>SIGSOFT Software Engineering Notes</italic></source><year>1996</year><volume>21</volume><issue>1</issue><fpage>11</fpage><lpage>14</lpage></element-citation></ref><ref id="B6"><label>70</label><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Basili</surname><given-names>VR</given-names></name></person-group><article-title>Role of experimentation in software engineering: past, current, and future</article-title><conf-name>Proceedings of the 18th International Conference on Software Engineering</conf-name><conf-date>March 1996</conf-date><fpage>442</fpage><lpage>449</lpage><pub-id pub-id-type="other">2-s2.0-0029522055</pub-id></element-citation></ref><ref id="B78"><label>71</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Morrison</surname><given-names>CT</given-names></name><name><surname>Snodgrass</surname><given-names>RT</given-names></name></person-group><article-title>Viewpoint computer science can use more science</article-title><source><italic>Communications of the ACM</italic></source><year>2011</year><volume>54</volume><issue>6</issue><fpage>36</fpage><lpage>38</lpage><pub-id pub-id-type="other">2-s2.0-79959945530</pub-id></element-citation></ref><ref id="B98"><label>72</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Telles</surname><given-names>M</given-names></name><name><surname>Hsieh</surname><given-names>Y</given-names></name></person-group><source><italic>The Science of Debugging</italic></source><year>2001</year><publisher-loc>Arizona, Ariz, USA</publisher-loc><publisher-name>Coriolis Group Books</publisher-name></element-citation></ref><ref id="B92"><label>73</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Roychoudhury</surname><given-names>A</given-names></name></person-group><article-title>Debugging as a science, that too, when your program is changing</article-title><source><italic>Electronic Notes in Theoretical Computer Science</italic></source><year>2010</year><volume>266</volume><fpage>3</fpage><lpage>15</lpage><pub-id pub-id-type="other">2-s2.0-77957288606</pub-id></element-citation></ref><ref id="B51"><label>74</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hacking</surname><given-names>I</given-names></name></person-group><article-title>Experimentation and scientific realism</article-title><source><italic>Philosophical Topics</italic></source><year>1983</year><volume>13</volume><issue>1</issue><fpage>71</fpage><lpage>87</lpage></element-citation></ref><ref id="B86"><label>75</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Pickering</surname><given-names>A</given-names></name></person-group><source><italic>The Mangle of Practice: Time, Agency, and Science</italic></source><year>1995</year><publisher-loc>Chicago, Ill, USA</publisher-loc><publisher-name>The University of
Chicago Press</publisher-name></element-citation></ref><ref id="B101"><label>76</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Vincenti</surname><given-names>WG</given-names></name></person-group><source><italic>What Engineers Know and How They Know It: Analytical Studies from Aeronautical History</italic></source><year>1990</year><publisher-loc>London, UK</publisher-loc><publisher-name>The Johns Hopkins University Press</publisher-name></element-citation></ref><ref id="B28"><label>77</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Duhem</surname></name><name><surname>:</surname><given-names>P</given-names></name></person-group><source><italic>La Th&#x000e9;orie Physique: Son Objet et sa Structure</italic></source><year>1906</year><publisher-loc>Paris, France</publisher-loc><publisher-name>Chevalier &#x00026; Rivi&#x000e8;re</publisher-name></element-citation></ref><ref id="B89"><label>78</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Quine</surname><given-names>WVO</given-names></name></person-group><source><italic>Word and Object</italic></source><year>1960</year><publisher-loc>Cambridge, Mass, USA</publisher-loc><publisher-name>MIT Press</publisher-name></element-citation></ref><ref id="B32"><label>79</label><element-citation publication-type="other"><person-group person-group-type="author"><name><surname>Feitelson</surname><given-names>DG</given-names></name></person-group><article-title>Experimental computer science: the need for a cultural change</article-title><comment>Unpublished Manuscript, 2006, <ext-link ext-link-type="uri" xlink:href="http://www.cs.huji.ac.il/~feit/papers/exp05.pdf">http://www.cs.huji.ac.il/~feit/papers/exp05.pdf</ext-link></comment></element-citation></ref><ref id="B1"><label>80</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Amigoni</surname><given-names>F</given-names></name><name><surname>Reggiani</surname><given-names>M</given-names></name><name><surname>Schiaffonati</surname><given-names>V</given-names></name></person-group><article-title>An insightful comparison between experiments in mobile robotics and in science</article-title><source><italic>Autonomous Robots</italic></source><year>2009</year><volume>27</volume><issue>4</issue><fpage>313</fpage><lpage>325</lpage><pub-id pub-id-type="other">2-s2.0-72349083212</pub-id></element-citation></ref><ref id="B42"><label>81</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Franklin</surname><given-names>AD</given-names></name></person-group><source><italic>The Neglect of Experiment</italic></source><year>1986</year><publisher-loc>Cambridge, Mass, USA</publisher-loc><publisher-name>Cambridge University Press</publisher-name></element-citation></ref><ref id="B43"><label>82</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Franklin</surname><given-names>AD</given-names></name></person-group><source><italic>Experiment, Right or Wrong</italic></source><year>1990</year><publisher-loc>Cambridge, UK</publisher-loc><publisher-name>Cambridge University Press</publisher-name></element-citation></ref><ref id="B44"><label>83</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Franklin</surname><given-names>AD</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Zalta</surname><given-names>EN</given-names></name></person-group><article-title>Experiment in physics</article-title><source><italic>The Stanford Encyclopedia of Philosophy</italic></source><year>2012</year><edition>winter edition</edition><publisher-name>Stanford University</publisher-name></element-citation></ref><ref id="B103"><label>84</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Weber</surname><given-names>M</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Zalta</surname><given-names>EN</given-names></name></person-group><article-title>Experiment in biology</article-title><source><italic>The Stanford Encyclopedia of Philosophy</italic></source><year>2012</year><edition>2012 edition</edition><publisher-name>Spring Stanford University</publisher-name></element-citation></ref><ref id="B58"><label>85</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hartmanis</surname><given-names>J</given-names></name></person-group><article-title>Turing award lecture on computational complexity and the nature of computer science</article-title><source><italic>Communications of the ACM</italic></source><year>1994</year><volume>37</volume><issue>10</issue><fpage>37</fpage><lpage>43</lpage><pub-id pub-id-type="other">2-s2.0-0028518072</pub-id></element-citation></ref><ref id="B59"><label>86</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Hartmanis</surname><given-names>J</given-names></name><name><surname>Lin</surname><given-names>H</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Hartmanis</surname><given-names>J</given-names></name><name><surname>Lin</surname><given-names>H</given-names></name></person-group><article-title>What is computer science and engineering?</article-title><source><italic>Hartmanis,Computing the Future: A Broader Agenda for Computer Science and Engineering</italic></source><year>1992</year><publisher-loc>Washington, DC, USA</publisher-loc><publisher-name>National Academy Press</publisher-name><fpage>163</fpage><lpage>216</lpage></element-citation></ref><ref id="B37"><label>87</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Fletcher</surname><given-names>P</given-names></name></person-group><article-title>Readers&#x02019; corner: the role of experiments in computer science</article-title><source><italic>The Journal of Systems and Software</italic></source><year>1995</year><volume>30</volume><issue>1-2</issue><fpage>161</fpage><lpage>163</lpage><pub-id pub-id-type="other">2-s2.0-58149319286</pub-id></element-citation></ref><ref id="B56"><label>88</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hartmanis</surname><given-names>J</given-names></name></person-group><article-title>Nature of computer science and its paradigms</article-title><source><italic>Communications of the ACM</italic></source><year>1981</year><volume>24</volume><issue>6</issue><fpage>353</fpage><lpage>354</lpage></element-citation></ref><ref id="B61"><label>89</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Hempel</surname><given-names>CG</given-names></name></person-group><source><italic>Aspects of Scientific Explanation and Other Essays in the Philosophy of Science</italic></source><year>1965</year><publisher-loc>New York, NY, USA</publisher-loc><publisher-name>The Free Press</publisher-name></element-citation></ref><ref id="B88"><label>90</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Popper</surname><given-names>KR</given-names></name></person-group><source><italic>The Logic of Scientific Discovery</italic></source><year>1959</year><publisher-loc>London, UK</publisher-loc><publisher-name>Routledge</publisher-name></element-citation></ref><ref id="B104"><label>91</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Whewell</surname><given-names>W</given-names></name></person-group><source><italic>History of the Inductive Sciences, from the Earliest to the Present Time</italic></source><year>1857</year><volume>1</volume><edition>3rd edition</edition><publisher-loc>West Strand, NY, USA</publisher-loc><publisher-name>John W. Parker and Son</publisher-name></element-citation></ref><ref id="B57"><label>92</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Hartmanis</surname><given-names>J</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Shyamasundar</surname><given-names>RK</given-names></name></person-group><article-title>Some observations about the nature of computer science</article-title><source><italic>Foundations of Software Technology and Theoretical Computer Science</italic></source><year>1993</year><volume>761</volume><publisher-loc>Heidelberg, Germany</publisher-loc><fpage>1</fpage><lpage>12</lpage><series>Lecture Notes in Computer Science</series></element-citation></ref><ref id="B70"><label>93</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Loui</surname><given-names>MC</given-names></name></person-group><article-title>Computer science is a new engineering discipline</article-title><source><italic>ACM Computing Surveys</italic></source><year>1995</year><volume>27</volume><issue>1</issue><fpage>31</fpage><lpage>32</lpage></element-citation></ref><ref id="B96"><label>94</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Stewart</surname><given-names>NF</given-names></name></person-group><article-title>Science and computer science</article-title><source><italic>ACM Computing Surveys</italic></source><year>1995</year><volume>27</volume><issue>1</issue><fpage>39</fpage><lpage>41</lpage></element-citation></ref><ref id="B26"><label>95</label><element-citation publication-type="other"><person-group person-group-type="author"><name><surname>Dijkstra</surname><given-names>EW</given-names></name></person-group><comment>Computing the future?, Circulated privately, 1992</comment></element-citation></ref><ref id="B75"><label>96</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>McKee</surname><given-names>G</given-names></name></person-group><article-title>Computer science or simply &#x02018;computics&#x02019;?</article-title><source><italic>The Open Channel</italic></source><year>1995</year><volume>28</volume><issue>12</issue><fpage>p. 136</fpage></element-citation></ref><ref id="B95"><label>97</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Simon</surname><given-names>HA</given-names></name></person-group><source><italic>The Sciences of the Artificial</italic></source><year>1969</year><edition>1st edition</edition><publisher-loc>Cambridge, Mass, USA</publisher-loc><publisher-name>MIT Press</publisher-name></element-citation></ref><ref id="B17"><label>98</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Denning</surname><given-names>PJ</given-names></name></person-group><article-title>ACM president's letter: on folk theorems, and folk myths</article-title><source><italic>Communications of the ACM</italic></source><year>1980</year><volume>23</volume><issue>9</issue><fpage>493</fpage><lpage>494</lpage></element-citation></ref><ref id="B87"><label>99</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Plaice</surname><given-names>J</given-names></name></person-group><article-title>Computer science is an experimental science</article-title><source><italic>ACM Computing Surveys</italic></source><year>1995</year><volume>27</volume><issue>1</issue><fpage>p. 33</fpage></element-citation></ref><ref id="B35"><label>100</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Fenton</surname><given-names>N</given-names></name><name><surname>Pfleeger</surname><given-names>SL</given-names></name><name><surname>Glass</surname><given-names>RL</given-names></name></person-group><article-title>Science and substance: a challenge to software engineers</article-title><source><italic>IEEE Software</italic></source><year>1994</year><volume>11</volume><issue>4</issue><fpage>86</fpage><lpage>95</lpage><pub-id pub-id-type="other">2-s2.0-0028464552</pub-id></element-citation></ref><ref id="B83"><label>101</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Palvia</surname><given-names>P</given-names></name><name><surname>Mao</surname><given-names>E</given-names></name><name><surname>Salam</surname><given-names>AF</given-names></name><name><surname>Soliman</surname><given-names>KS</given-names></name></person-group><article-title>Management information systems research: what's there in a methodology?</article-title><source><italic>Communications of the Association for Information Systems</italic></source><year>2003</year><volume>11</volume><issue>16</issue><fpage>1</fpage><lpage>32</lpage></element-citation></ref><ref id="B12"><label>102</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Carreira</surname><given-names>J</given-names></name><name><surname>Silva</surname><given-names>JG</given-names></name></person-group><article-title>Computer science and the Pygmalion effect</article-title><source><italic>Computer</italic></source><year>1998</year><volume>31</volume><issue>2</issue><fpage>116</fpage><lpage>117</lpage><pub-id pub-id-type="other">2-s2.0-0032002232</pub-id></element-citation></ref><ref id="B102"><label>103</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Voorhees</surname><given-names>EM</given-names></name></person-group><article-title>TREC: Continuing information retrieval&#x02019;s tradition of experimentation</article-title><source><italic>Communications of the ACM</italic></source><year>2007</year><volume>50</volume><issue>11</issue><fpage>51</fpage><lpage>54</lpage><pub-id pub-id-type="other">2-s2.0-36049019600</pub-id></element-citation></ref><ref id="B84"><label>104</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Peisert</surname><given-names>S</given-names></name></person-group><article-title>I am a scientist, not a philosopher!</article-title><source><italic>IEEE Security and Privacy</italic></source><year>2007</year><volume>5</volume><issue>4</issue><fpage>48</fpage><lpage>51</lpage><pub-id pub-id-type="other">2-s2.0-34547980734</pub-id></element-citation></ref><ref id="B93"><label>105</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Schorr</surname><given-names>H</given-names></name></person-group><article-title>Experimental computer science</article-title><source><italic>Annals of the New York Academy of Sciences</italic></source><year>1984</year><volume>426</volume><issue>1</issue><fpage>31</fpage><lpage>46</lpage></element-citation></ref><ref id="B16"><label>106</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Curtis</surname><given-names>B</given-names></name></person-group><article-title>Measurement and experimentation in software engineering</article-title><source><italic>Proceedings of the IEEE</italic></source><year>1980</year><volume>68</volume><issue>9</issue><fpage>1144</fpage><lpage>1157</lpage><pub-id pub-id-type="other">2-s2.0-0019058089</pub-id></element-citation></ref><ref id="B85"><label>107</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Pfleeger</surname><given-names>SL</given-names></name></person-group><article-title>Albert Einstein and empirical software engineering</article-title><source><italic>IEEE Computer</italic></source><year>1999</year><volume>32</volume><issue>10</issue><fpage>32</fpage><lpage>37</lpage><pub-id pub-id-type="other">2-s2.0-0032595617</pub-id></element-citation></ref><ref id="B33"><label>108</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Feitelson</surname><given-names>DG</given-names></name></person-group><article-title>Experimental computer science</article-title><source><italic>Communications of the ACM</italic></source><year>2007</year><volume>50</volume><issue>11</issue><fpage>24</fpage><lpage>26</lpage><pub-id pub-id-type="other">2-s2.0-36049045061</pub-id></element-citation></ref><ref id="B2"><label>109</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Arabatzis</surname><given-names>T</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Psillos</surname><given-names>S</given-names></name><name><surname>Curd</surname><given-names>M</given-names></name></person-group><article-title>Experiment</article-title><source><italic>The Routledge Companion to Philosophy of Science</italic></source><year>2008</year><publisher-loc>Abingdon, UK</publisher-loc><publisher-name>Routledge</publisher-name></element-citation></ref><ref id="B52"><label>110</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Hacking</surname><given-names>I</given-names></name></person-group><source><italic>Representing and Intervening: Introductory Topics in the Philosophy of Natural Science</italic></source><year>1983</year><publisher-loc>New York, NY, USA</publisher-loc><publisher-name>Cambridge University Press</publisher-name></element-citation></ref></ref-list></back><floats-group><fig id="fig1" orientation="portrait" position="float"><label>Figure 1</label><caption><p>Cycle of work in test-driven development.</p></caption><graphic xlink:href="TSWJ2014-549398.001"/></fig><table-wrap id="tab1" orientation="portrait" position="float"><label>Table 1</label><caption><p>Analogy between the scientific method, Colburn's [<xref rid="B14" ref-type="bibr">43</xref>] &#x0201c;solution engineering,&#x0201d; and Bartley's [<xref rid="B5" ref-type="bibr">44</xref>] view of debugging.</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left" rowspan="1" colspan="1"> The Scientific method </th><th align="left" rowspan="1" colspan="1"> Solution engineering </th><th align="left" rowspan="1" colspan="1"> Debugging </th></tr></thead><tbody><tr><td align="left" rowspan="1" colspan="1"> Formulate a <italic>hypothesis</italic> for explaining a phenomenon </td><td align="left" rowspan="1" colspan="1"> Formulate an <italic>algorithm</italic> for solving a problem </td><td align="left" rowspan="1" colspan="1"> Make a <italic>guess</italic> as to what causes an identified bug </td></tr><tr><td align="left" colspan="3" rowspan="1">
<hr/>
</td></tr><tr><td align="left" rowspan="1" colspan="1"> Test the hypothesis by conducting an <italic>experiment </italic>
</td><td align="left" rowspan="1" colspan="1"> Test the algorithm by writing and running a <italic>program </italic>
</td><td align="left" rowspan="1" colspan="1"> Test the guess by, for instance, tracing the program states </td></tr><tr><td align="left" colspan="3" rowspan="1">
<hr/>
</td></tr><tr><td align="left" rowspan="1" colspan="1">
<italic>Confirm or disconfirm</italic> the hypothesis by evaluating the results of the experiment </td><td align="left" rowspan="1" colspan="1">
<italic>Accept or reject</italic> the algorithm by evaluating the results of running the program </td><td align="left" rowspan="1" colspan="1">
<italic>Accept or reject</italic> the guess by evaluating the program states </td></tr></tbody></table></table-wrap></floats-group></article>