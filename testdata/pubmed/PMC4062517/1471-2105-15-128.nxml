<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.0 20120330//EN" "JATS-archivearticle1.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:mml="http://www.w3.org/1998/Math/MathML" article-type="product-review" xml:lang="en"><?properties open_access?><front><journal-meta><journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id><journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id><journal-title-group><journal-title>BMC Bioinformatics</journal-title></journal-title-group><issn pub-type="epub">1471-2105</issn><publisher><publisher-name>BioMed Central</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="pmid">24885091</article-id><article-id pub-id-type="pmc">4062517</article-id><article-id pub-id-type="publisher-id">1471-2105-15-128</article-id><article-id pub-id-type="doi">10.1186/1471-2105-15-128</article-id><article-categories><subj-group subj-group-type="heading"><subject>Software</subject></subj-group></article-categories><title-group><article-title>BLASTGrabber: a bioinformatic tool for visualization, analysis and sequence selection of massive BLAST data</article-title></title-group><contrib-group><contrib contrib-type="author" id="A1"><name><surname>Neumann</surname><given-names>Ralf Stefan</given-names></name><xref ref-type="aff" rid="I1">1</xref><email>r.s.neumann@ibv.uio.no</email></contrib><contrib contrib-type="author" id="A2"><name><surname>Kumar</surname><given-names>Surendra</given-names></name><xref ref-type="aff" rid="I1">1</xref><xref ref-type="aff" rid="I2">2</xref><email>surendra.kumar@ibv.uio.no</email></contrib><contrib contrib-type="author" id="A3"><name><surname>Haverkamp</surname><given-names>Thomas Hendricus Augustus</given-names></name><xref ref-type="aff" rid="I3">3</xref><email>t.h.a.haverkamp@ibv.uio.no</email></contrib><contrib contrib-type="author" corresp="yes" id="A4"><name><surname>Shalchian-Tabrizi</surname><given-names>Kamran</given-names></name><xref ref-type="aff" rid="I1">1</xref><email>kamran@ibv.uio.no</email></contrib></contrib-group><aff id="I1"><label>1</label>Section for Genetics and Evolutionary Biology (EVOGENE) and Centre for Epigenetics, Development and Evolution (CEDE), University of Oslo, Oslo, Norway</aff><aff id="I2"><label>2</label>Current address: Department of Clinical Molecular Biology and Laboratory Science (EpiGen), Division of Medicine, Akershus University Hospital, 1478 Akershus, Norway</aff><aff id="I3"><label>3</label>Centre of Ecological and Evolutionary synthesis, Department of Biosciences, University of Oslo, Oslo, Norway</aff><pub-date pub-type="collection"><year>2014</year></pub-date><pub-date pub-type="epub"><day>5</day><month>5</month><year>2014</year></pub-date><volume>15</volume><fpage>128</fpage><lpage>128</lpage><history><date date-type="received"><day>7</day><month>1</month><year>2014</year></date><date date-type="accepted"><day>31</day><month>3</month><year>2014</year></date></history><permissions><copyright-statement>Copyright &#x000a9; 2014 Neumann et al.; licensee BioMed Central Ltd.</copyright-statement><copyright-year>2014</copyright-year><copyright-holder>Neumann et al.; licensee BioMed Central Ltd.</copyright-holder><license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/2.0"><license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/2.0">http://creativecommons.org/licenses/by/2.0</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly credited. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p></license></permissions><self-uri xlink:href="http://www.biomedcentral.com/1471-2105/15/128"/><abstract><sec><title>Background</title><p>Advances in sequencing efficiency have vastly increased the sizes of biological sequence databases, including many thousands of genome-sequenced species. The BLAST algorithm remains the main search engine for retrieving sequence information, and must consequently handle data on an unprecedented scale. This has been possible due to high-performance computers and parallel processing. However, the raw BLAST output from contemporary searches involving thousands of queries becomes ill-suited for direct human processing. Few programs attempt to directly visualize and interpret BLAST output; those that do often provide a mere basic structuring of BLAST data.</p></sec><sec><title>Results</title><p>Here we present a bioinformatics application named BLASTGrabber suitable for high-throughput sequencing analysis. BLASTGrabber, being implemented as a Java application, is OS-independent and includes a user friendly graphical user interface. Text or XML-formatted BLAST output files can be directly imported, displayed and categorized based on BLAST statistics. Query names and FASTA headers can be analysed by text-mining. In addition to visualizing sequence alignments, BLAST data can be ordered as an interactive taxonomy tree. All modes of analysis support selection, export and storage of data. A Java interface-based plugin structure facilitates the addition of customized third party functionality.</p></sec><sec><title>Conclusion</title><p>The BLASTGrabber application introduces new ways of visualizing and analysing massive BLAST output data by integrating taxonomy identification, text mining capabilities and generic multi-dimensional rendering of BLAST hits. The program aims at a non-expert audience in terms of computer skills; the combination of new functionalities makes the program flexible and useful for a broad range of operations.</p></sec></abstract><kwd-group><kwd>Analysis</kwd><kwd>BLAST</kwd><kwd>High-throughput</kwd><kwd>Taxonomy</kwd><kwd>Text-mining</kwd><kwd>Visualization</kwd></kwd-group></article-meta></front><body><sec><title>Background</title><p>Sequence similarity searches have become an integral part of contemporary life sciences [<xref ref-type="bibr" rid="B1">1</xref>]. More than two decades have now passed since the Basic Local Alignment Search Tool (BLAST) was introduced to the bioinformatic community [<xref ref-type="bibr" rid="B2">2</xref>,<xref ref-type="bibr" rid="B3">3</xref>], constituting a breakthrough for rapid similarity search tools [<xref ref-type="bibr" rid="B4">4</xref>]. Despite the staggering changes that have taken place in biology, sequencing and computing technology, BLAST remains the most common used algorithm for sequence similarity searches [<xref ref-type="bibr" rid="B5">5</xref>,<xref ref-type="bibr" rid="B6">6</xref>]. This is reflected by the exceptionally high numbers of citations for the two original BLAST papers (48632 citations [<xref ref-type="bibr" rid="B2">2</xref>], 49238 citations [<xref ref-type="bibr" rid="B3">3</xref>]; Google scholar - January 2014). The continued popularity is due to the intuitive appeal of the algorithm [<xref ref-type="bibr" rid="B4">4</xref>], its speed and efficiency [<xref ref-type="bibr" rid="B7">7</xref>,<xref ref-type="bibr" rid="B8">8</xref>], and being supported by a complete, rigorous statistical theory [<xref ref-type="bibr" rid="B5">5</xref>].</p><p>BLAST has been used for most purposes involving biological sequence searches and alignments, some examples being EST annotation [<xref ref-type="bibr" rid="B4">4</xref>,<xref ref-type="bibr" rid="B9">9</xref>-<xref ref-type="bibr" rid="B11">11</xref>], contig assembly [<xref ref-type="bibr" rid="B12">12</xref>,<xref ref-type="bibr" rid="B13">13</xref>], genomic fragment reconstruction [<xref ref-type="bibr" rid="B14">14</xref>], ORF validation [<xref ref-type="bibr" rid="B5">5</xref>], prediction of protein function and origin [<xref ref-type="bibr" rid="B4">4</xref>,<xref ref-type="bibr" rid="B6">6</xref>], distant homolog [<xref ref-type="bibr" rid="B5">5</xref>] and putative ortholog detection [<xref ref-type="bibr" rid="B15">15</xref>,<xref ref-type="bibr" rid="B16">16</xref>], phylogenetic analysis [<xref ref-type="bibr" rid="B8">8</xref>,<xref ref-type="bibr" rid="B17">17</xref>,<xref ref-type="bibr" rid="B18">18</xref>] and metagenomics [<xref ref-type="bibr" rid="B19">19</xref>].</p><p>BLAST services can be accessed numerous places on the web and are often free of charge; one of most popular is the BLAST implementation hosted by the National Center for Biotechnology Information (NCBI) [<xref ref-type="bibr" rid="B20">20</xref>]. It receives hundreds of thousands requests a day [<xref ref-type="bibr" rid="B21">21</xref>,<xref ref-type="bibr" rid="B22">22</xref>], and presents BLAST results as textual reports with graphical representations of the calculated alignments.</p><p>Such web-based BLAST implementations are convenient to use for the analysis of a small number of sequences. However, both limitations of computational resources and the way results are presented render this approach unfeasible for large BLAST searches that might involve thousands (or even hundreds of thousands) of unique query sequences. In recent years, due to new sequencing technology, high-throughput searches of this magnitude have become a standard situation in many fields of research, such as EST annotation [<xref ref-type="bibr" rid="B4">4</xref>], genomics [<xref ref-type="bibr" rid="B5">5</xref>], metagenomics [<xref ref-type="bibr" rid="B19">19</xref>] and phylogenomics [<xref ref-type="bibr" rid="B23">23</xref>]. In addition, projects without high-throughput sequencing data also exhibit a trend towards increasing query numbers. Examples might be all-against-all comparisons useful in EST annotation [<xref ref-type="bibr" rid="B4">4</xref>], proteome-against-proteome searches in order to identify orthologs [<xref ref-type="bibr" rid="B15">15</xref>], or simply pooling diverse queries together so as to minimize the number of job submissions to an external computing resource.</p><p>In order to perform the actual high-throughput BLAST search, it is necessary to use a stand-alone implementation of the BLAST algorithm rather than relying on web-based public installations such as the NCBI resource [<xref ref-type="bibr" rid="B5">5</xref>]. Many research institutions have solved this by establishing high-performance computing (HPC) clusters hosting BLAST-related databases and pipelines. Since BLAST scales well when parallelized, such HPC installations can handle large high-throughput sequence input in a reasonable amount of time. The results of high-throughput BLAST runs could still present the user with gigabyte-sized text files, the data volume alone representing a challenge for inexperienced users. For specific research fields, massive BLAST output can be analysed by specialized, user-friendly programs that run on ordinary desktop computers &#x02013; such as the MEGAN [<xref ref-type="bibr" rid="B19">19</xref>] program for metagenomics. For many other research fields however, scientists find suitable tools missing [<xref ref-type="bibr" rid="B24">24</xref>]. Surprisingly, this includes generic BLAST output interpreter programs capable of visualizing, analysing and selecting massive BLAST output data.</p><p>This reflects a more general problem in the field of biological data visualization and analysis - contemporary biological data generation has outpaced the traditional data processing approaches [<xref ref-type="bibr" rid="B20">20</xref>,<xref ref-type="bibr" rid="B24">24</xref>]. Some of the important features recently suggested to alleviate the perceived program shortcomings include (amongst others) improved usability, new visual analytical modes, and multi-scale standardized data representations [<xref ref-type="bibr" rid="B24">24</xref>]. Especially intriguing is the challenge of visualizing massive amounts of data in a suitable way. New, innovative visual representation techniques are needed that provide both an overview over, and facilitates detailed navigation into, the mass of information in these data sets [<xref ref-type="bibr" rid="B20">20</xref>]. Hence, improved visualization technologies are clearly amongst the key aspects of knowledge discovery and data mining [<xref ref-type="bibr" rid="B25">25</xref>]; some of which have begun to find their way into mainstream science (for instance, [<xref ref-type="bibr" rid="B26">26</xref>-<xref ref-type="bibr" rid="B28">28</xref>]). Suitable analysis tools will be in demand as sequencing technology become even more efficient.</p><p>We here present a program designed for the effective exploration of BLAST output generated from large scale database searches. It is aimed at an audience of computer non-experts not familiar with programming languages, database retrieval or command-line usage. The program facilitates visualization, analysis and selection of data. Importantly, the application provides new functionalities including taxonomic ordering of data, text search options, multi-dimensional display and a range of possibilities for filtering and downloading of data from public sequence databases. The program, introduction video and additional utilities are freely available for download at <ext-link ext-link-type="uri" xlink:href="http://www.bioportal.no">http://www.bioportal.no</ext-link>.</p></sec><sec><title>Implementation</title><p>BLASTGrabber consists of a downloadable desktop Java application capable of visualizing and selecting high-throughput BLAST output. Taxonomic analysis is supported based on mapping of NCBI gi-numbers to taxonomy identifiers, or alternatively parsing the headers of the BLAST hits. Selected BLAST hits and queries can be exported in text format (Figure&#x000a0;<xref ref-type="fig" rid="F1">1</xref>).</p><fig id="F1" position="float"><label>Figure 1</label><caption><p><bold>Workflow and interaction of the BLASTGrabber program.</bold> The text- or XML-formatted BLAST output can be imported directly into BLASTGrabber. BLASTGrabber supports an iterative mode of analysis, with repeated display, selection, saving and re-opening of BLAST data. Sequences of interest can be exported or downloaded.</p></caption><graphic xlink:href="1471-2105-15-128-1"/></fig><sec><title>The BLASTGrabber application</title><p>The BLASTGrabber desktop application is a GUI-based Java program that will run on Windows-, MacOS- or Linux- based computers. Apart from the Java Runtime Environment (version 1.6 or higher), no other installations are required to run the program. BLASTGrabber will work on low-spec systems including netbooks. For high-throughput data however, 4&#x000a0;GB of memory and a processor comparable to 1.4GHz Core i5 are recommended. BLASTGrabber is installed by extracting the installation zip file containing the BLASTGrabber JAR file and additional files (such as example data sets and NCBI taxonomy file). In order to maximize memory usage, the program can be started from the command line, explicitly specifying the java heap space parameters. Alternatively, double-clicking an included shell file can start BLASTGrabber with 2&#x000a0;GB of maximum heap spaces.</p><p>BLASTGrabber uses a custom input file format (*.bgr file format) to represent BLAST output. This file is produced by an import wizard included in the BLASTGrabber application (for details, see User guide in Additional file <xref ref-type="supplementary-material" rid="S1">1</xref>). The wizard will recognize BLAST XML output format, in addition to standard text-formatted BLAST output from both the current BLAST&#x02009;+&#x02009;version and the older BLAST 2.2.* versions. As taxonomy information is not included in the standard BLAST output, taxonomy identifiers will not be included when importing BLAST files.</p><p>The *.bgr file is formatted as a text file, and lists the included queries and sequences (names or headers together with internal identifiers). Multiple hit sequences with identical FASTA headers are represented only once. In addition, the file contains BLAST statistics such as e-values and bit scores. NCBI TAXIDs can be appended to the *.bgr file after importing by using the included taxonomy wizard. These allow a downstream taxonomical representation in the BLASTGrabber program.</p><p>Upon loading a *.bgr file, the query, sequence and high scoring pair (HSP) attribute objects are instantiated from the *.bgr file and kept in the computer memory until the program is terminated (or another *.bgr file is loaded). Since all the BLAST data is directly available in computer memory, most BLASTGrabber operations complete in a few seconds at the most. Therefore installed memory limits the maximum BLAST data size usable by BLASTGrabber. For BLAST output exceeding these memory limitations, it is possible to break apart the offending BLAST file into multiple smaller parts. These can be imported and opened individually, and possibly merged together again at a later point in the analysis. The effectual maximum BLAST output size can be doubled using this technique.</p><p>The BLASTGrabber installation folder includes the NCBI taxonomy structure compressed into a custom binary format. In order to keep the start-up time and memory overhead as low as possible, only scientific taxonomy names are included. Loading the taxonomy happens automatically at BLASTGrabber start-up, but can be cancelled by the user in order to preserve memory or improve BLASTGrabber start-up time. The BLASTGrabber taxonomy file can be updated by downloading the NCBI taxonomy files and using the included update functionality.</p><p>BLASTGrabber includes text search options; these are implemented using the Java regular expression (regex) API. Graphical representations of hit alignments are based on HSP attributes describing the start and end of the BLAST-generated alignments. No mismatches or gaps are indicated since this information is not included in the *.bgr file. However, sequences and alignments for selected hits can be downloaded from NCBI or extracted from the original BLAST output and query files.</p><p>BLASTGrabber architecture supports third party plugin development not depending on BLASTGrabber source code. Communication to and from the plugin is defined by two specific interfaces; JAR folders in the &#x0201c;plugins&#x0201d; subfolder featuring these required interfaces are loaded and activated at BLASTGrabber start-up (API description and plugin example are provided at the BLASTGrabber download site).</p></sec><sec><title>Example datasets</title><p>Two queries representing the Fibronectin-3 (Pfam id: PF00041) and I-set (Pfam id: PF07679) domains on the <italic>Drosophila melanogaster</italic> &#x0201c;Down syndrome cell adhesion molecule&#x0201d; protein (uniprot id: A1Z6X1_DROME) were used in a BLAST search against the <italic>Drosophila</italic> uniprot reference proteome. These two motifs are found multiple times next to each other in various <italic>Drosophila</italic> multi-domain proteins and are well suited to illustrated sequence alignment visualization in BLASTGrabber.</p><p>The BLASTGrabber visualization and analysis of the example datasets was compared to the JAMBLAST [<xref ref-type="bibr" rid="B29">29</xref>] and BlastViewer (Korilog SARL, Questembert, France) programs. As JAMBLAST utilizes a customary csv format (*.bls) produced by the accompanying NOBLAST [<xref ref-type="bibr" rid="B29">29</xref>] BLAST implementation, identical searches were performed producing the required BLAST output formats. In addition to the NOBLAST *.bls format required by JAMBLAST, BLAST XML output is required for BlastViewer.</p><p>In order demonstrate taxonomy display, a BLAST search (using the BLOSUM45 matrix; expect threshold at e-value&#x02009;=&#x02009;1) was performed against the NCBI &#x0201c;nr&#x0201d; database using the two &#x0201c;Fibronectin-3&#x0201d; and &#x0201c;I-set&#x0201d; queries mentioned above.</p></sec></sec><sec><title>Results and discussion</title><sec><title>User-friendly visualization and analysis</title><p>Despite the continuing high popularity of the BLAST algorithm and ever-increasing data loads, there is a perceived lack of high-throughput-capable, user-friendly generic BLAST output visualisation tools. BLASTGrabber is designed to be usable by computer non-experts and implements a truly multi-query mode-of-analysis which is backed by visual displays. The included taxonomy wizard adds taxonomy identifiers to the BLAST data, allowing the downstream integration of sequence descriptions, origins and hit quality assessment. Also, the BLASTGrabber architecture facilitates the development of third-party plugins, opening new possibilities for BLAST-related analysis algorithms. Some aspects of BLASTGrabber overlap with the JAMBLAST and BlastViewer programs functionalities. Just as BLASTGrabber, both are free and user-friendly Java programs that visualize BLAST files. While supporting many additional analysis features when compared to existing similar programs, we find BLASTGrabber to perform as well or better in terms of data input capacity and speed, all the time retaining minimal installation requirements and an intuitive and user-friendly interface.</p></sec><sec><title>BLASTGrabber uses a matrix viewer of hits and queries</title><p>BLAST-related programs often display hits and queries as a hierarchical structure, where each query is associated with an ordered list of hits for that query. Each hit in turn can possibly contain multiple HSPs for that hit and query; often graphical representations of the hit alignments are displayed. Ordering of hit and HSP lists is done by some measurement of similarity (often configurable), such as e-values or bit scores. This analytical structure, which demands the selection of individual queries to inspect associated hits, is so pervasive it has been claimed to be almost without alternatives [<xref ref-type="bibr" rid="B20">20</xref>].The visualisation structure adopted in BLASTGrabber differs fundamentally from this hierarchical approach. Using the matrix viewer (Figure&#x000a0;<xref ref-type="fig" rid="F2">2</xref>A), hits are distributed in table rows and columns depending on two selected HSP attributes (in this example, two measures of similarity such as e-values, bit scores etc.). The cell content thus represents all hits (i.e. queries with their associated sequences) that conform to the cell specifics (for instance, e-values between e-5 and e-10 and bit scores between 200 and 250). A third attribute statistic is displayed in the cells themselves, the default being the number of hits therein, but other statistics such as average identities are available. Heat map rendering based on these values can be applied. Row and column sort in response to header clicks; lexicographical sorting is implicitly possible by selecting the desired attributes for row and column intervals, in addition to cell statistics.</p><fig id="F2" position="float"><label>Figure 2</label><caption><p><bold>The BLASTGrabber, BlastViewer and JAMBLAST program ordering BLAST hits according to high-scoring hit attributes. A)</bold> Hits are sorted according to e-values and bit scores along the horizontal and vertical axes in the BLASTGrabber matrix viewer. The average identity percentages are displayed inside the table cells. Heat map cell rendering has been applied, reflecting the identity percentage magnitudes. <bold>B)</bold> In the BlastViewer program, the hits for the selected query (&#x0201c;Seq 1&#x0201d;) are sorted by clicking on the corresponding column headers. <bold>C)</bold> The JAMBLAST program supports explicit multiple sorting, as indicated by the arrows shown in the corresponding column headers. Note the additional sorting on the query id column header necessary due to JAMBLAST displaying both query and hit information on the same table row.</p></caption><graphic xlink:href="1471-2105-15-128-2"/></fig><p>This hit-focused (in contrast to query-focused) display mode allows the inspection of hundreds of thousands of hits at a glance, distributed across a few table cells only. Cell contents (i.e. the queries and hits) are easily selected, either by manually clicking on cells of interest, or else defining cut-off values for cell statistics (for instance selecting all hit with e-values below e-5). Selected cells are &#x0201c;grabbed&#x0201d;, i.e. copied to the BLASTGrabber clipboards. Clipboard contents are persistable as *.bgr files, allowing iterative purifying selection by *.bgr file opening, subset selection and persistence.In contrast to BLASTGrabber, the BlastViewer program displays hits and queries as a hierarchical structure. When using multiple-query BLAST output each query must be selected before the associated hits are displayed (Figure&#x000a0;<xref ref-type="fig" rid="F2">2</xref>B). The hit list is sortable by any HSP attribute by simply clicking a column header; top-scoring hits can be exported to a text editor in csv format. Lexicographical sorting (for instance based on e-values, bit scores and identity percentages in this priority) can be accomplished by clicking column headers in the reverse order of the desired priority. BlastViewer visualizes all the BLAST attributes for each of the hits, but because queries have to be selected one at the time without any filtering options, it becomes virtually impossible to use for analysis of thousands, or even hundreds of thousand, queries.JAMBLAST also employs a hierarchical structure but has a slightly different visualization mode than BlastViewer, displaying all queries and top scoring hits in the same table (Figure&#x000a0;<xref ref-type="fig" rid="F2">2</xref>C). The program supports lexicographical ordering by the explicit selection of the HSP attributes sort order. The best hits for multiple queries can be selected in one go with subsequent export to a text editor program. Without clustering multiple hits into fewer categories (such as dividing hits into significant and insignificant e-value categories), it is virtually impossible to extract relevant information from high-throughput data.</p></sec><sec><title>Alignment visualization</title><p>Most BLAST output interpreter programs provide a graphical representation of the BLAST-generated alignment, i.e. the sequence overlap between query and hit. In addition to displaying hits as they are aligned against a selected query, BLASTGrabber can also do the opposite; i.e. display multiple queries overlapping one selected hit. Thus, for instance the position of multiple genes (queries) along one chromosome (one hit) can be displayed.</p><p>&#x0201c;Grabbing&#x0201d; is integrated across BLASTGrabber viewers; hits represented by the displayed alignments can be copied to the clipboards just as for the matrix viewer. Both BLASTGrabber and BlastViewer support a colour-coding schema reflecting the statistical significance of the hit (in BLASTGrabber this is part of a generic heat map rendering based on any selected HSP attribute).BlastViewer (Figure&#x000a0;<xref ref-type="fig" rid="F3">3</xref>B) restricts alignment visualization to one query/sequences pair, displaying all HSPs as coloured bars along the sequence representation. JAMBLAST (Figure&#x000a0;<xref ref-type="fig" rid="F3">3</xref>C) includes just one such alignment at the time; multiple hits for one query cannot be included in one graphical representation. Neither of these two programs can display multiple queries for one selected hit (an included option in BLASTGrabber).All three programs can include the display of alignments in text format (see Figure&#x000a0;<xref ref-type="fig" rid="F4">4</xref>). In BLASTGrabber the alignment is extracted from the original BLAST output file; the JAMBLAST database includes alignments only if the relevant option was included when running NOBLAST. The BlastViewer alignment is read-only and cannot be copied.</p><fig id="F3" position="float"><label>Figure 3</label><caption><p><bold>Comparing the graphical representations of BLAST alignment by the BLASTGrabber, BlastViewer and JAMBLAST programs. A)</bold> HSP alignments from both &#x0201c;Fibronectin-3 motif&#x0201d; and &#x0201c;I-Set motif&#x0201d; queries aligned against the &#x0201c;D1YSG0_DROME Bent&#x0201d; protein sequence in the BLASTGrabber program. Triggered by positioning the mouse over it, details for the first HSP are displayed. Based on a selected HSP attribute such as e-values or bit scores, the HSP representations can be colour-coded as a heat map (not shown because this would hide the HSP query names) <bold>B)</bold> HSP for the &#x0201c;Fibronectin-3 motif&#x0201d; query aligned against same protein in the BlastViewer program. In this program, HSPs for multiple queries cannot be displayed in the same graphical representation. The HSP overlaps are colour-coded (purple, green and black) so as to reflect significance categories. <bold>C)</bold> The same HSPs (&#x0201c;Fibronectin-3 motif&#x0201d; vs. &#x0201c;D1YSG0_DROME Bent&#x0201d;) as displayed by the JAMBLAST program. Again, alignments from multiple queries cannot be displayed along the same sequence.</p></caption><graphic xlink:href="1471-2105-15-128-3"/></fig><fig id="F4" position="float"><label>Figure 4</label><caption><p><bold>BLAST alignment sequences as presented by the three BLAST interpreter programs. A)</bold> Alignment details for a selected hit can be extracted from the original BLAST output file in BLASTGrabber. <bold>B)</bold> After selecting the hit for a given query, alignment details for the HSPs are given in the lower half of the BlastViewer screen. The alignment details cannot, however, be copied or exported. <bold>C)</bold> Likewise, alignment details for a select hit can be visualized in the JAMBLAST program if the actual alignments have been included in the custom NOBLAST output.</p></caption><graphic xlink:href="1471-2105-15-128-4"/></fig></sec><sec><title>Text searches with the description viewer</title><p>JAMBLAST and BlastViewer, like most BLAST output interpreter programs, do not support text searches in the sequence FASTA headers. The BLASTGrabber description viewer (Figure&#x000a0;<xref ref-type="fig" rid="F5">5</xref>) however, supports flexible text search with subsequent hit selection in both headers and BLAST query names. Using regex search terms, matching entries can be selected and copied to BLASTGrabber clipboards. Suitable regex templates are provided, demanding no prior knowledge of Java regex syntax.</p><fig id="F5" position="float"><label>Figure 5</label><caption><p><bold>The BLASTGrabber description viewer. A)</bold> The descriptions in the sequence headers are broken apart by whitespaces, allowing a per-word analysis of the BLAST results. Many hits clearly belong to the &#x0201c;Cell adhesion&#x0201d; and &#x0201c;Down syndrome&#x0201d; protein categories. <bold>B)</bold> Unique headers are displayed in the description viewer. Using a regular expression search term (user-friendly regex templates are provided), all headers containing the &#x0201c;cell adhesion&#x0201d; term are selected, and can now be copied to the BLASTGrabber clipboard.</p></caption><graphic xlink:href="1471-2105-15-128-5"/></fig><p>In addition to performing searches in the complete headers or query names, these can be split into individual words. This allows determination of the relative frequencies of keywords of interest, such as enzyme or species names. Word splitting is regex-based and fully configurable.</p></sec><sec><title>Taxonomical ordering of data in the matrix viewer</title><p>All biological sequences reflect evolutionary events such as adaption, speciation or separation. Thus they are best classified according to a taxonomical order believed to fit these events. The classification of organisms has been revolutionized by DNA sequence analysis, which has become one of the primary means of taxonomic identification of species [<xref ref-type="bibr" rid="B30">30</xref>]. Besides the obvious goal of constructing phylogenies and an evolutionary tree of life, taxonomical sequence information can be utilized in many diverse tasks. These include ecological studies and metagenomics of un-culturable micro-organisms [<xref ref-type="bibr" rid="B31">31</xref>], the removal of contamination (for instance sequences with bacterial origin) from shotgun or contig datasets, or the study of horizontal gene transfer. Taxonomy even facilitates tasks such as protein domain discovery [<xref ref-type="bibr" rid="B32">32</xref>] or protein fold recognition [<xref ref-type="bibr" rid="B33">33</xref>].In BLASTGrabber, the NCBI taxonomy is fully integrated into the matrix viewer (Figure&#x000a0;<xref ref-type="fig" rid="F6">6</xref>), displayed as an interactive tree structure. Along the matrix viewer vertical axis, taxonomy nodes can be expanded or collapsed at will, facilitating selection or taxonomic annotation at a level higher than the species level. The horizontal axis can harbour intervals for any BLAST HSP attribute, or even the queries or hit sequences themselves. Taxonomic distributions can easily be assessed by ordering the columns according to frequency counts or accumulative distributions, possibly using the heat map display mode. Hit selection and &#x0201c;grabbing&#x0201d; is fully supported. For instance hits identified as cnidarian sequences containing the &#x0201c;Fibronectin 3&#x0201d; motif can be &#x0201c;grabbed&#x0201d; by selecting the corresponding cell. Alternatively, undesired groups such as for instance &#x0201c;nematode&#x0201d; can be excluded from further analysis (Figure&#x000a0;<xref ref-type="fig" rid="F6">6</xref>A and B). Neither BlastViewer nor JAMBLAST support this mode of analysis.</p><fig id="F6" position="float"><label>Figure 6</label><caption><p><bold>The NCBI taxonomy as displayed by the BLASTGrabber matrix viewer. A)</bold> The taxonomic distribution for the two Fibronectin-3 and I-Set motifs as queried against the NCBI nr database, represented by the absolute number of hits per query/taxonomic unit. Heat map display mode has been chosen. Most taxonomic groups (such as &#x0201c;Deuterostomia&#x0201d; or &#x0201c;Nematoda&#x0201d;) are collapsed, as indicated by the &#x0201c;+&#x0201d; (expandable) sign. The &#x0201c;Amphimedon Queenslandica&#x0201d;, &#x0201c;Trichoplax adhaerens&#x0201d; and &#x0201c;Capsaspora owczarzaki&#x0201d; species are fully expanded. By far the most hits are found inside the &#x0201c;Deuterostomia&#x0201d; taxonomic group. <bold>B)</bold> Average e-values are displayed inside the same taxonomic setup. Many groups are characterized by rather dubious average e-values, such as the &#x0201c;Deuterostomia&#x0201d;-specific hits (6.08e-1 and 1.21e0 for the two queries). <bold>C)</bold> Analysis of the distribution of e-values for the two queries. Numbers of hits are shown for five e-value intervals. It is now possible to select the leftmost column (containing significant hits with e-values better than e-4), saving and re-loading the selection using the clipboard functionality, so as to recreate the above taxonomic setup with significant hits only.</p></caption><graphic xlink:href="1471-2105-15-128-6"/></fig></sec><sec><title>Splitting and merging files</title><p>Contemporary high-throughput projects may generate millions of sequences used as queries in BLAST similarity searches (for one example, see [<xref ref-type="bibr" rid="B13">13</xref>]). Depending on the installed computer memory, BLASTGrabber can handle BLAST output containing a few hundred thousand queries. If the relevant data set is too substantial to be imported into BLASTGrabber, the BLAST file can be split into smaller parts; each single part can then be imported individually into BLASTGrabber. Subsequently, several *.bgr files can be merged to join previously disjoint data sets.</p></sec><sec><title>BLASTGrabber performance</title><p>Given ever-increasing BLAST output sizes, the ability to handle such data on a normal desktop computer will be considered crucial by many users. In implementing BLASTGrabber, care was taken to minimize the data representation memory footprint. The validity of the approach was confirmed when comparing BLASTGrabber to the BlastViewer and JAMBLAST applications (Table&#x000a0;<xref ref-type="table" rid="T1">1</xref>). Compared to BlastViewer and JAMBLAST, maximum BLASTGrabber capacity was about twice as high.</p><table-wrap position="float" id="T1"><label>Table 1</label><caption><p>Maximum data capacities of the BLAST interpreter programs*</p></caption><table frame="hsides" rules="groups" border="1"><colgroup><col align="left"/><col align="center"/><col align="center"/></colgroup><thead valign="top"><tr><th align="left"><bold>Program</bold></th><th align="center"><bold>Maximal capacity</bold></th><th align="center"><bold>Input file</bold></th></tr></thead><tbody><tr><td align="left" valign="bottom"><bold>BlastViewer</bold><hr/></td><td align="center" valign="bottom">~1.200.000 sequences<hr/></td><td align="center" valign="bottom">XML file (BLAST XML format, size ~2.1&#x000a0;GB )<hr/></td></tr><tr><td align="left" valign="bottom"><bold>JAMBLAST</bold><hr/></td><td align="center" valign="bottom">~1.000.000 sequences<hr/></td><td align="center" valign="bottom">bls file (NOBLAST csv format, size ~290&#x000a0;MB)<hr/></td></tr><tr><td align="left"><bold>BLASTGrabber</bold></td><td align="center">~2.200.000 sequences</td><td align="center">bgr file (custom text format, size&#x02009;~&#x02009;280&#x000a0;MB)</td></tr></tbody></table><table-wrap-foot><p>*as tested on a laptop computer; 1.4 GHz Core i5 2537&#x000a0;M processor, 4&#x000a0;GB of memory, SSD hard drive. Java heap space was set to 4&#x000a0;GB. On average, BLAST data consisted of 100 sequences pr. query.</p></table-wrap-foot></table-wrap><p>Once BLAST data has been loaded, all three programs were quite responsive and performed most operations within seconds, even when being used close to their maximum capacities (for performance examples of typical BLASTGrabber operations, see Table&#x000a0;<xref ref-type="table" rid="T2">2</xref>). Data loading by itself also executed quite rapidly as long as the input file sizes did not exceed ~75 percent of the maximal capacity.</p><table-wrap position="float" id="T2"><label>Table 2</label><caption><p>Performance examples of typical BLASTGrabber operations*</p></caption><table frame="hsides" rules="groups" border="1"><colgroup><col align="left"/><col align="left"/></colgroup><tbody><tr><td align="left" valign="bottom"><bold>BLAST file</bold><hr/></td><td align="left" valign="bottom">~90.000 queries (file size 640&#x000a0;MB )<hr/></td></tr><tr><td align="left" valign="bottom"><bold>Import (creation of *.bgr file)</bold><hr/></td><td align="left" valign="bottom">~5&#x000a0;minutes<hr/></td></tr><tr><td align="left" valign="bottom"><bold>Resulting *.bgr file</bold><hr/></td><td align="left" valign="bottom">~45.000 queries** (file size 140&#x000a0;MB).<hr/></td></tr><tr><td align="left" valign="bottom"><bold>Opening the *.bgr file</bold><hr/></td><td align="left" valign="bottom">~30&#x000a0;seconds<hr/></td></tr><tr><td align="left" valign="bottom"><bold>Opening matrix viewer, 10 rows &#x000d7; 10 cols (100 cells)</bold><hr/></td><td align="left" valign="bottom">~1&#x000a0;second<hr/></td></tr><tr><td align="left" valign="bottom"><bold>Opening matrix viewer, all queries &#x000d7; 10 cols (450.000 cells)</bold><hr/></td><td align="left" valign="bottom">~2&#x000a0;seconds<hr/></td></tr><tr><td align="left" valign="bottom"><bold>Selecting a significant subset (e-value&#x02009;&#x0003c;&#x02009;e-5)</bold><hr/></td><td align="left" valign="bottom">&#x0003c;1&#x000a0;second<hr/></td></tr><tr><td align="left"><bold>Saving the selected significant subset</bold></td><td align="left">~10&#x000a0;seconds</td></tr></tbody></table><table-wrap-foot><p>*as tested on a laptop computer; 1.4 GHz Core i5 2537&#x000a0;M processor, 4&#x000a0;GB of memory, SSD hard drive.</p><p>**on average 23 hits pr. query; queries without hits were excluded from the BLASTGrabber input file.</p></table-wrap-foot></table-wrap></sec></sec><sec sec-type="conclusions"><title>Conclusions</title><p>Along with the rest of bioinformatics, performing BLAST searches has changed substantially over the past two decades. The default textual BLAST output is well adapted to single-query BLAST runs, but next-generation sequencing technologies and growing database sizes demand advanced visualization and analysis capabilities. At the same time, an increasing number of biologists without expert knowledge of programming languages or database retrieval techniques need to work with BLAST and BLAST-related tools.</p><p>We believe that the BLASTGrabber program can serve as such a tool. It enables the handling of large amounts of data on desktop computers, while at the same time delivering new and advanced visualization styles. In addition, the flexible text-mining options provide easy selection of BLAST hits or queries. Finally, the integrated taxonomy display can add an extra dimension to traditional sequence similarity searches.</p></sec><sec><title>Availability and requirements</title><p><bold>Project name:</bold> BLASTGrabber.</p><p><bold>Project home page:</bold><ext-link ext-link-type="uri" xlink:href="http://www.bioportal.no">http://www.bioportal.no</ext-link>.</p><p>This web address also hosts the BLASTGrabber user guide and a tutorial video demonstrating the use of BLASTGrabber. The BLASTGrabber zip file contains both sample files and the user guide.</p><p><bold>Operating system:</bold> Platform independent.</p><p><bold>Programming language:</bold> Java.</p><p><bold>Other requirements:</bold> Java Runtime Environment (version 1.6 or higher).</p><p><bold>License:</bold> Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.</p><p><bold>Any restrictions to use by non-academics:</bold> None.</p></sec><sec><title>Abbreviations</title><p>BLAST: Basic Local Alignment Search Tool; Csv: Comma-separated values; GB: Giga-bytes; JAR: Java Archive; HPC: High-performance computing; HSP: High-scoring pair; MB: Mega-bytes; NCBI: National Center for Biotechnology Information; Regex: Regular expressions; UoO: University of Oslo.</p></sec><sec><title>Competing interests</title><p>The authors declare that they have no competing interests.</p></sec><sec><title>Authors&#x02019; contributions</title><p>Concept and design: RSN, SK, KST. Programming: RSN, SK. Testing: RSN, SK, THAH, KST. Drafting manuscript: RSN, SK. Critical revisions: RSN, SK, THAH, KST. Final manuscript approval: RSN, SK, THAH, KST.</p></sec><sec sec-type="supplementary-material"><title>Supplementary Material</title><supplementary-material content-type="local-data" id="S1"><caption><title>Additional file 1</title><p>BLASTGrabber User Guide.</p></caption><media xlink:href="1471-2105-15-128-S1.pdf"><caption><p>Click here for file</p></caption></media></supplementary-material></sec></body><back><sec><title>Acknowledgements</title><p>We thank student and researchers at the Microbial Evolution Research Group (MERG) and Section for Genetics and Evolutionary Biology for testing of the BLASTGrabber program.</p><sec><title>Funding</title><p>This work has been supported by a VISTA/Statoil fellowship to Thomas H. A. Haverkamp, PhD fellowships to Surendra Kumar and Ralf Neumann and starting grant to Kamran Shalchian-Tabrizi from the University of Oslo.</p></sec></sec><ref-list><ref id="B1"><mixed-citation publication-type="journal"><name><surname>Nilsson</surname><given-names>R</given-names></name><name><surname>Larsson</surname><given-names>K</given-names></name><name><surname>Ursing</surname><given-names>BM</given-names></name><article-title>Galaxie&#x02014;CGI scripts for sequence identification through automated phylogenetic analysis</article-title><source>Bioinformatics</source><year>2004</year><volume>20</volume><fpage>1447</fpage><lpage>1452</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/bth119</pub-id><pub-id pub-id-type="pmid">14976034</pub-id></mixed-citation></ref><ref id="B2"><mixed-citation publication-type="journal"><name><surname>Altschul</surname><given-names>SF</given-names></name><name><surname>Gish</surname><given-names>W</given-names></name><name><surname>Miller</surname><given-names>W</given-names></name><name><surname>Myers</surname><given-names>EW</given-names></name><name><surname>Lipman</surname><given-names>DJ</given-names></name><article-title>Basic local alignment search tool</article-title><source>J Mol Biol</source><year>1990</year><volume>215</volume><fpage>403</fpage><lpage>410</lpage><pub-id pub-id-type="doi">10.1016/S0022-2836(05)80360-2</pub-id><pub-id pub-id-type="pmid">2231712</pub-id></mixed-citation></ref><ref id="B3"><mixed-citation publication-type="journal"><name><surname>Altschul</surname><given-names>SF</given-names></name><name><surname>Madden</surname><given-names>TL</given-names></name><name><surname>Sch&#x000e4;ffer</surname><given-names>AA</given-names></name><name><surname>Zhang</surname><given-names>J</given-names></name><name><surname>Zhang</surname><given-names>Z</given-names></name><name><surname>Miller</surname><given-names>W</given-names></name><name><surname>Lipman</surname><given-names>DJ</given-names></name><article-title>Gapped BLAST and PSI-BLAST: a new generation of protein database search programs</article-title><source>Nucleic Acids Res</source><year>1997</year><volume>25</volume><fpage>3389</fpage><lpage>3402</lpage><pub-id pub-id-type="doi">10.1093/nar/25.17.3389</pub-id><pub-id pub-id-type="pmid">9254694</pub-id></mixed-citation></ref><ref id="B4"><mixed-citation publication-type="journal"><name><surname>Kanehisa</surname><given-names>M</given-names></name><name><surname>Bork</surname><given-names>P</given-names></name><article-title>Bioinformatics in the post-sequence era</article-title><source>Nat Genet</source><year>2003</year><volume>33</volume><fpage>305</fpage><lpage>310</lpage><pub-id pub-id-type="doi">10.1038/ng1109</pub-id><pub-id pub-id-type="pmid">12610540</pub-id></mixed-citation></ref><ref id="B5"><mixed-citation publication-type="book"><name><surname>Koonin</surname><given-names>E</given-names></name><source>Sequence-Evolution-Function: Computational Approaches in Comparative Genomics</source><year>2003</year><publisher-name>Dordrecht: Kluwer Academic Publishers</publisher-name></mixed-citation></ref><ref id="B6"><mixed-citation publication-type="book"><name><surname>Dong</surname><given-names>Q</given-names></name><name><surname>Brendel</surname><given-names>V</given-names></name><person-group person-group-type="editor">Walker JM</person-group><article-title>Computational Identification of Related Proteins</article-title><source>The Proteomics Protocols Handbook</source><year>2005</year><publisher-name>Totowa: Humana Press</publisher-name><fpage>555</fpage><lpage>570</lpage></mixed-citation></ref><ref id="B7"><mixed-citation publication-type="journal"><name><surname>She</surname><given-names>R</given-names></name><name><surname>Shih-Chieh Chu</surname><given-names>J</given-names></name><name><surname>Uyar</surname><given-names>B</given-names></name><name><surname>Wang</surname><given-names>J</given-names></name><name><surname>Wang</surname><given-names>K</given-names></name><name><surname>Chen</surname><given-names>N</given-names></name><article-title>genBlastG: using BLAST searches to build homologous gene models</article-title><source>Bioinformatics</source><year>2011</year><volume>27</volume><fpage>2141</fpage><lpage>2143</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/btr342</pub-id><pub-id pub-id-type="pmid">21653517</pub-id></mixed-citation></ref><ref id="B8"><mixed-citation publication-type="journal"><name><surname>Dereeper</surname><given-names>A</given-names></name><name><surname>Audic</surname><given-names>S</given-names></name><name><surname>Claverie</surname><given-names>J-M</given-names></name><name><surname>Blanc</surname><given-names>G</given-names></name><article-title>BLAST-EXPLORER helps you building datasets for phylogenetic analysis</article-title><source>BMC Evol Biol</source><year>2010</year><volume>10</volume><fpage>1</fpage><lpage>6</lpage><pub-id pub-id-type="doi">10.1186/1471-2148-10-1</pub-id><pub-id pub-id-type="pmid">20044934</pub-id></mixed-citation></ref><ref id="B9"><mixed-citation publication-type="journal"><name><surname>Xing</surname><given-names>L</given-names></name><name><surname>Brendel</surname><given-names>V</given-names></name><article-title>Multi-query sequence BLAST output examination with MuSeqBox</article-title><source>Bioinformatics</source><year>2001</year><volume>17</volume><fpage>744</fpage><lpage>745</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/17.8.744</pub-id><pub-id pub-id-type="pmid">11524378</pub-id></mixed-citation></ref><ref id="B10"><mixed-citation publication-type="journal"><name><surname>Pirooznia</surname><given-names>M</given-names></name><name><surname>Perkins</surname><given-names>EJ</given-names></name><name><surname>Deng</surname><given-names>Y</given-names></name><article-title>Batch Blast Extractor: an automated blastx parser application</article-title><source>BMC Genomics</source><year>2008</year><volume>9</volume><fpage>1</fpage><lpage>5</lpage><pub-id pub-id-type="doi">10.1186/1471-2164-9-1</pub-id><pub-id pub-id-type="pmid">18171476</pub-id></mixed-citation></ref><ref id="B11"><mixed-citation publication-type="journal"><name><surname>Zhao</surname><given-names>S</given-names></name><name><surname>Shao</surname><given-names>C</given-names></name><name><surname>Goropashnaya</surname><given-names>AV</given-names></name><name><surname>Stewart</surname><given-names>NC</given-names></name><name><surname>Xu</surname><given-names>Y</given-names></name><name><surname>T&#x000f8;ien</surname><given-names>&#x000d8;</given-names></name><name><surname>Barnes</surname><given-names>BM</given-names></name><name><surname>Fedorov</surname><given-names>VB</given-names></name><name><surname>Yan</surname><given-names>J</given-names></name><article-title>Genomic analysis of expressed sequence tags in American black bear Ursus americanus</article-title><source>BMC Genomics</source><year>2010</year><volume>11</volume><fpage>201</fpage><pub-id pub-id-type="doi">10.1186/1471-2164-11-201</pub-id><pub-id pub-id-type="pmid">20338065</pub-id></mixed-citation></ref><ref id="B12"><mixed-citation publication-type="journal"><name><surname>Koltes</surname><given-names>J</given-names></name><name><surname>Hu</surname><given-names>Z</given-names></name><name><surname>Fritz</surname><given-names>E</given-names></name><article-title>BEAP: The BLAST Extension and Alignment Program-a tool for contig construction and analysis of preliminary genome sequence</article-title><source>BMC Res Notes</source><year>2009</year><volume>2</volume><fpage>11</fpage><pub-id pub-id-type="doi">10.1186/1756-0500-2-11</pub-id><pub-id pub-id-type="pmid">19159488</pub-id></mixed-citation></ref><ref id="B13"><mixed-citation publication-type="journal"><name><surname>Paquola</surname><given-names>ACM</given-names></name><name><surname>Machado</surname><given-names>AA</given-names></name><name><surname>Reis</surname><given-names>EM</given-names></name><name><surname>da Silva</surname><given-names>AM</given-names></name><name><surname>Verjovski-Almeida</surname><given-names>S</given-names></name><article-title>Zerg: a very fast BLAST parser library</article-title><source>Bioinformatics</source><year>2003</year><volume>19</volume><fpage>1035</fpage><lpage>1036</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/btg122</pub-id><pub-id pub-id-type="pmid">12761068</pub-id></mixed-citation></ref><ref id="B14"><mixed-citation publication-type="journal"><name><surname>Suyama</surname><given-names>M</given-names></name><name><surname>Torrents</surname><given-names>D</given-names></name><name><surname>Bork</surname><given-names>P</given-names></name><article-title>BLAST2GENE: a comprehensive conversion of BLAST output into independent genes and gene fragments</article-title><source>Bioinformatics</source><year>2004</year><volume>20</volume><fpage>1968</fpage><lpage>1970</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/bth172</pub-id><pub-id pub-id-type="pmid">15037510</pub-id></mixed-citation></ref><ref id="B15"><mixed-citation publication-type="journal"><name><surname>Wall</surname><given-names>DP</given-names></name><name><surname>Fraser</surname><given-names>HB</given-names></name><name><surname>Hirsh</surname><given-names>AE</given-names></name><article-title>Detecting putative orthologs</article-title><source>Bioinformatics</source><year>2003</year><volume>19</volume><fpage>1710</fpage><lpage>1711</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/btg213</pub-id><pub-id pub-id-type="pmid">15593400</pub-id></mixed-citation></ref><ref id="B16"><mixed-citation publication-type="journal"><name><surname>Zhao</surname><given-names>S</given-names></name><name><surname>Burki</surname><given-names>F</given-names></name><name><surname>Keeling</surname><given-names>P</given-names></name><article-title>Collodictyon &#x02013; an ancient lineage in the tree of eukaryotes</article-title><source>Mol Biol Evol</source><year>2012</year><volume>29</volume><fpage>1557</fpage><lpage>1568</lpage><pub-id pub-id-type="doi">10.1093/molbev/mss001</pub-id><pub-id pub-id-type="pmid">22319147</pub-id></mixed-citation></ref><ref id="B17"><mixed-citation publication-type="journal"><name><surname>Koski</surname><given-names>LB</given-names></name><name><surname>Golding</surname><given-names>GB</given-names></name><article-title>The closest BLAST hit is often not the nearest neighbor</article-title><source>J Mol Evol</source><year>2001</year><volume>52</volume><fpage>540</fpage><lpage>542</lpage><pub-id pub-id-type="doi">10.1007/s002390010184</pub-id><pub-id pub-id-type="pmid">11443357</pub-id></mixed-citation></ref><ref id="B18"><mixed-citation publication-type="journal"><name><surname>Shalchian-Tabrizi</surname><given-names>K</given-names></name><name><surname>Minge</surname><given-names>MA</given-names></name><name><surname>Espelund</surname><given-names>M</given-names></name><name><surname>Orr</surname><given-names>R</given-names></name><name><surname>Ruden</surname><given-names>T</given-names></name><name><surname>Jakobsen</surname><given-names>KS</given-names></name><name><surname>Cavalier-Smith</surname><given-names>T</given-names></name><article-title>Multigene phylogeny of choanozoa and the origin of animals</article-title><source>PLoS ONE</source><year>2008</year><volume>3</volume><fpage>1</fpage><lpage>7</lpage></mixed-citation></ref><ref id="B19"><mixed-citation publication-type="journal"><name><surname>Huson</surname><given-names>DH</given-names></name><name><surname>Auch</surname><given-names>AF</given-names></name><name><surname>Qi</surname><given-names>J</given-names></name><name><surname>Schuster</surname><given-names>SC</given-names></name><article-title>MEGAN analysis of metagenomic data</article-title><source>Genome Res</source><year>2007</year><volume>17</volume><fpage>377</fpage><lpage>386</lpage><pub-id pub-id-type="doi">10.1101/gr.5969107</pub-id><pub-id pub-id-type="pmid">17255551</pub-id></mixed-citation></ref><ref id="B20"><mixed-citation publication-type="journal"><name><surname>Procter</surname><given-names>JB</given-names></name><name><surname>Thompson</surname><given-names>J</given-names></name><name><surname>Letunic</surname><given-names>I</given-names></name><name><surname>Creevey</surname><given-names>C</given-names></name><name><surname>Jossinet</surname><given-names>F</given-names></name><name><surname>Barton</surname><given-names>GJ</given-names></name><article-title>Visualization of multiple alignments, phylogenies and gene family evolution</article-title><source>Nat Publ Group</source><year>2010</year><volume>7</volume><fpage>S16</fpage><lpage>S25</lpage></mixed-citation></ref><ref id="B21"><mixed-citation publication-type="book"><name><surname>Mount</surname><given-names>DW</given-names></name><source>Bioinformatics: Sequence and Genome Analysis</source><year>2004</year><publisher-name>New York: Cold Spring Harbor Laboratory Press</publisher-name></mixed-citation></ref><ref id="B22"><mixed-citation publication-type="other"><name><surname>Weintraub</surname><given-names>B</given-names></name><article-title>Building BLAST for Coprocessor Accelerators Using Macah</article-title><source>PhD thesis</source><year>2008</year><comment>University of Washington, Computer Science And Engineering</comment></mixed-citation></ref><ref id="B23"><mixed-citation publication-type="journal"><name><surname>Decker</surname><given-names>JE</given-names></name><name><surname>Pires</surname><given-names>JC</given-names></name><name><surname>Conant</surname><given-names>GC</given-names></name><name><surname>McKay</surname><given-names>SD</given-names></name><name><surname>Heaton</surname><given-names>MP</given-names></name><name><surname>Chen</surname><given-names>K</given-names></name><name><surname>Cooper</surname><given-names>A</given-names></name><name><surname>Vilkki</surname><given-names>J</given-names></name><name><surname>Seabury</surname><given-names>CM</given-names></name><name><surname>Caetano</surname><given-names>AR</given-names></name><article-title>Resolving the evolution of extant and extinct ruminants with high-throughput phylogenomics</article-title><source>Proc Natl Acad Sci</source><year>2009</year><volume>106</volume><fpage>18644</fpage><lpage>18649</lpage><pub-id pub-id-type="doi">10.1073/pnas.0904691106</pub-id><pub-id pub-id-type="pmid">19846765</pub-id></mixed-citation></ref><ref id="B24"><mixed-citation publication-type="journal"><name><surname>O&#x02019;Donoghue</surname><given-names>SI</given-names></name><name><surname>Gavin</surname><given-names>A-C</given-names></name><name><surname>Gehlenborg</surname><given-names>N</given-names></name><name><surname>Goodsell</surname><given-names>DS</given-names></name><name><surname>H&#x000e9;rich&#x000e9;</surname><given-names>J-K</given-names></name><name><surname>Nielsen</surname><given-names>CB</given-names></name><name><surname>North</surname><given-names>C</given-names></name><name><surname>Olson</surname><given-names>AJ</given-names></name><name><surname>Procter</surname><given-names>JB</given-names></name><name><surname>Shattuck</surname><given-names>DW</given-names></name><name><surname>Walter</surname><given-names>T</given-names></name><name><surname>Wong</surname><given-names>B</given-names></name><article-title>Visualizing biological data &#x02014; now and in the future</article-title><source>Nat Publ Group</source><year>2010</year><volume>7</volume><fpage>S2</fpage><lpage>S4</lpage></mixed-citation></ref><ref id="B25"><mixed-citation publication-type="journal"><name><surname>Fayyad</surname><given-names>U</given-names></name><name><surname>Piatetsky-Shapiro</surname><given-names>G</given-names></name><name><surname>Smyth</surname><given-names>P</given-names></name><article-title>From data mining to knowledge discovery in databases</article-title><source>AI Mag</source><year>1996</year><volume>17</volume><fpage>37</fpage><lpage>54</lpage></mixed-citation></ref><ref id="B26"><mixed-citation publication-type="journal"><name><surname>Darzentas</surname><given-names>N</given-names></name><article-title>Circoletto: visualizing sequence similarity with circos</article-title><source>Bioinformatics</source><year>2010</year><volume>26</volume><fpage>2620</fpage><lpage>2621</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/btq484</pub-id><pub-id pub-id-type="pmid">20736339</pub-id></mixed-citation></ref><ref id="B27"><mixed-citation publication-type="journal"><name><surname>Otto</surname><given-names>A</given-names></name><name><surname>Bernhardt</surname><given-names>J</given-names></name><name><surname>Meyer</surname><given-names>H</given-names></name><name><surname>Schaffer</surname><given-names>M</given-names></name><name><surname>Herbst</surname><given-names>F-A</given-names></name><name><surname>Siebourg</surname><given-names>J</given-names></name><name><surname>M&#x000e4;der</surname><given-names>U</given-names></name><name><surname>Lalk</surname><given-names>M</given-names></name><name><surname>Hecker</surname><given-names>M</given-names></name><name><surname>Becher</surname><given-names>D</given-names></name><article-title>Systems-wide temporal proteomic profiling in glucose-starved Bacillus subtilis</article-title><source>Nat Commun</source><year>2010</year><volume>1</volume><fpage>1</fpage><lpage>9</lpage><pub-id pub-id-type="pmid">20975674</pub-id></mixed-citation></ref><ref id="B28"><mixed-citation publication-type="journal"><name><surname>Krzywinski</surname><given-names>M</given-names></name><name><surname>Birol</surname><given-names>I</given-names></name><name><surname>Jones</surname><given-names>SJ</given-names></name><name><surname>Marra</surname><given-names>M</given-names></name><article-title>Hive plots--rational approach to visualizing networks</article-title><source>Brief Bioinform</source><year>2011</year><volume>13</volume><fpage>1</fpage><lpage>18</lpage><pub-id pub-id-type="pmid">21441561</pub-id></mixed-citation></ref><ref id="B29"><mixed-citation publication-type="journal"><name><surname>Lagnel</surname><given-names>J</given-names></name><name><surname>Tsigenopoulos</surname><given-names>CS</given-names></name><name><surname>Iliopoulos</surname><given-names>I</given-names></name><article-title>NOBLAST and JAMBLAST: New Options for BLAST and a Java Application Manager for BLAST results</article-title><source>Bioinformatics</source><year>2009</year><volume>25</volume><fpage>824</fpage><lpage>826</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/btp067</pub-id><pub-id pub-id-type="pmid">19181685</pub-id></mixed-citation></ref><ref id="B30"><mixed-citation publication-type="journal"><name><surname>Nilsson</surname><given-names>RH</given-names></name><name><surname>Kristiansson</surname><given-names>E</given-names></name><name><surname>Ryberg</surname><given-names>M</given-names></name><name><surname>Larsson</surname><given-names>KH</given-names></name><article-title>Approaching the taxonomic affiliation of unidentified sequences in public databases&#x02013;an example from the mycorrhizal fungi</article-title><source>BMC Bioinforma</source><year>2005</year><volume>6</volume><fpage>178</fpage><pub-id pub-id-type="doi">10.1186/1471-2105-6-178</pub-id></mixed-citation></ref><ref id="B31"><mixed-citation publication-type="other"><name><surname>Pozhitkov</surname><given-names>A</given-names></name><article-title>Molecular taxonomy. Bioinformatics and practical evaluation.</article-title><source>PhD thesis</source><year>2003</year><comment>Universitet K&#x000f6;ln, Mathematisch-Naturwissenschaftliche Fakult&#x000e4;t</comment></mixed-citation></ref><ref id="B32"><mixed-citation publication-type="journal"><name><surname>Coin</surname><given-names>L</given-names></name><name><surname>Bateman</surname><given-names>A</given-names></name><article-title>Enhanced protein domain discovery using taxonomy</article-title><source>BMC Bioinforma</source><year>2004</year><volume>5</volume><fpage>56</fpage><pub-id pub-id-type="doi">10.1186/1471-2105-5-56</pub-id></mixed-citation></ref><ref id="B33"><mixed-citation publication-type="journal"><name><surname>Yang</surname><given-names>JY</given-names></name><name><surname>Chen</surname><given-names>X</given-names></name><article-title>Improving taxonomy-based protein fold recognition by using global and local features</article-title><source>Proteins Struct Funct Bioinformatics</source><year>2011</year><volume>79</volume><fpage>2053</fpage><lpage>2064</lpage><pub-id pub-id-type="doi">10.1002/prot.23025</pub-id></mixed-citation></ref></ref-list></back></article>