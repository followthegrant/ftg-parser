<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.0 20120330//EN" "JATS-archivearticle1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article"><?properties open_access?><front><journal-meta><journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id><journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id><journal-title-group><journal-title>BMC Bioinformatics</journal-title></journal-title-group><issn pub-type="epub">1471-2105</issn><publisher><publisher-name>BioMed Central</publisher-name><publisher-loc>London</publisher-loc></publisher></journal-meta><article-meta><article-id pub-id-type="pmid">30646844</article-id><article-id pub-id-type="pmc">6334396</article-id><article-id pub-id-type="publisher-id">2597</article-id><article-id pub-id-type="doi">10.1186/s12859-019-2597-8</article-id><article-categories><subj-group subj-group-type="heading"><subject>Software</subject></subj-group></article-categories><title-group><article-title>pblat: a multithread blat algorithm speeding up aligning sequences to genomes</article-title></title-group><contrib-group><contrib contrib-type="author"><name><surname>Wang</surname><given-names>Meng</given-names></name><address><email>wangm@mail.cbi.pku.edu.cn</email></address><xref ref-type="aff" rid="Aff1"/></contrib><contrib contrib-type="author" corresp="yes"><name><surname>Kong</surname><given-names>Lei</given-names></name><address><email>kongl@mail.cbi.pku.edu.cn</email></address><xref ref-type="aff" rid="Aff1"/></contrib><aff id="Aff1"><institution-wrap><institution-id institution-id-type="ISNI">0000 0001 2256 9319</institution-id><institution-id institution-id-type="GRID">grid.11135.37</institution-id><institution>Center for Bioinformatics, State Key Laboratory of Protein and Plant Gene Research, </institution><institution>School of Life Sciences, Peking University, </institution></institution-wrap>Beijing, 100871 People&#x02019;s Republic of China </aff></contrib-group><pub-date pub-type="epub"><day>15</day><month>1</month><year>2019</year></pub-date><pub-date pub-type="pmc-release"><day>15</day><month>1</month><year>2019</year></pub-date><pub-date pub-type="collection"><year>2019</year></pub-date><volume>20</volume><elocation-id>28</elocation-id><history><date date-type="received"><day>27</day><month>3</month><year>2018</year></date><date date-type="accepted"><day>3</day><month>1</month><year>2019</year></date></history><permissions><copyright-statement>&#x000a9; The Author(s). 2019</copyright-statement><license license-type="OpenAccess"><license-p><bold>Open Access</bold>This article is distributed under the terms of the Creative Commons Attribution 4.0 International License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p></license></permissions><abstract id="Abs1"><sec><title>Background</title><p id="Par1">The blat is a widely used sequence alignment tool. It is especially useful for aligning long sequences and gapped mapping, which cannot be performed properly by other fast sequence mappers designed for short reads. However, the blat tool is single threaded and when used to map whole genome or whole transcriptome sequences to reference genomes this program can take days to finish, making it unsuitable for large scale sequencing projects and iterative analysis. Here, we present pblat (parallel blat), a parallelized blat algorithm with multithread and cluster computing support, which functions to rapidly fine map large scale DNA/RNA sequences against genomes.</p></sec><sec><title>Results</title><p id="Par2">The pblat algorithm takes advantage of modern multicore processors and significantly reduces the run time with the number of threads used. pblat utilizes almost equal amount of memory as when running blat. The results generated by pblat are identical with those generated by blat. The pblat tool is easy to install and can run on Linux and Mac OS systems. In addition, we provide a cluster version of pblat (pblat-cluster) running on computing clusters with MPI support.</p></sec><sec><title>Conclusion</title><p id="Par3">pblat is open source and free available for non-commercial users. It is easy to install and easy to use. pblat and pblat-cluster would facilitate the high-throughput mapping of large scale genomic and transcript sequences to reference genomes with both high speed and high precision.</p></sec></abstract><kwd-group xml:lang="en"><title>Keywords</title><kwd>Sequence alignment</kwd><kwd>Genome annotation</kwd><kwd>Parallel computing</kwd><kwd>Cluster computing</kwd></kwd-group><funding-group><award-group><funding-source><institution>National Key Research and Development Program of China</institution></funding-source><award-id>2016YFB0201700</award-id><award-id>2017YFC0908400</award-id><award-id>2017YFC1201200</award-id><principal-award-recipient><name><surname>Kong</surname><given-names>Lei</given-names></name></principal-award-recipient></award-group></funding-group><custom-meta-group><custom-meta><meta-name>issue-copyright-statement</meta-name><meta-value>&#x000a9; The Author(s) 2019</meta-value></custom-meta></custom-meta-group></article-meta></front><body><sec id="Sec1"><title>Background</title><p id="Par6">Blat [<xref ref-type="bibr" rid="CR1">1</xref>] is a sequence alignment tool designed to map DNA, RNA and protein sequences to reference genomes. It is commonly used to locate sequences in a reference genome, find homologous sequences from genomes of closely related species, identify exon-intron boundaries from mRNA sequences and determine gene structures, and to help assemble and annotate genome and transcriptome sequences [<xref ref-type="bibr" rid="CR2">2</xref>]. Although many fast sequence aligners, like BWA [<xref ref-type="bibr" rid="CR3">3</xref>] and Bowtie [<xref ref-type="bibr" rid="CR4">4</xref>], have been developed to map short sequence reads generated by high-throughput sequencing, they are not capable of mapping long reads or sequences with abundant gaps or spliced sequences from discontinues genomic regions [<xref ref-type="bibr" rid="CR5">5</xref>]. In contrast, blat is an ideal tool for such applications with its high sensitivity and precision [<xref ref-type="bibr" rid="CR6">6</xref>, <xref ref-type="bibr" rid="CR7">7</xref>].</p><p id="Par7">However, with the increasing quantity of sequences generated by high throughput sequencing projects, blat cannot meet the speed requirements needed for large-scale analysis and regularly updated annotations. For example, when used to map the whole transcriptome sequences of vertebrates to a reference genome, it would take days to finish using blat. This is due to the blat algorithm being single threaded and, thus, not taking full advantage of modern multicore processors. One might use the GNU parallel [<xref ref-type="bibr" rid="CR8">8</xref>] tool to execute multiple instances of blat in parallel using one or more computers. However, each blat process would load a copy of the whole reference genome and build and store the index of the genome into memory, which might exceed the available physical memory of conventional computers if multiple blat processes run simultaneously.</p><p id="Par8">To overcome these limitations, we present pblat (parallel blat), which functions to speed up blat alignments by implementing multiple thread and cluster computing support. With pblat, all threads share the same memory copy of the whole reference genome and the index. As such, pblat utilizes almost the same amount of memory as blat. The run time is reduced with the number of threads used, and the output results of pblat are identical with that of blat. The cluster version of pblat (pblat-cluster) runs on computer clusters with MPI (Message Passing Interface) support, which is able to help reduce the run time of blat from days to minutes.</p></sec><sec id="Sec2"><title>Implementation</title><p id="Par9">pblat extends the blat algorithm with multiple thread support by employing POSIX threads via the C programming language. pblat employs data-level parallelism. The input query file in FASTA format is virtually divided into the same number of parts as the number of threads specified using the &#x02018;-threads&#x02019; command line option. Each part is comprised of the same number of query sequences to load balance among threads. Each thread takes one part of the input sequences and performs the blat algorithm to align the sequences to the genome. Only one copy of the genome sequences is loaded into memory and all the threads share this memory to query the input sequences against the genome. This makes the memory consumption of pblat keep to the minimum no matter how many threads are used. The outputs of each thread are written to an independent temporary file. After all the threads finish, all of the temporary output files are combined to form the final output file. This ensures that the order of output records corresponds to the order of query sequences in the input file no matter how many threads are used. All of the global variables and static variables in the original blat program are localized to ensure all the variables and subroutines are thread safe.</p><p id="Par10">The cluster version of pblat extends the multithread version of pblat with MPI support. The master process of the pblat-cluster distributes the virtual input query file parts to all of the spawned processes in each computing node via MPI. The spawned processes running in the same computing node are automatically merged and switched to the multithread mode of pblat, sharing the same memory copy of the reference genome and index to minimize the memory requirement per computing node. After all the spawned processes in each computing node finish, the master process combines all of the output files generated by each process to form the final output file.</p></sec><sec id="Sec3"><title>Results</title><sec id="Sec4"><title>Performance evaluation of pbalt</title><p id="Par11">We evaluated the performance of pblat using different number of threads and compared to the results of the original blat. All analyses were performed on a Linux machine with 4 Intel Xeon E7&#x02013;4830 @ 2.13GHz CPUs (32 cores in total, 2 threads per core) and 128G memory. We employed the nucleotide sequences of all human protein-coding transcripts with length range from 1&#x02009;kb to 5&#x02009;kb in the GENCODE release 26 [<xref ref-type="bibr" rid="CR9">9</xref>]. We aligned these sequences to the GRCh38.p10 human reference genome sequences with blat and pblat. The test data consisted of 42,286 transcript sequences. The mean length of the test transcripts was 2440 and the median length was 2226. The blat and pblat analyses, with 2, 4, 8, 16, 24, 32, 40, 48, 56 and 64 threads, were executed to map all the transcripts to the genome.</p><p id="Par12">The results showed that pblat reduced the run time relative to the increasing number of threads used (Fig.&#x000a0;<xref rid="Fig1" ref-type="fig">1</xref>a). Blat took more than 7&#x02009;h to map all the test transcripts to the reference genome, whereas pblat with 16 threads only required approximately 39&#x02009;min to finish, which was 10.97x speedup than the blat. From 2 threads to 32 threads, the speedup of pblat increased with the increasing number of threads used (Fig. <xref rid="Fig1" ref-type="fig">1</xref>b). When using 2 to 8 threads, the speedup increased almost linearly with the number of threads. But the speed of acceleration decreases when using more threads and the run time did not further reduce after 32 threads. The final speedup of this test was 18.61 when using 48 threads. Due to the channel and bandwidth limitation of memory accessing, the acceleration was not proportional to the number of threads used. The memory usage for pblat with any number of threads tested was almost the same as that of blat. The results generated by pblat were completely identical to the results of the blat analysis. Based on these results, we suggest to use half of total CPU cores to get the maximum acceleration, or setting the number of threads as the total number of memory channels to get a high acceleration with economic CPU resource consumptions.<fig id="Fig1"><label>Fig. 1</label><caption><p>Performance evaluation of pblat. <bold>a</bold> timing benchmarks of blat and pblat using different thread numbers (from 2 to 64). Each time represents the mean of three independent executions performed with the same arguments and on the same machine. <bold>b</bold> Speedup of pblat with different number of threads, compared to blat</p></caption><graphic xlink:href="12859_2019_2597_Fig1_HTML" id="MO1"/></fig></p><p id="Par13">To evaluate the performance of pblat on real long-read sequencing data with sequencing errors leading to abundant mismatches and gaps, we adopted the mouse single-cell full length transcript RNA-seq data sequenced on the long-read single-molecule Oxford Nanopore MinION sequencer (ONT) [<xref ref-type="bibr" rid="CR10">10</xref>]. The dataset was downloaded from NCBI Sequence Read Archive (SRA) with accession number SRR5286960. For a single murine B1a cell, 104,990 reads were generated by ONT with the maximum length 6296&#x02009;bp, mean length 1868&#x02009;bp and median length 1787&#x02009;bp. Fast spliced read aligners including HISAT2 [<xref ref-type="bibr" rid="CR11">11</xref>], STAR [<xref ref-type="bibr" rid="CR12">12</xref>] etc., were not compatible with such long reads with high error rates [<xref ref-type="bibr" rid="CR10">10</xref>]. In the original study [<xref ref-type="bibr" rid="CR10">10</xref>], the blat was employed to align these nanopore long reads to the mouse genome and successfully helped identify novel transcript isoforms. We replicated the aligning step using blat and pblat with 8 and 16 threads. The blat program took 935&#x02009;min to align all these reads to GRCm38 genome (primary assembly), while pblat with 8 threads used 149&#x02009;min and pblat with 16 threads took 86&#x02009;min to finish. The speedup for pblat with 8 and 16 threads relative to blat was 6.28 and 10.87, respectively. The speedup was consistent with results in the last analysis. These results showed pblat could significantly accelerate aligning long sequencing reads generated by the Oxford Nanopore and PacBio SMRT (Single Molecule Real-Time) sequencing platforms.</p></sec><sec id="Sec5"><title>Performance evaluation of pblat-cluster</title><p id="Par14">The performance of pblat-cluster was evaluated on a high-performance computing cluster with 15 nodes. Each node had 24 CPU cores @ 2.30GHz (1 thread per core) and 128GB memory. All the nodes were connected by the InfiniBand network and shared a GPFS file system. All the nodes ran Linux system with OpenMPI 3.0.0. The test data was the same as that used in the evaluation of pblat. We evaluated the pblat-cluster with 1, 3, 6, 9, 12 and 15 computing nodes. Each node ran 12 threads. Results indicated that the run time decreased significantly with the increasing number of computing nodes employed (Fig.&#x000a0;<xref rid="Fig2" ref-type="fig">2</xref>). The blat program took 6.4&#x02009;h with one thread on one node to align all the test sequences to the reference genome. The pblat-cluster with one node (12 threads) used 44&#x02009;min. When using 15 nodes, pblat-cluster reduced the time consumption to 6.8&#x02009;min, which was 6.47x speedup than pblat with 12 threads in one node and 51.18x speedup than blat. The speedup would further increase with more computing nodes, but as pblat the acceleration would not be proportional to the number of nodes employed and there is a roof for the maximum speedup. The run time of pblat-cluster is determined by the slowest node. When a node has an extremely long sequence to align which takes much longer time than the other sequences, the total time consumption would be determined by the time used to align this sequence no matter how many nodes are used.<fig id="Fig2"><label>Fig. 2</label><caption><p>&#x02002;Performance evaluation of pblat-cluster. <bold>a</bold> timing benchmarks of pblat-cluster using different number of computing nodes (from 1 to 15), with 12 threads per node. Each time represents the mean of three independent executions performed with the same arguments and on the same cluster. <bold>b</bold> Speedup of pblat-cluster with different number of computing nodes, compared to pblat with one node 12 threads</p></caption><graphic xlink:href="12859_2019_2597_Fig2_HTML" id="MO2"/></fig></p><p id="Par15">We then compared the time consumption when running pblat with 12 threads and that when running pblat-cluster with 12 nodes (1 thread per node). The pblat with 12 threads took 44&#x02009;min to align all the test transcripts to the reference genome. The pblat-cluster with 12 nodes used 39.8&#x02009;min. As expected, pblat-cluster is faster than pblat using the same number of threads, because for pblat-cluster the threads run on different computing nodes, with each node using its own memory of genomes and indexes, they do not compete to access the memory.</p></sec></sec><sec id="Sec6"><title>Conclusion</title><p id="Par16">pblat is open source and the source code is easy to compile by simply typing &#x02018;make&#x02019; to generate the binary program on Linux or Mac OS systems. pblat is also easy to use, and all the command-line options are the same as blat, with only the addition of the &#x02018;-threads&#x02019; option to specify the number of threads to use. Pipelines employing blat could directly switch to using pblat. pblat enables users to take advantage of both the high precision of blat and the high speed available with other popular sequence aligners. Overall, pblat facilitates the rapid analysis and annotation of whole genome and whole transcriptome sequences.</p></sec><sec id="Sec7"><title>Availability and requirements</title><p id="Par17"><bold>Project name:</bold> pblat</p><p id="Par18"><bold>Project home page:</bold>
<ext-link ext-link-type="uri" xlink:href="http://icebert.github.io/pblat">http://icebert.github.io/pblat</ext-link>, <ext-link ext-link-type="uri" xlink:href="http://icebert.github.io/pblat-cluster">http://icebert.github.io/pblat-cluster</ext-link></p><p id="Par19"><bold>Operating systems:</bold> Linux, Mac OS X</p><p id="Par20"><bold>Programming language:</bold> C</p><p id="Par21"><bold>License:</bold> The source code and executables are freely available for academic, nonprofit and personal use. Commercial licensing information is available on the Kent Informatics website (<ext-link ext-link-type="uri" xlink:href="http://www.kentinformatics.com">http://www.kentinformatics.com</ext-link>).</p><p id="Par22"><bold>Any restrictions to use by non-academics:</bold> license needed</p></sec></body><back><glossary><title>Abbreviations</title><def-list><def-item><term>GPFS</term><def><p id="Par4">General parallel file system</p></def></def-item><def-item><term>MPI</term><def><p id="Par5">Message passing interface</p></def></def-item></def-list></glossary><ack><title>Acknowledgements</title><p>We appreciate the early users of pblat for their valuable feedback towards improving the program. Part of the analysis was performed on the Computing Platform of the Center for Life Science, Peking University.</p><sec id="FPar1"><title>Funding</title><p id="Par23">This work was supported by the National Key Research and Development Program of China (2017YFC1201200,&#x000a0;2016YFB0201700, 2017YFC0908400) and the International Collaboration Program for Proteome Biological Big Data and Standard System (2014DFB30030). MW was supported in part by the Postdoctoral Fellowship of Peking-Tsinghua Center for Life Sciences.</p></sec><sec id="FPar2" sec-type="data-availability"><title>Availability of data and materials</title><p id="Par24">Not applicable</p></sec></ack><notes notes-type="author-contribution"><title>Authors&#x02019; contributions</title><p>LK and MW conceived the project. LK and MW designed the program. MW implemented the software and performed evaluations. MW and LK wrote the manuscript. Both authors read and approved the final manuscript.</p></notes><notes notes-type="COI-statement"><sec id="FPar3"><title>Ethics approval and consent to participate</title><p>Not applicable</p></sec><sec id="FPar4"><title>Consent for publication</title><p>Not applicable</p></sec><sec id="FPar5"><title>Competing interests</title><p>The authors declare that they have no competing interests.</p></sec><sec id="FPar6"><title>Publisher&#x02019;s Note</title><p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p></sec></notes><ref-list id="Bib1"><title>References</title><ref id="CR1"><label>1.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kent</surname><given-names>WJ</given-names></name></person-group><article-title>BLAT--the BLAST-like alignment tool</article-title><source>Genome Res</source><year>2002</year><volume>12</volume><issue>4</issue><fpage>656</fpage><lpage>664</lpage><pub-id pub-id-type="doi">10.1101/gr.229202</pub-id><pub-id pub-id-type="pmid">11932250</pub-id></element-citation></ref><ref id="CR2"><label>2.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Yandell</surname><given-names>M</given-names></name><name><surname>Ence</surname><given-names>D</given-names></name></person-group><article-title>A beginner&#x02019;s guide to eukaryotic genome annotation</article-title><source>Nat Rev Genet</source><year>2012</year><volume>13</volume><issue>5</issue><fpage>329</fpage><lpage>342</lpage><pub-id pub-id-type="doi">10.1038/nrg3174</pub-id><pub-id pub-id-type="pmid">22510764</pub-id></element-citation></ref><ref id="CR3"><label>3.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Li</surname><given-names>H</given-names></name><name><surname>Durbin</surname><given-names>R</given-names></name></person-group><article-title>Fast and accurate short read alignment with burrows-wheeler transform</article-title><source>Bioinformatics</source><year>2009</year><volume>25</volume><issue>14</issue><fpage>1754</fpage><lpage>1760</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/btp324</pub-id><pub-id pub-id-type="pmid">19451168</pub-id></element-citation></ref><ref id="CR4"><label>4.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Langmead</surname><given-names>B</given-names></name><name><surname>Trapnell</surname><given-names>C</given-names></name><name><surname>Pop</surname><given-names>M</given-names></name><name><surname>Salzberg</surname><given-names>SL</given-names></name></person-group><article-title>Ultrafast and memory-efficient alignment of short DNA sequences to the human genome</article-title><source>Genome Biol</source><year>2009</year><volume>10</volume><issue>3</issue><fpage>R25</fpage><pub-id pub-id-type="doi">10.1186/gb-2009-10-3-r25</pub-id><pub-id pub-id-type="pmid">19261174</pub-id></element-citation></ref><ref id="CR5"><label>5.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Fonseca</surname><given-names>NA</given-names></name><name><surname>Rung</surname><given-names>J</given-names></name><name><surname>Brazma</surname><given-names>A</given-names></name><name><surname>Marioni</surname><given-names>JC</given-names></name></person-group><article-title>Tools for mapping high-throughput sequencing data</article-title><source>Bioinformatics</source><year>2012</year><volume>28</volume><issue>24</issue><fpage>3169</fpage><lpage>3177</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/bts605</pub-id><pub-id pub-id-type="pmid">23060614</pub-id></element-citation></ref><ref id="CR6"><label>6.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Grant</surname><given-names>GR</given-names></name><name><surname>Farkas</surname><given-names>MH</given-names></name><name><surname>Pizarro</surname><given-names>AD</given-names></name><name><surname>Lahens</surname><given-names>NF</given-names></name><name><surname>Schug</surname><given-names>J</given-names></name><name><surname>Brunk</surname><given-names>BP</given-names></name><name><surname>Stoeckert</surname><given-names>CJ</given-names></name><name><surname>Hogenesch</surname><given-names>JB</given-names></name><name><surname>Pierce</surname><given-names>EA</given-names></name></person-group><article-title>Comparative analysis of RNA-Seq alignment algorithms and the RNA-Seq unified mapper (RUM)</article-title><source>Bioinformatics</source><year>2011</year><volume>27</volume><issue>18</issue><fpage>2518</fpage><lpage>2528</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/btr427</pub-id><pub-id pub-id-type="pmid">21775302</pub-id></element-citation></ref><ref id="CR7"><label>7.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Borozan</surname><given-names>I</given-names></name><name><surname>Watt</surname><given-names>SN</given-names></name><name><surname>Ferretti</surname><given-names>V</given-names></name></person-group><article-title>Evaluation of alignment algorithms for discovery and identification of pathogens using RNA-Seq</article-title><source>PLoS One</source><year>2013</year><volume>8</volume><issue>10</issue><fpage>e76935</fpage><pub-id pub-id-type="doi">10.1371/journal.pone.0076935</pub-id><pub-id pub-id-type="pmid">24204709</pub-id></element-citation></ref><ref id="CR8"><label>8.</label><mixed-citation publication-type="other">Tange O: GNU Parallel - The Command-Line Power Tool. <italic>;</italic>The USENIX Magazine 2011(2):42&#x02013;47.</mixed-citation></ref><ref id="CR9"><label>9.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Harrow</surname><given-names>J</given-names></name><name><surname>Frankish</surname><given-names>A</given-names></name><name><surname>Gonzalez</surname><given-names>JM</given-names></name><name><surname>Tapanari</surname><given-names>E</given-names></name><name><surname>Diekhans</surname><given-names>M</given-names></name><name><surname>Kokocinski</surname><given-names>F</given-names></name><name><surname>Aken</surname><given-names>BL</given-names></name><name><surname>Barrell</surname><given-names>D</given-names></name><name><surname>Zadissa</surname><given-names>A</given-names></name><name><surname>Searle</surname><given-names>S</given-names></name><etal/></person-group><article-title>GENCODE: the reference human genome annotation for the ENCODE project</article-title><source>Genome Res</source><year>2012</year><volume>22</volume><issue>9</issue><fpage>1760</fpage><lpage>1774</lpage><pub-id pub-id-type="doi">10.1101/gr.135350.111</pub-id><pub-id pub-id-type="pmid">22955987</pub-id></element-citation></ref><ref id="CR10"><label>10.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Byrne</surname><given-names>A</given-names></name><name><surname>Beaudin</surname><given-names>AE</given-names></name><name><surname>Olsen</surname><given-names>HE</given-names></name><name><surname>Jain</surname><given-names>M</given-names></name><name><surname>Cole</surname><given-names>C</given-names></name><name><surname>Palmer</surname><given-names>T</given-names></name><name><surname>DuBois</surname><given-names>RM</given-names></name><name><surname>Forsberg</surname><given-names>EC</given-names></name><name><surname>Akeson</surname><given-names>M</given-names></name><name><surname>Vollmers</surname><given-names>C</given-names></name></person-group><article-title>Nanopore long-read RNAseq reveals widespread transcriptional variation among the surface receptors of individual B cells</article-title><source>Nat Commun</source><year>2017</year><volume>8</volume><fpage>16027</fpage><pub-id pub-id-type="doi">10.1038/ncomms16027</pub-id><pub-id pub-id-type="pmid">28722025</pub-id></element-citation></ref><ref id="CR11"><label>11.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kim</surname><given-names>D</given-names></name><name><surname>Langmead</surname><given-names>B</given-names></name><name><surname>Salzberg</surname><given-names>SL</given-names></name></person-group><article-title>HISAT: a fast spliced aligner with low memory requirements</article-title><source>Nat Methods</source><year>2015</year><volume>12</volume><issue>4</issue><fpage>357</fpage><lpage>360</lpage><pub-id pub-id-type="doi">10.1038/nmeth.3317</pub-id><pub-id pub-id-type="pmid">25751142</pub-id></element-citation></ref><ref id="CR12"><label>12.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Dobin</surname><given-names>A</given-names></name><name><surname>Davis</surname><given-names>CA</given-names></name><name><surname>Schlesinger</surname><given-names>F</given-names></name><name><surname>Drenkow</surname><given-names>J</given-names></name><name><surname>Zaleski</surname><given-names>C</given-names></name><name><surname>Jha</surname><given-names>S</given-names></name><name><surname>Batut</surname><given-names>P</given-names></name><name><surname>Chaisson</surname><given-names>M</given-names></name><name><surname>Gingeras</surname><given-names>TR</given-names></name></person-group><article-title>STAR: ultrafast universal RNA-seq aligner</article-title><source>Bioinformatics</source><year>2013</year><volume>29</volume><issue>1</issue><fpage>15</fpage><lpage>21</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/bts635</pub-id><pub-id pub-id-type="pmid">23104886</pub-id></element-citation></ref></ref-list></back></article>