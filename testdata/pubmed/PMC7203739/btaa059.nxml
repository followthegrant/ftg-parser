<!DOCTYPE article
PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD with MathML3 v1.2 20190208//EN" "JATS-archivearticle1-mathml3.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:mml="http://www.w3.org/1998/Math/MathML" article-type="research-article"><?properties open_access?><front><journal-meta><journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id><journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id><journal-id journal-id-type="publisher-id">bioinformatics</journal-id><journal-title-group><journal-title>Bioinformatics</journal-title></journal-title-group><issn pub-type="ppub">1367-4803</issn><issn pub-type="epub">1367-4811</issn><publisher><publisher-name>Oxford University Press</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="pmid">31985791</article-id><article-id pub-id-type="pmc">7203739</article-id><article-id pub-id-type="doi">10.1093/bioinformatics/btaa059</article-id><article-id pub-id-type="publisher-id">btaa059</article-id><article-categories><subj-group subj-group-type="heading"><subject>Original Papers</subject><subj-group subj-group-type="category-toc-heading"><subject>Sequence Analysis</subject></subj-group></subj-group></article-categories><title-group><article-title>Bivartect: accurate and memory-saving breakpoint detection by direct read comparison</article-title></title-group><contrib-group><contrib contrib-type="author"><name><surname>Shimmura</surname><given-names>Keisuke</given-names></name><xref ref-type="aff" rid="btaa059-aff1"/></contrib><contrib contrib-type="author"><contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0002-1526-2754</contrib-id><name><surname>Kato</surname><given-names>Yuki</given-names></name><xref ref-type="corresp" rid="btaa059-cor1"/><!--<email>ykato@rna.med.osaka-u.ac.jp</email>--><xref ref-type="aff" rid="btaa059-aff1"/></contrib><contrib contrib-type="author"><name><surname>Kawahara</surname><given-names>Yukio</given-names></name><xref ref-type="aff" rid="btaa059-aff1"/></contrib></contrib-group><contrib-group><contrib contrib-type="editor"><name><surname>Valencia</surname><given-names>Alfonso</given-names></name><role>Associate Editor</role></contrib></contrib-group><aff id="btaa059-aff1">
<institution>Department of RNA Biology and Neuroscience, Graduate School of Medicine, Osaka University</institution>, Suita, Osaka 565-0871, <country country="JP">Japan</country></aff><author-notes><corresp id="btaa059-cor1">To whom correspondence should be addressed. <email>ykato@rna.med.osaka-u.ac.jp</email></corresp></author-notes><pub-date pub-type="ppub"><day>01</day><month>5</month><year>2020</year></pub-date><pub-date pub-type="epub" iso-8601-date="2020-01-27"><day>27</day><month>1</month><year>2020</year></pub-date><pub-date pub-type="pmc-release"><day>27</day><month>1</month><year>2020</year></pub-date><!-- PMC Release delay is 0 months and 0 days and was based on the <pub-date pub-type="epub"/>. --><volume>36</volume><issue>9</issue><fpage>2725</fpage><lpage>2730</lpage><history><date date-type="received"><day>08</day><month>2</month><year>2019</year></date><date date-type="rev-recd"><day>12</day><month>12</month><year>2019</year></date><date date-type="accepted"><day>22</day><month>1</month><year>2020</year></date></history><permissions><copyright-statement>&#x000a9; The Author(s) 2020. Published by Oxford University Press.</copyright-statement><copyright-year>2020</copyright-year><license license-type="cc-by" xlink:href="http://creativecommons.org/licenses/by/4.0/"><license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p></license></permissions><self-uri xlink:href="btaa059.pdf"/><abstract><title>Abstract</title><sec id="s1"><title>Motivation</title><p>Genetic variant calling with high-throughput sequencing data has been recognized as a useful tool for better understanding of disease mechanism and detection of potential off-target sites in genome editing. Since most of the variant calling algorithms rely on initial mapping onto a reference genome and tend to predict many variant candidates, variant calling remains challenging in terms of predicting variants with low false positives.</p></sec><sec id="s2"><title>Results</title><p>Here we present Bivartect, a simple yet versatile variant caller based on direct comparison of short sequence reads between normal and mutated samples. Bivartect can detect not only single nucleotide variants but also insertions/deletions, inversions and their complexes. Bivartect achieves high predictive performance with an elaborate memory-saving mechanism, which allows Bivartect to run on a computer with a single node for analyzing small omics data. Tests with simulated benchmark and real genome-editing data indicate that Bivartect was comparable to state-of-the-art variant callers in positive predictive value for detection of single nucleotide variants, even though it yielded a substantially small number of candidates. These results suggest that Bivartect, a reference-free approach, will contribute to the identification of germline mutations as well as off-target sites introduced during genome editing with high accuracy.</p></sec><sec id="s3"><title>Availability and implementation</title><p>Bivartect is implemented in C<sup>++</sup> and available along with <italic>in silico</italic> simulated data at https://github.com/ykat0/bivartect.</p></sec><sec id="s4"><title>Supplementary information</title><p>
<ext-link ext-link-type="uri" xlink:href="https://academic.oup.com/bioinformatics/article-lookup/doi/10.1093/bioinformatics/btaa059#supplementary-data">Supplementary data</ext-link> are available at <italic>Bioinformatics</italic> online.</p></sec></abstract><funding-group><award-group award-type="grant"><funding-source><institution-wrap><institution>Japan Society for the Promotion of Science KAKENHI</institution></institution-wrap></funding-source><award-id>15K00401</award-id><award-id>18K11526</award-id></award-group></funding-group><counts><page-count count="6"/></counts></article-meta></front><body><sec><title>1 Introduction</title><p>Genomic structural variations have been widely investigated at base pair resolution using the prevailing high-throughput sequencing technologies (<xref rid="btaa059-B1" ref-type="bibr">Alkan <italic>et al.</italic>, 2011</xref>). Examples where genomic variations occur include germline/somatic mutations, ranging from single nucleotide variants (SNVs) to structural variants (SVs) of at least 50&#x02009;bp (<xref rid="btaa059-B23" ref-type="bibr">Sudmant <italic>et al.</italic>, 2015</xref>; <xref rid="btaa059-B24" ref-type="bibr">The 1000 Genomes Project Consortium, 2015</xref>) such as insertions/deletions (indels), inversions or translocations (<xref rid="btaa059-B26" ref-type="bibr">Weischenfeldt <italic>et al.</italic>, 2013</xref>). Given that these variants can be associated with complex diseases and somatic mutations may correlate with the progression of cancer, detection of these variants is essential to elucidate disease mechanisms (<xref rid="btaa059-B15" ref-type="bibr">Martincorena and Campbell, 2015</xref>). In addition, the demand for detecting potential off-target sites with high accuracy is increasing as the use of genome-editing technologies increases (<xref rid="btaa059-B11" ref-type="bibr">Kuscu <italic>et al.</italic>, 2014</xref>).</p><p>Most of the <italic>in silico</italic> methods for variant detection rely on initial mapping onto a reference genome (<xref rid="btaa059-B4" ref-type="bibr">Chen <italic>et al.</italic>, 2009</xref>, <xref rid="btaa059-B5" ref-type="bibr">2016</xref>; <xref rid="btaa059-B6" ref-type="bibr">Cibulskis <italic>et al.</italic>, 2013</xref>; <xref rid="btaa059-B7" ref-type="bibr">DePristo <italic>et al.</italic>, 2011</xref>; <xref rid="btaa059-B10" ref-type="bibr">Kim <italic>et al.</italic>, 2018</xref>; <xref rid="btaa059-B12" ref-type="bibr">Lai <italic>et al.</italic>, 2016</xref>; <xref rid="btaa059-B13" ref-type="bibr">Larson <italic>et al.</italic>, 2012</xref>; <xref rid="btaa059-B20" ref-type="bibr">Rausch <italic>et al.</italic>, 2012</xref>; <xref rid="btaa059-B25" ref-type="bibr">Wang <italic>et al.</italic>, 2011</xref>; <xref rid="btaa059-B27" ref-type="bibr">Ye <italic>et al.</italic>, 2009</xref>). This implies that the quality of variant calling could be exacerbated when variant-containing reads are to be of no consideration due to being unmapped onto the reference genome. Additionally, these approaches typically predict many variant candidates and require some complex filtering steps based on statistical methods after the initial mapping in order to remove false-positive predictions, which would in turn result in lower sensitivity.</p><p>In contrast, some mapping-free approaches have been developed (<xref rid="btaa059-B3" ref-type="bibr">Audano <italic>et al.</italic>, 2018</xref>; <xref rid="btaa059-B9" ref-type="bibr">Iqbal <italic>et al.</italic>, 2012</xref>; <xref rid="btaa059-B18" ref-type="bibr">Pajuste <italic>et al.</italic>, 2017</xref>; <xref rid="btaa059-B19" ref-type="bibr">Rahman <italic>et al.</italic>, 2018</xref>; <xref rid="btaa059-B22" ref-type="bibr">Standage <italic>et al.</italic>, 2019</xref>) on the basis of short substrings of length <italic>k</italic> called <italic>k</italic>-mers. These methods, however, require reference <italic>k</italic>-mers, abundant unique read <italic>k</italic>-mers, or known variant <italic>k</italic>-mers to detect novel variants. A method for direct comparison of sequence reads without focusing on specific <italic>k</italic>-mers has also been proposed (<xref rid="btaa059-B16" ref-type="bibr">Moncunill <italic>et al.</italic>, 2014</xref>), which employs a quaternary sequence tree to expand all sequence reads together with their suffixes to be compared. This results in a huge memory requirement, and makes it impossible to run on a computer with a single node for analyzing omics data.</p><p>To circumvent these problems, we developed Bivartect (bit-based variant detection), a simple yet accurate computational approach to detecting genomic variants based on direct comparison of sequence reads, which skips initial mapping (<xref ref-type="fig" rid="btaa059-F1">Fig.&#x000a0;1</xref>). To reduce memory use, Bivartect converts all sequences into bit strings, and keeps only a small part of the suffixes of the reads in the memory space during identification of breakpoints, which are defined as positions at which aligned sequences begin to differ. Moreover, to attain a speed-up and save memory use further to run on a computer with a single node, we adopted a strategy where part of the suffixes of the normal and mutated reads with a common prefix are sorted to detect potential breakpoints. This is repeated until all combinations of the prefixes are covered. Reads recovered from suffixes in a breakpoint cluster are then assembled to generate consensus sequences in both normal and mutated sequence groups, which are then used to infer a variant type with respect to the breakpoint (<xref ref-type="fig" rid="btaa059-F1">Fig.&#x000a0;1</xref>). If necessary, consensus normal sequences in distinct breakpoint clusters, whose mutated counterparts are predicted to have variants, are mapped onto a reference genome to identify the genomic location of those variants. Since Bivartect basically aims to find breakpoints along with consensus normal/mutated sequences as described earlier, it can detect not only SNVs but also indels, inversions and their complexes. In particular, Bivartect can detect SNVs and small indels with high accuracy, part of which was demonstrated in our computational test.</p><fig id="btaa059-F1" orientation="portrait" position="float"><label>Fig. 1.</label><caption><p>Overview of Bivartect for detecting potential breakpoints. This schema is depicted using single-end reads for simplicity. As the first step, suffixes of at least predefined length are derived from input normal/mutated reads. They are then combined and lexicographically sorted. The light shaded suffixes have a common prefix on the left of the dark gray column, which corresponds to a potential breakpoint. Finally, a breakpoint cluster is constructed by recovering reads from the corresponding suffixes to infer its variant type. (Color version of this figure is available at <italic>Bioinformatics</italic> online.)</p></caption><graphic xlink:href="btaa059f1"/></fig></sec><sec><title>2 Materials and methods</title><sec><title>2.1 The Bivartect pipeline</title><p>Assume that reads from normal/mutated samples, called normal/mutated reads for short, are given, and barcodes embedded in the reads are removed if necessary. Note that filtering a base by its quality is disallowed in our framework. The key steps of the workflow of Bivartect are illustrated in <xref ref-type="fig" rid="btaa059-F1">Figure&#x000a0;1</xref>. Briefly, the process of variant detection consists of the following steps: (i) when normal/mutated reads are input to Bivartect, they are converted into bit strings, all of which are stored in memory, and then divided into <inline-formula id="IE1"><mml:math id="IM1"><mml:mrow><mml:msup><mml:mrow><mml:mn>4</mml:mn></mml:mrow><mml:mi>k</mml:mi></mml:msup></mml:mrow></mml:math></inline-formula> (e.g. <italic>k</italic> =<italic>&#x02009;</italic>3) small sets of their suffixes with a common prefix of length <italic>k</italic> to be processed sequentially. (ii) Bivartect seeks to sort suffixes in one of the above small sets, comprising both normal and mutated sequences, to construct a read cluster that contains a potential breakpoint. (iii) Consensus sequences for normal and mutated representatives are computed and compared with each other to infer the variant type. (iv) Steps (ii) and (iii) are iterated <inline-formula id="IE2"><mml:math id="IM2"><mml:mrow><mml:msup><mml:mrow><mml:mn>4</mml:mn></mml:mrow><mml:mi>k</mml:mi></mml:msup></mml:mrow></mml:math></inline-formula> times to cover all possible common prefixes.</p></sec><sec><title>2.2 Storing read information in memory</title><p>To select a necessary subset of reads for computation as fast as possible and make their size as small as possible, all sequence reads are converted into bit strings where each base is represented by 2 bits (cf. 8 bits per base as a usual case). For example, &#x02018;A,&#x02019; &#x02018;C,&#x02019; &#x02018;G&#x02019; and &#x02018;T&#x02019; are converted into &#x02018;00,&#x02019; &#x02018;01,&#x02019; &#x02018;10&#x02019; and &#x02018;11,&#x02019; respectively. In addition, a unique ID is assigned to each read to enable short-duration access to the read. More specifically, 64 reads are grouped together to make a block, and header information for each read represented by 2&#x02009;bytes is added to the head of the block, which stores an offset of the read concerned within the block. It is to be noted that na&#x000ef;ve storing of an address of a read in memory requires 8&#x02009;bytes in general. In contrast, in our implementation, only an addition of size <inline-formula id="IE3"><mml:math id="IM3"><mml:mrow><mml:mn>2</mml:mn><mml:mo>+</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>8</mml:mn><mml:mo>/</mml:mo><mml:mn>64</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mn>2.125</mml:mn></mml:mrow></mml:math></inline-formula> bytes per read is sufficient for access to the read, achieving fast access speed while reducing memory use.</p></sec><sec><title>2.3 Building a breakpoint cluster by divide-and-conquer</title><p>This part is divided into <inline-formula id="IE4"><mml:math id="IM4"><mml:mrow><mml:msup><mml:mrow><mml:mn>4</mml:mn></mml:mrow><mml:mi>k</mml:mi></mml:msup></mml:mrow></mml:math></inline-formula> sub-processes, each processed sequentially to save memory, and merged into the final results. The partition is based on the pattern of a common prefix of length <italic>k</italic> in read suffixes (a suffix of a sequence is defined as a substring of the sequence that ends with the last letter of the sequence). For an example of a case where <italic>k</italic> =<italic>&#x02009;</italic>3 (i.e. 64 partitions) and the lexicographical order (in the lexicographical order, sequences are ordered according to the alphabetical order of their components; e.g. A, C, G and T from head to tail) is taken into account, suffixes beginning with &#x02018;AAA&#x02019; are processed, and then the memory space necessary for this computation is released. Next, suffixes beginning with &#x02018;AAC&#x02019; are processed, followed by releasing the memory that had been necessary for this process. These steps are repeated until the prefix &#x02018;TTT&#x02019; is considered. It should be noted that the value of <italic>k</italic> does not affect the final results, and we used <italic>k</italic> = <italic>&#x02009;</italic>3 throughout the computational tests presented in this study.</p><p>Each sub-process is based on the following steps: (i) substrings beginning with a common prefix of length <italic>k</italic> are searched through all reads in memory, and suffixes with the prefix in the substrings are generated and stored in memory as additional components for subsequent analysis. (ii) Suffixes from normal reads are combined with suffixes from mutated reads, and lexicographically sorted. It is to be noted that information on whether each suffix is from a normal or mutated read is properly kept after the merger. (iii) Suffixes with the same prefix of length <italic>d</italic> are clustered when looking them up in the sorted list of suffixes from head to tail. Note that <italic>d</italic> is predefined as the shortest length of suffixes. (iv) A cluster with different bases starting at position <italic>d</italic> +<italic>&#x02009;</italic>1 is registered as a potential breakpoint cluster. (v) Reads are recovered from the corresponding suffixes in a breakpoint cluster. (vi) All suffixes with the common prefix of length <italic>k</italic> in memory are released. If the input is a set of non-strand-specific paired-end reads, the above steps must be processed for the reverse complements of input reads.</p><p>In the computational tests, <italic>d</italic> was changed to some extent to investigate the predictive performance of Bivartect in the benchmarking test (<xref ref-type="supplementary-material" rid="sup1">Supplementary Table S1</xref>). On the other hand, <italic>d</italic> =<italic>&#x02009;</italic>30 was used in the test with the mouse genome-editing data.</p></sec><sec><title>2.4 Removing breakpoint clusters with low quality</title><p>Closer inspection of breakpoint clusters is performed to produce high-quality predictions. First, careful attention should be paid to the ratio of predictions (having variants or not) to the total read in each sequence group of a breakpoint cluster. A normal group may contain contamination from mutated sequences, but we expect that this is very low (<inline-formula id="IE5"><mml:math id="IM5"><mml:mo>&#x02264;</mml:mo></mml:math></inline-formula>5%) in the real setting (<xref rid="btaa059-B16" ref-type="bibr">Moncunill <italic>et al.</italic>, 2014</xref>). As for a mutated group, sequences from a heterozygous (heterozygous means having two different alleles for a specific trait) sample ideally include 50% of variants in the mutated group where a normal parent and a mutated parent were mated. Let <inline-formula id="IE6"><mml:math id="IM6"><mml:mrow><mml:msub><mml:mrow><mml:mi>q</mml:mi></mml:mrow><mml:mrow><mml:mi>min</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE7"><mml:math id="IM7"><mml:mrow><mml:msub><mml:mrow><mml:mi>q</mml:mi></mml:mrow><mml:mrow><mml:mi>max</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> denote lower and upper bounds of ratios, respectively, of predicted variants to the total number of reads in the mutated group of a breakpoint cluster. For a pure condition in our benchmark data, <inline-formula id="IE8"><mml:math id="IM8"><mml:mrow><mml:msub><mml:mrow><mml:mi>q</mml:mi></mml:mrow><mml:mrow><mml:mi>min</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>0.9</mml:mn></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE9"><mml:math id="IM9"><mml:mrow><mml:msub><mml:mrow><mml:mi>q</mml:mi></mml:mrow><mml:mrow><mml:mi>max</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>1.0</mml:mn></mml:mrow></mml:math></inline-formula> were used. In the test with the mouse genome-editing data, which contain sequences of heterozygous mice, <inline-formula id="IE10"><mml:math id="IM10"><mml:mrow><mml:msub><mml:mrow><mml:mi>q</mml:mi></mml:mrow><mml:mrow><mml:mi>min</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>0.35</mml:mn></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE11"><mml:math id="IM11"><mml:mrow><mml:msub><mml:mrow><mml:mi>q</mml:mi></mml:mrow><mml:mrow><mml:mi>max</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>0.6</mml:mn></mml:mrow></mml:math></inline-formula> were used.</p><p>Considering the number of reads that support breakpoints also gives us an indicator for selecting high-quality variants. Let <inline-formula id="IE12"><mml:math id="IM12"><mml:mrow><mml:msub><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mi>min</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE13"><mml:math id="IM13"><mml:mrow><mml:msub><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mi>max</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> be cutoffs for the minimum and the maximum number of reads, respectively, of the normal group and the mutated counterpart in arbitrary breakpoint cluster. For example, if the minimum number of reads of two groups in a breakpoint cluster is less than <inline-formula id="IE14"><mml:math id="IM14"><mml:mrow><mml:msub><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mi>min</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula>, the cluster is discarded in terms of few supporting reads. We fixed <inline-formula id="IE15"><mml:math id="IM15"><mml:mrow><mml:msub><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mi>min</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>6</mml:mn></mml:mrow></mml:math></inline-formula> in all computational experiments presented in this work because preliminary tests suggested that use of this value resulted in better predictive performance than <inline-formula id="IE16"><mml:math id="IM16"><mml:mrow><mml:msub><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mi>min</mml:mi></mml:mrow></mml:msub><mml:mo>&#x0003c;</mml:mo><mml:mn>6</mml:mn></mml:mrow></mml:math></inline-formula>. In contrast, <inline-formula id="IE17"><mml:math id="IM17"><mml:mrow><mml:msub><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mi>max</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> was changed to some extent in the benchmarking test (as shown by <italic>c</italic> in <xref ref-type="supplementary-material" rid="sup1">Supplementary Table S1</xref>). In the test with the mouse genome-editing data, <inline-formula id="IE18"><mml:math id="IM18"><mml:mrow><mml:msub><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mi>max</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>28</mml:mn></mml:mrow></mml:math></inline-formula> was used. Guidance on how to set Bivartect&#x02019;s parameters can be found in <xref ref-type="supplementary-material" rid="sup1">Supplementary Note</xref>s.</p></sec><sec><title>2.5 Inferring variant type</title><p>To infer the variant type of a breakpoint cluster, the following steps are performed. Step 1: clusters that indicate the identical breakpoint are combined into one cluster by checking the identity of substrings on the left of the breakpoint. Step 2: Consensus sequences are computed in normal/mutated groups in a breakpoint cluster. Step 3: The variant type of a breakpoint is inferred by comparing normal and mutated consensus sequences. Step 4: If input reads are non-strand-specific paired-end reads, clusters that indicate the identical breakpoint on the reverse complementary strand are merged into one cluster in the forward direction. Step 5: If a breakpoint cluster of unassigned type is combined in Step 4, its variant type is inferred again. In what follows, Steps 2&#x02013;5 are described in more details.</p><sec><label>2.5.1</label><title>Computing consensus sequences</title><p>In each sequence group, a consensus sequence can be computed by majority voting, resulting in a pair of consensus normal and mutated sequences (<xref ref-type="supplementary-material" rid="sup1">Supplementary Fig. S1</xref>). If a base to be extended cannot be determined by this approach during computation, the extension is halted.</p></sec><sec><label>2.5.2</label><title>Inferring variant type from consensus sequences</title><p>A predicted breakpoint is checked to determine whether its type is indel, SNV, inversion or complex in that order by comparing consensus normal and mutated sequences. Examples of the complex variant type include contiguous SNVs, and a combination of SNVs and indels. These are registered as individual variants again if the complex is successfully decomposed into respective elements. If a variant is not assigned to any variant type stated above, it is judged as an unassigned breakpoint.</p></sec><sec><label>2.5.3</label><title>Dealing with non-strand-specific paired-end reads</title><p>If there are two different breakpoint clusters that show the same breakpoint due to reads in different strand orientation (i.e. forward and reverse) across paired FASTQ files, they should be integrated into one cluster. To this end, for each breakpoint cluster, substring <italic>s</italic> of fixed length (e.g. 15&#x02009;bp) including the breakpoint in a consensus normal sequence is cut out and stored in set <italic>S</italic>. Its reverse complement <inline-formula id="IE19"><mml:math id="IM19"><mml:mrow><mml:mover accent="true"><mml:mi>s</mml:mi><mml:mo>&#x000af;</mml:mo></mml:mover></mml:mrow></mml:math></inline-formula> is then stored in set <inline-formula id="IE20"><mml:math id="IM20"><mml:mrow><mml:mover accent="true"><mml:mi>S</mml:mi><mml:mo>&#x000af;</mml:mo></mml:mover></mml:mrow></mml:math></inline-formula>. Similarly, sets <inline-formula id="IE21"><mml:math id="IM21"><mml:mrow><mml:mi>S</mml:mi><mml:mo>&#x02032;</mml:mo></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE22"><mml:math id="IM22"><mml:mrow><mml:mover accent="true"><mml:mrow><mml:mi>S</mml:mi><mml:mo>&#x02032;</mml:mo></mml:mrow><mml:mo stretchy="false">&#x000af;</mml:mo></mml:mover></mml:mrow></mml:math></inline-formula> are constructed for consensus mutated sequence <inline-formula id="IE23"><mml:math id="IM23"><mml:mrow><mml:mi>s</mml:mi><mml:mo>&#x02032;</mml:mo></mml:mrow></mml:math></inline-formula> and its reverse complement <inline-formula id="IE24"><mml:math id="IM24"><mml:mrow><mml:mover accent="true"><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mo stretchy="false">&#x000af;</mml:mo></mml:mover><mml:mo>&#x02032;</mml:mo></mml:mrow></mml:math></inline-formula>, respectively. If there are substrings <inline-formula id="IE25"><mml:math id="IM25"><mml:mrow><mml:mi>t</mml:mi><mml:mo>,</mml:mo><mml:mi>u</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>S</mml:mi></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE26"><mml:math id="IM26"><mml:mrow><mml:mi>t</mml:mi><mml:mo>&#x02032;</mml:mo><mml:mo>,</mml:mo><mml:mi>u</mml:mi><mml:mo>&#x02032;</mml:mo><mml:mo>&#x02208;</mml:mo><mml:mi>S</mml:mi><mml:mo>&#x02032;</mml:mo></mml:mrow></mml:math></inline-formula> such that <inline-formula id="IE27"><mml:math id="IM27"><mml:mrow><mml:mi>t</mml:mi><mml:mo>=</mml:mo><mml:mrow><mml:mover accent="true"><mml:mi>u</mml:mi><mml:mo>&#x000af;</mml:mo></mml:mover></mml:mrow></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE28"><mml:math id="IM28"><mml:mrow><mml:mi>t</mml:mi><mml:mo>&#x02032;</mml:mo><mml:mo>=</mml:mo><mml:mrow><mml:mover accent="true"><mml:mrow><mml:mi>u</mml:mi></mml:mrow><mml:mo stretchy="false">&#x000af;</mml:mo></mml:mover><mml:mo>&#x02032;</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula> where <inline-formula id="IE29"><mml:math id="IM29"><mml:mrow><mml:mover accent="true"><mml:mi>u</mml:mi><mml:mo>&#x000af;</mml:mo></mml:mover><mml:mo>&#x02208;</mml:mo><mml:mrow><mml:mover accent="true"><mml:mi>S</mml:mi><mml:mo>&#x000af;</mml:mo></mml:mover></mml:mrow></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE30"><mml:math id="IM30"><mml:mrow><mml:mover accent="true"><mml:mrow><mml:mi>u</mml:mi><mml:mo>&#x02032;</mml:mo></mml:mrow><mml:mo stretchy="false">&#x000af;</mml:mo></mml:mover><mml:mo>&#x02208;</mml:mo><mml:mrow><mml:mover accent="true"><mml:mrow><mml:mi>S</mml:mi><mml:mo>&#x02032;</mml:mo></mml:mrow><mml:mo stretchy="false">&#x000af;</mml:mo></mml:mover></mml:mrow></mml:mrow></mml:math></inline-formula>, the cluster that derives <inline-formula id="IE31"><mml:math id="IM31"><mml:mrow><mml:mi>t</mml:mi><mml:mo>&#x02032;</mml:mo></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE32"><mml:math id="IM32"><mml:mrow><mml:mi>u</mml:mi><mml:mo>&#x02032;</mml:mo></mml:mrow></mml:math></inline-formula> is integrated into the other cluster that generates <italic>t</italic> and <italic>u</italic> (<xref ref-type="supplementary-material" rid="sup1">Supplementary Fig. S2</xref>).</p></sec><sec><label>2.5.4</label><title>Re-inferring variant type for unassigned breakpoints</title><p>If two different breakpoint clusters with an unassigned variant type are integrated as described earlier, consensus sequences in the integrated cluster are likely to be extended on the basis of their pairing information, leading to the possibility of inferring the variant type of large size. More precisely, two consensus normal/mutated sequences in the integrated cluster are merged into a new longer consensus normal/mutated sequence. The two resulting normal and mutated sequences are then used to infer the variant type.</p></sec></sec><sec><title>2.6 Post-mapping normal reads</title><p>If one needs to calculate genomic locations of predicted breakpoints, a consensus normal sequence for each breakpoint cluster is mapped onto a reference genome. To compute the positions of variants predicted by Bivartect in all computational tests, BWA-backtrack 0.7.17 (<xref rid="btaa059-B14" ref-type="bibr">Li and Durbin, 2009</xref>) was used.</p></sec><sec><title>2.7 Constructing simulated benchmark data</title><p>First, normal paired-end reads were generated by ART 2.5.8 (<xref rid="btaa059-B8" ref-type="bibr">Huang <italic>et al.</italic>, 2012</xref>) using human GRCh38 chromosome 22 as a reference sequence, where HiSeq 2500, 50, 200 and 10 were used for the built-in profile, the read length, the mean and the&#x000a0;standard deviation of the fragment size, respectively.</p><p>Next, real mutations were downsampled from&#x000a0;chromosome 22 of all common human variations compiled in dbSNP build 151 (<xref rid="btaa059-B21" ref-type="bibr">Sherry <italic>et al.</italic>, 2001</xref>). The downsampling was done in the following order: (i) keep all SVs of length <inline-formula id="IE33"><mml:math id="IM33"><mml:mo>&#x02265;</mml:mo></mml:math></inline-formula>50&#x02009;bp; (ii) sample 200&#x02009;000 variants; (iii) choose variants of the distance to their neighboring variants between 25 and 50&#x02009;bp (given two variants of positions <italic>x</italic><sub>1</sub> and <italic>x</italic><sub>2</sub><inline-formula id="IE34"><mml:math id="IM34"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>&#x0003c;</mml:mo><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>, the distance between the two is defined as <italic>d</italic> such that <inline-formula id="IE35"><mml:math id="IM35"><mml:mrow><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>+</mml:mo><mml:mi>d</mml:mi></mml:mrow></mml:math></inline-formula>). These processes resulted in 48 281 variants in total, and the detailed numbers of SNV, indel and SV are shown in <xref ref-type="supplementary-material" rid="sup1">Supplementary Table S2</xref>. After integrating these variants into the reference, mutated reads were also generated by ART.</p></sec></sec><sec><title>3 Results</title><sec><title>3.1 Benchmarking Bivartect</title><p>In our benchmarking test with the simulated data described above, Bivartect was compared with Manta 1.6.0 (<xref rid="btaa059-B5" ref-type="bibr">Chen <italic>et al.</italic>, 2016</xref>), MuTect2 (<xref rid="btaa059-B6" ref-type="bibr">Cibulskis <italic>et al.</italic>, 2013</xref>) built-in GATK 4.1.0.0, Pindel 0.2.5b9 (<xref rid="btaa059-B27" ref-type="bibr">Ye <italic>et al.</italic>, 2009</xref>), SMuFin 0.9.3 (<xref rid="btaa059-B16" ref-type="bibr">Moncunill <italic>et al.</italic>, 2014</xref>), SomaticSniper 1.0.5.0 (<xref rid="btaa059-B13" ref-type="bibr">Larson <italic>et al.</italic>, 2012</xref>) and Strelka 2.9.10 (<xref rid="btaa059-B10" ref-type="bibr">Kim <italic>et al.</italic>, 2018</xref>) as competitive variant callers. Predictive performance was evaluated by calculating sensitivity, positive predictive value (PPV) and <italic>F</italic>-measure, defined in <xref ref-type="supplementary-material" rid="sup1">Supplementary Note</xref>s. The results indicated that Bivartect achieved the high range of PPV (0.986) for SNV detection, and the third best balanced accuracy (<italic>F</italic>-measure, 0.904) for indels after MuTect2 and Strelka2 (<xref ref-type="fig" rid="btaa059-F2">Fig.&#x000a0;2a</xref> and b and <xref ref-type="supplementary-material" rid="sup1">Supplementary Table S3</xref>). Although the predictive performance of Bivartect was comparable to that of two mapping-based variant callers, Bivartect outperformed the mapping-free method SMuFin on these benchmark data.</p><fig id="btaa059-F2" orientation="portrait" position="float"><label>Fig. 2.</label><caption><p>Predictive performance of each variant caller on our simulated benchmark data. (<bold>a</bold>) Prediction accuracy of SNV callings. (<bold>b</bold>) Prediction accuracy of indel callings. The 24 red points plotted in these figures correspond to Bivartect results obtained from varying the hyper parameters shown in <xref ref-type="supplementary-material" rid="sup1">Supplementary Table S1</xref>. Note that the dashed gray line plotted in each figure shows a <italic>y</italic> =<italic>&#x02009;x</italic> line. (Color version of this figure is available at <italic>Bioinformatics</italic> online.)</p></caption><graphic xlink:href="btaa059f2"/></fig><p>We also assessed CPU time and peak memory for running the aforementioned tools by using the same benchmark data. It should be noted that time for pre-/post-mapping with BWA-backtrack was included in the CPU time. Bivartect was as fast as the other mapping-based variant callers, and 10.4-fold faster and used 3.4 times less memory than SMuFin (<xref ref-type="fig" rid="btaa059-F3">Fig.&#x000a0;3a and</xref> b and <xref ref-type="supplementary-material" rid="sup1">Supplementary Table S4</xref>). In addition, the peak memory use of Bivartect was 1.4 times less than that of MuTect2.</p><fig id="btaa059-F3" orientation="portrait" position="float"><label>Fig. 3.</label><caption><p>Computational performance of each variant caller. (<bold>a</bold>) CPU time of each tool for the benchmark data on a machine with Intel Xeon Gold 6126 (Skylake/2.6&#x02009;GHz 12 cores) and 192 GB RAM. Note that all but SMuFin were run with two threads, whereas SMuFin was run with two MPI processes. (<bold>b</bold>) The maximum memory usage of each tool for the benchmark data. Of note, Bivartect would not be suitable for whole-genome data of higher organisms since its run-time and memory increase with data size more than those of the other mapping-based callers. See <xref ref-type="supplementary-material" rid="sup1">Supplementary Note</xref>s S3.3 and S3.4 for further details</p></caption><graphic xlink:href="btaa059f3"/></fig><p>
<xref ref-type="fig" rid="btaa059-F4">Figure&#x000a0;4</xref> and <xref ref-type="supplementary-material" rid="sup1">Supplementary Table S5</xref> provide insight into the prediction accuracy as a function of indel size, indicating that Pindel achieved better sensitivity than the others over all indel sizes. This analysis also shows that Bivartect was better in sensitivity than SMuFin for smaller indels, and comparable for larger indels.</p><fig id="btaa059-F4" orientation="portrait" position="float"><label>Fig. 4.</label><caption><p>Sensitivity of each variant caller as a function of indel size on the benchmark data of 50&#x02009;bp paired-end reads of coverage 30&#x000d7;. Note that Manta detected indels of size larger than 7&#x02009;bp</p></caption><graphic xlink:href="btaa059f4"/></fig><p>Next, we examined how the predictive performance of each variant caller differs with the fold-coverage of simulated reads. In this analysis, Bivartect and MuTect2 achieved the highest and the most robust PPV regardless of coverage changes for SNV detection (<xref ref-type="supplementary-material" rid="sup1">Supplementary Fig. S3a</xref>). For indel detection, Bivartect had a slightly lower PPV than some of the other callers, but it was still high (&#x0003e;0.90; <xref ref-type="supplementary-material" rid="sup1">Supplementary Fig. S3b</xref>). PPV of Pindel, which showed the best sensitivity on the benchmark data, tended to deteriorate as the fold-coverage increased, indicating the tradeoff between sensitivity and PPV. In addition, Bivartect is included in the leading group with respect to sensitivity for both SNV and indel detection when the fold-coverage exceeded 30&#x000d7; (<xref ref-type="supplementary-material" rid="sup1">Supplementary Fig. S3c</xref> and d). Taken together, these results indicate that Bivartect, MuTect2, SomaticSniper and Strelka2 yielded robust and accurate predictions for the coverage change.</p><p>We also investigated an effect of repeats in the genome on prediction by each variant caller. Focusing only on repeat-annotated variants in the evaluation on the benchmark data, repeats did not affect the sensitivities of Bivartect, MuTect2, Pindel, SomaticSniper and Strelka2 (<xref ref-type="supplementary-material" rid="sup1">Supplementary Table S6</xref>).</p><p>Unlike some other variant callers, Bivartect can also accept single-end reads as input due to its simple framework (<xref ref-type="fig" rid="btaa059-F1">Fig.&#x000a0;1</xref>). More precisely, the predictive performance for both SNVs and indels on single-end reads was comparable to that on paired-end reads (<xref ref-type="fig" rid="btaa059-F5">Fig.&#x000a0;5a and b</xref>), which is one of the advantages over some competitive variant callers that cannot deal with single-end reads.</p><fig id="btaa059-F5" orientation="portrait" position="float"><label>Fig. 5.</label><caption><p>Comparison of predictive performance of Bivartect on single- and paired-end reads. Both reads are of coverage 30&#x000d7; and of length 50&#x02009;bp. (<bold>a</bold>) The performance for SNVs. (<bold>b</bold>) The performance for indels</p></caption><graphic xlink:href="btaa059f5"/></fig></sec><sec><title>3.2 Variant calling on mouse genome-editing data</title><p>We next examined the predictive performance of Bivartect relative to some leading mapping-based callers (MuTect2 and Strelka2) using real genome-editing data (DRA007211) compiled in the literature (<xref rid="btaa059-B17" ref-type="bibr">Nakajima <italic>et al.</italic>, 2016</xref>). In this reported study, whole exomes of heterozygous knock-in (KI) mice carrying a single missense mutation in the <italic>Ntrk1</italic> gene, which were generated using CRISPR/Cas9, were sequenced with 101&#x02009;bp paired-end reads of a depth 100&#x02013;120&#x000d7; and compared with a wild-type (WT) mouse from the same breeding colony. Note that BWA-MEM was used to initially map reads when MuTect2 and Strelka2 were run. When the sequencing data of two heterozygous KI mice (Nos. 306-1 and 316-2) were compared with the WT, all three callers correctly detected four validated SNVs including an edited mutation in the <italic>Ntrk1</italic> gene (<xref rid="btaa059-T1" ref-type="table">Table&#x000a0;1</xref>). However, it should be noted that the number of SNVs predicted by Bivartect was two orders of magnitude lower than predicted by MuTect2 and Strelka2. As for indels, both Bivartect and MuTect2 correctly detected one indel validated in No. 316-2, whereas Bivartect again predicted 100-fold fewer variants than MuTect2 (<xref rid="btaa059-T1" ref-type="table">Table&#x000a0;1</xref>). Of these three tools, Strelka2 reported the fewest indels, although the validated indel was not included in the results (<xref rid="btaa059-T1" ref-type="table">Table&#x000a0;1</xref>). These data suggest that Bivartect can detect the true variants by lining up fewer candidates, which would be an advantage in subsequent narrowing down of the potential off-target sites inserted during genome editing (<xref rid="btaa059-B2" ref-type="bibr">Anderson <italic>et al.</italic>, 2018</xref>).</p><table-wrap id="btaa059-T1" orientation="portrait" position="float"><label>Table 1.</label><caption><p>The number of variants predicted by three tools on the mouse genome-editing data where whole exomes of two F1 heterozygous KI mice (Nos. 306-1 and 316-2) were compared with that of a WT mouse</p></caption><table frame="hsides" rules="groups"><colgroup span="1"><col valign="top" align="left" span="1"/><col valign="top" align="center" span="1"/><col valign="top" align="char" char="." span="1"/><col valign="top" align="center" span="1"/><col valign="top" align="left" span="1"/><col valign="top" align="center" span="1"/><col valign="top" align="char" char="." span="1"/><col valign="top" align="center" span="1"/><col valign="top" align="char" char="." span="1"/></colgroup><thead><tr><th rowspan="1" colspan="1">Mouse sample (F1)</th><th colspan="4" rowspan="1">306-1<hr/></th><th colspan="4" rowspan="1">316-2<hr/></th></tr><tr><th rowspan="1" colspan="1">Variant type</th><th colspan="2" rowspan="1">SNV<hr/></th><th colspan="2" rowspan="1">Indel<hr/></th><th colspan="2" rowspan="1">SNV<hr/></th><th colspan="2" rowspan="1">Indel<hr/></th></tr><tr><th rowspan="1" colspan="1"/><th rowspan="1" colspan="1">Predicted</th><th rowspan="1" colspan="1">Validated (4)</th><th rowspan="1" colspan="1">Predicted</th><th rowspan="1" colspan="1">Validated (N/A)</th><th rowspan="1" colspan="1">Predicted</th><th rowspan="1" colspan="1">Validated (5)</th><th rowspan="1" colspan="1">Predicted</th><th rowspan="1" colspan="1">Validated (1)</th></tr></thead><tbody><tr><td rowspan="1" colspan="1">Bivartect</td><td rowspan="1" colspan="1">416</td><td rowspan="1" colspan="1">4</td><td rowspan="1" colspan="1">115</td><td rowspan="1" colspan="1">N/A</td><td rowspan="1" colspan="1">425</td><td rowspan="1" colspan="1">5</td><td rowspan="1" colspan="1">119</td><td rowspan="1" colspan="1">1</td></tr><tr><td rowspan="1" colspan="1">MuTect2</td><td rowspan="1" colspan="1">50&#x02009;694</td><td rowspan="1" colspan="1">4</td><td rowspan="1" colspan="1">12&#x02009;526</td><td rowspan="1" colspan="1">N/A</td><td rowspan="1" colspan="1">45&#x02009;055</td><td rowspan="1" colspan="1">5</td><td rowspan="1" colspan="1">12&#x02009;982</td><td rowspan="1" colspan="1">1</td></tr><tr><td rowspan="1" colspan="1">Strelka2</td><td rowspan="1" colspan="1">62&#x02009;065</td><td rowspan="1" colspan="1">4</td><td rowspan="1" colspan="1">31</td><td rowspan="1" colspan="1">N/A</td><td rowspan="1" colspan="1">51&#x02009;898</td><td rowspan="1" colspan="1">5</td><td rowspan="1" colspan="1">39</td><td rowspan="1" colspan="1">0</td></tr></tbody></table><table-wrap-foot><fn id="tblfn1"><p>
<italic>Note</italic>: The total number of validated variants is indicated in parentheses.</p></fn><fn id="tblfn2"><p>N/A, not available.</p></fn></table-wrap-foot></table-wrap></sec></sec><sec><title>4 Discussion</title><p>Among state-of-the-art variant callers compared in this work, SMuFin, based on direct comparison of sequence reads, requires huge memory. In contrast, Bivartect not only used less memory but also achieved higher accuracy than SMuFin as demonstrated in the benchmarking test. This may be due to the simple framework of Bivartect, which is contrast to SMuFin&#x02019;s complicated implementation with a message-passing interface dependent on hardware, leading to the possibility of the reduced accuracy of variant calling on the benchmark data.</p><p>The initial mapping-based approaches have a fair number of controllable parameters of constituent tools in the analysis pipeline, particularly for complex filtering after the initial mapping, whereas the direct read comparison has fewer parameters than the former due to the simple framework. In real applications, optimizing a complex set of parameters depending on the input would be hard and painstaking, and an arbitrary parameter setting (e.g. the default setting) might cause some problems such as having lower sensitivity or higher false-positive rate in the predictions. In fact, the number of predicted variants in the mapping-based callers was much larger than in the direct read comparison (<xref rid="btaa059-T1" ref-type="table">Table&#x000a0;1</xref>). Note that Bivartect&#x02019;s high PPV on the benchmark data does not necessarily mean the low number of false positives on other data. Although the number of variants detected by Bivartect in this table might be still so many that one could not validate these experimentally, information on known variants available in the future would be useful for reducing the candidates further, enabling the tool to overcome this problem. Hence, the framework of the direct read comparison would be more general and accessible than the initial mapping-based methods.</p><p>Bivartect is a memory-efficient variant caller with high accuracy, particularly for detecting SNVs, which is achieved without initial mapping. Despite its simplicity, Bivartect can handle a wide range of applications irrespective of biological species, from the detection of germline mutations in the same individual, to the confirmation of off-target mutations in genome-editing data using any exome sequence data. In addition, Bivartect is applicable to whole-genome sequence data from lower organisms, where there may not be sufficient information available on the reference genome. Details of dealing with whole-genome sequence data for higher organisms such as human are discussed in <xref ref-type="supplementary-material" rid="sup1">Supplementary Note</xref>s. Considering that genome-editing technologies have been rapidly utilized for different organisms, detection of variants without initial mapping is expected to increase in importance.</p></sec><sec sec-type="supplementary-material"><title>Supplementary Material</title><supplementary-material content-type="local-data" id="sup1"><label>btaa059_Supplementary_Data</label><media xlink:href="btaa059_supplementary_data.pdf"><caption><p>Click here for additional data file.</p></caption></media></supplementary-material></sec></body><back><ack id="ack1"><title>Acknowledgements</title><p>We would like to thank Drs Tadafumi Kato and Kazuo Nakajima at RIKEN for helpful comments on their genome-editing data. This work was partly achieved through the use of large-scale computer systems at the Cybermedia Center, Osaka University and the NIG supercomputer at ROIS National Institute of Genetics.</p><sec><title>Funding</title><p>This work was supported by Japan Society for the Promotion of Science KAKENHI [15K00401 and 18K11526 to Y.K.].</p><p>
<italic>Conflict of Interest</italic>: none declared.</p></sec></ack><ref-list id="ref1"><title>References</title><ref id="btaa059-B1"><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name name-style="western"><surname>Alkan</surname><given-names>C.</given-names></name></person-group>
<etal>et al</etal> (<year>2011</year>) 
<article-title>Genome structural variation discovery and genotyping</article-title>. <source>Nat. Rev. Genet</source>., <volume>12</volume>, <fpage>363</fpage>&#x02013;<lpage>376</lpage>.<pub-id pub-id-type="pmid">21358748</pub-id></mixed-citation></ref><ref id="btaa059-B2"><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name name-style="western"><surname>Anderson</surname><given-names>K.R.</given-names></name></person-group>
<etal>et al</etal> (<year>2018</year>) 
<article-title>CRISPR off-target analysis in genetically engineered rats and mice</article-title>. <source>Nat. Methods</source>, <volume>15</volume>, <fpage>512</fpage>&#x02013;<lpage>514</lpage>.<pub-id pub-id-type="pmid">29786090</pub-id></mixed-citation></ref><ref id="btaa059-B3"><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name name-style="western"><surname>Audano</surname><given-names>P.A.</given-names></name></person-group>
<etal>et al</etal> (<year>2018</year>) 
<article-title>Mapping-free variant calling using haplotype reconstruction from k-mer frequencies</article-title>. <source>Bioinformatics</source>, <volume>34</volume>, <fpage>1659</fpage>&#x02013;<lpage>1665</lpage>.<pub-id pub-id-type="pmid">29186321</pub-id></mixed-citation></ref><ref id="btaa059-B4"><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name name-style="western"><surname>Chen</surname><given-names>K.</given-names></name></person-group>
<etal>et al</etal> (<year>2009</year>) 
<article-title>BreakDancer: an algorithm for high-resolution mapping of genomic structural variation</article-title>. <source>Nat. Methods</source>, <volume>6</volume>, <fpage>677</fpage>&#x02013;<lpage>681</lpage>.<pub-id pub-id-type="pmid">19668202</pub-id></mixed-citation></ref><ref id="btaa059-B5"><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name name-style="western"><surname>Chen</surname><given-names>X.</given-names></name></person-group>
<etal>et al</etal> (<year>2016</year>) 
<article-title>Manta: rapid detection of structural variants and indels for germline and cancer sequencing applications</article-title>. <source>Bioinformatics</source>, <volume>32</volume>, <fpage>1220</fpage>&#x02013;<lpage>1222</lpage>.<pub-id pub-id-type="pmid">26647377</pub-id></mixed-citation></ref><ref id="btaa059-B6"><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name name-style="western"><surname>Cibulskis</surname><given-names>K.</given-names></name></person-group>
<etal>et al</etal> (<year>2013</year>) 
<article-title>Sensitive detection of somatic point mutations in impure and heterogeneous cancer samples</article-title>. <source>Nat. Biotechnol</source>., <volume>31</volume>, <fpage>213</fpage>&#x02013;<lpage>219</lpage>.<pub-id pub-id-type="pmid">23396013</pub-id></mixed-citation></ref><ref id="btaa059-B7"><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name name-style="western"><surname>DePristo</surname><given-names>M.A.</given-names></name></person-group>
<etal>et al</etal> (<year>2011</year>) 
<article-title>A framework for variation discovery and genotyping using next-generation DNA sequencing data</article-title>. <source>Nat. Genet</source>., <volume>43</volume>, <fpage>491</fpage>&#x02013;<lpage>498</lpage>.<pub-id pub-id-type="pmid">21478889</pub-id></mixed-citation></ref><ref id="btaa059-B8"><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name name-style="western"><surname>Huang</surname><given-names>W.</given-names></name></person-group>
<etal>et al</etal> (<year>2012</year>) 
<article-title>ART: a next-generation sequencing read simulator</article-title>. <source>Bioinformatics</source>, <volume>28</volume>, <fpage>593</fpage>&#x02013;<lpage>594</lpage>.<pub-id pub-id-type="pmid">22199392</pub-id></mixed-citation></ref><ref id="btaa059-B9"><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name name-style="western"><surname>Iqbal</surname><given-names>Z.</given-names></name></person-group>
<etal>et al</etal> (<year>2012</year>) 
<article-title>De novo assembly and genotyping of variants using colored de Bruijn graphs</article-title>. <source>Nat. Genet</source>., <volume>44</volume>, <fpage>226</fpage>&#x02013;<lpage>232</lpage>.<pub-id pub-id-type="pmid">22231483</pub-id></mixed-citation></ref><ref id="btaa059-B10"><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name name-style="western"><surname>Kim</surname><given-names>S.</given-names></name></person-group>
<etal>et al</etal> (<year>2018</year>) 
<article-title>Strelka2: fast and accurate calling of germline and somatic variants</article-title>. <source>Nat. Methods</source>, <volume>15</volume>, <fpage>591</fpage>&#x02013;<lpage>594</lpage>.<pub-id pub-id-type="pmid">30013048</pub-id></mixed-citation></ref><ref id="btaa059-B11"><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name name-style="western"><surname>Kuscu</surname><given-names>C.</given-names></name></person-group>
<etal>et al</etal> (<year>2014</year>) 
<article-title>Genome-wide analysis reveals characteristics of off-target sites bound by the Cas9 endonuclease</article-title>. <source>Nat. Biotechnol</source>., <volume>32</volume>, <fpage>677</fpage>&#x02013;<lpage>683</lpage>.<pub-id pub-id-type="pmid">24837660</pub-id></mixed-citation></ref><ref id="btaa059-B12"><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name name-style="western"><surname>Lai</surname><given-names>Z.</given-names></name></person-group>
<etal>et al</etal> (<year>2016</year>) 
<article-title>VarDict: a novel and versatile variant caller for next-generation sequencing in cancer research</article-title>. <source>Nucleic Acids Res</source>., <volume>44</volume>, <fpage>e108</fpage>.<pub-id pub-id-type="pmid">27060149</pub-id></mixed-citation></ref><ref id="btaa059-B13"><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name name-style="western"><surname>Larson</surname><given-names>D.E.</given-names></name></person-group>
<etal>et al</etal> (<year>2012</year>) 
<article-title>SomaticSniper: identification of somatic point mutations in whole genome sequencing data</article-title>. <source>Bioinformatics</source>, <volume>28</volume>, <fpage>311</fpage>&#x02013;<lpage>317</lpage>.<pub-id pub-id-type="pmid">22155872</pub-id></mixed-citation></ref><ref id="btaa059-B14"><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name name-style="western"><surname>Li</surname><given-names>H.</given-names></name>, <name name-style="western"><surname>Durbin</surname><given-names>R.</given-names></name></person-group> (<year>2009</year>) 
<article-title>Fast and accurate short read alignment with Burrows&#x02013;Wheeler transform</article-title>. <source>Bioinformatics</source>, <volume>25</volume>, <fpage>1754</fpage>&#x02013;<lpage>1760</lpage>.<pub-id pub-id-type="pmid">19451168</pub-id></mixed-citation></ref><ref id="btaa059-B15"><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name name-style="western"><surname>Martincorena</surname><given-names>I.</given-names></name>, <name name-style="western"><surname>Campbell</surname><given-names>P.J.</given-names></name></person-group> (<year>2015</year>) 
<article-title>Somatic mutation in cancer and normal cells</article-title>. <source>Science</source>, <volume>349</volume>, <fpage>1483</fpage>&#x02013;<lpage>1489</lpage>.<pub-id pub-id-type="pmid">26404825</pub-id></mixed-citation></ref><ref id="btaa059-B16"><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name name-style="western"><surname>Moncunill</surname><given-names>V.</given-names></name></person-group>
<etal>et al</etal> (<year>2014</year>) 
<article-title>Comprehensive characterization of complex structural variations in cancer by directly comparing genome sequence reads</article-title>. <source>Nat. Biotechnol</source>., <volume>32</volume>, <fpage>1106</fpage>&#x02013;<lpage>1112</lpage>.<pub-id pub-id-type="pmid">25344728</pub-id></mixed-citation></ref><ref id="btaa059-B17"><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name name-style="western"><surname>Nakajima</surname><given-names>K.</given-names></name></person-group>
<etal>et al</etal> (<year>2016</year>) 
<article-title>Exome sequencing in the knock-in mice generated using the CRISPR/Cas system</article-title>. <source>Sci. Rep</source>., <volume>6</volume>, <fpage>34703</fpage>.<pub-id pub-id-type="pmid">27698470</pub-id></mixed-citation></ref><ref id="btaa059-B18"><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name name-style="western"><surname>Pajuste</surname><given-names>F.D.</given-names></name></person-group>
<etal>et al</etal> (<year>2017</year>) 
<article-title>FastGT: an alignment-free method for calling common SNVs directly from raw sequencing reads</article-title>. <source>Sci. Rep</source>., <volume>7</volume>, <fpage>2537</fpage>.<pub-id pub-id-type="pmid">28566690</pub-id></mixed-citation></ref><ref id="btaa059-B19"><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name name-style="western"><surname>Rahman</surname><given-names>A.</given-names></name></person-group>
<etal>et al</etal> (<year>2018</year>) 
<article-title>Association mapping from sequencing reads using k-mers</article-title>. <source>Elife</source>, <volume>7</volume>, <fpage>e32920</fpage>.<pub-id pub-id-type="pmid">29897334</pub-id></mixed-citation></ref><ref id="btaa059-B20"><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name name-style="western"><surname>Rausch</surname><given-names>T.</given-names></name></person-group>
<etal>et al</etal> (<year>2012</year>) 
<article-title>DELLY: structural variant discovery by integrated paired-end and split-read analysis</article-title>. <source>Bioinformatics</source>, <volume>28</volume>, <fpage>i333</fpage>&#x02013;<lpage>i339</lpage>.<pub-id pub-id-type="pmid">22962449</pub-id></mixed-citation></ref><ref id="btaa059-B21"><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name name-style="western"><surname>Sherry</surname><given-names>S.T.</given-names></name></person-group>
<etal>et al</etal> (<year>2001</year>) 
<article-title>dbSNP: the NCBI database of genetic variation</article-title>. <source>Nucleic Acids Res</source>., <volume>29</volume>, <fpage>308</fpage>&#x02013;<lpage>311</lpage>.<pub-id pub-id-type="pmid">11125122</pub-id></mixed-citation></ref><ref id="btaa059-B22"><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name name-style="western"><surname>Standage</surname><given-names>D.S.</given-names></name></person-group>
<etal>et al</etal> (<year>2019</year>) 
<article-title>Kevlar: a mapping-free framework for accurate discovery of de novo variants</article-title>. <source>iScience</source>, <volume>18</volume>, <fpage>28</fpage>&#x02013;<lpage>36</lpage>.<pub-id pub-id-type="pmid">31377530</pub-id></mixed-citation></ref><ref id="btaa059-B23"><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name name-style="western"><surname>Sudmant</surname><given-names>P.H.</given-names></name></person-group>
<etal>et al</etal> (<year>2015</year>) 
<article-title>An integrated map of structural variation in 2,504 human genomes</article-title>. <source>Nature</source>, <volume>526</volume>, <fpage>75</fpage>&#x02013;<lpage>81</lpage>.<pub-id pub-id-type="pmid">26432246</pub-id></mixed-citation></ref><ref id="btaa059-B24"><mixed-citation publication-type="journal">The 1000 Genomes Project Consortium (<year>2015</year><article-title>) A global reference for human genetic variation</article-title>. <source>Nature</source>, <volume>526</volume>, <fpage>68</fpage>&#x02013;<lpage>74</lpage>.<pub-id pub-id-type="pmid">26432245</pub-id></mixed-citation></ref><ref id="btaa059-B25"><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name name-style="western"><surname>Wang</surname><given-names>J.</given-names></name></person-group>
<etal>et al</etal> (<year>2011</year>) 
<article-title>CREST maps somatic structural variation in cancer genomes with base-pair resolution</article-title>. <source>Nat. Methods</source>, <volume>8</volume>, <fpage>652</fpage>&#x02013;<lpage>654</lpage>.<pub-id pub-id-type="pmid">21666668</pub-id></mixed-citation></ref><ref id="btaa059-B26"><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name name-style="western"><surname>Weischenfeldt</surname><given-names>J.</given-names></name></person-group>
<etal>et al</etal> (<year>2013</year>) 
<article-title>Phenotypic impact of genomic structural variation: insights from and for human disease</article-title>. <source>Nat. Rev. Genet</source>., <volume>14</volume>, <fpage>125</fpage>&#x02013;<lpage>138</lpage>.<pub-id pub-id-type="pmid">23329113</pub-id></mixed-citation></ref><ref id="btaa059-B27"><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name name-style="western"><surname>Ye</surname><given-names>K.</given-names></name></person-group>
<etal>et al</etal> (<year>2009</year>) 
<article-title>Pindel: a pattern growth approach to detect break points of large deletions and medium sized insertions from paired-end short reads</article-title>. <source>Bioinformatics</source>, <volume>25</volume>, <fpage>2865</fpage>&#x02013;<lpage>2871</lpage>.<pub-id pub-id-type="pmid">19561018</pub-id></mixed-citation></ref></ref-list></back></article>