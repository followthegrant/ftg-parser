stages:
  - build
  # - init-state
  # - download
  # - extract
  # - import
  # - upload-state
  - update-data

docker-build:
  # Build a Docker image with CI/CD and push to the GitLab registry.
  # Docker-in-Docker documentation: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
  #
  # This template uses one generic job with conditional builds
  # for the default branch and all other (MR) branches.

  # Use the official docker image.
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
    - docker push "$CI_REGISTRY_IMAGE${tag}"
  # don't run in schedules
  except:
    - schedules
  # only build when this changes
  only:
    changes:
      - Dockerfile
      - Makefile
      - setup.py
      - rclone.conf
  # or trigger manually
  rules:
    - when: manual

update-data:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - when: manual
  stage: update-data
  image: "$CI_REGISTRY_IMAGE${tag}"
  script:
    - make all

# init-state:
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "schedule"
#   stage: init-state
#   image: "$CI_REGISTRY_IMAGE${tag}"
#   script:
#     - make init
#     - make pull
#     - make diff

# download:
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "schedule"
#   stage: download
#   image: "$CI_REGISTRY_IMAGE${tag}"
#   script:
#     - make download

# extract:
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "schedule"
#   stage: extract
#   image: "$CI_REGISTRY_IMAGE${tag}"
#   script:
#     - make extract

# import:
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "schedule"
#   stage: import
#   image: "$CI_REGISTRY_IMAGE${tag}"
#   script:
#     - make import

# upload-state:
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "schedule"
#   stage: upload-state
#   image: "$CI_REGISTRY_IMAGE${tag}"
#   script:
#     - make push
